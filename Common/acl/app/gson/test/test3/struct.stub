#pragma once
#include <string>

struct people
{
	people(void) {}
	virtual ~people(void) {}
};

struct student : people
{
	std::string shcool;
	std::string class_name;

	student(void) {}
	virtual ~student(void) {}
};

struct province
{
	std::string province_name;
	std::string position;

	province(void) {}
	virtual ~province(void) {}
};

struct user : student, province
{
	std::string name;
	std::vector<std::string> nicks;
	int  age;
	bool male;

	user(void) {}
	virtual ~user(void) {}
};

struct user_male : user
{
	std::string favorite;
	int height;
	// Gson@optional
	std::vector<int> ages;
	// Gson@optional
	std::map<acl::string, acl::string> dummy;

	const char* get_favorite(void) const
	{
		return favorite.c_str();
	}
	int get_height(void) const
	{
		return height;
	}
};

struct user_female : user
{
	std::string favorite;
	int weigtht;
};

struct files_outdate
{
	int status;
	acl::string msg;
	acl::string disk;

	files_outdate(void)
	{
		status = 200;
		msg    = "ok";
	}

	// @Gson optional
	std::vector<acl::string> files;
};
