// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: elasticjob_worker_service.proto

#include "elasticjob_worker_service.pb.h"
#include "elasticjob_worker_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace elasticjob_service {

static const char* ElasticJobWorker_method_names[] = {
  "/elasticjob_service.ElasticJobWorker/RegisterWorker",
  "/elasticjob_service.ElasticJobWorker/DeregisterWorker",
  "/elasticjob_service.ElasticJobWorker/SendStats",
  "/elasticjob_service.ElasticJobWorker/SendRunningJobs",
  "/elasticjob_service.ElasticJobWorker/SendJobResult",
  "/elasticjob_service.ElasticJobWorker/ExchangeJob",
};

std::unique_ptr< ElasticJobWorker::Stub> ElasticJobWorker::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ElasticJobWorker::Stub> stub(new ElasticJobWorker::Stub(channel));
  return stub;
}

ElasticJobWorker::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RegisterWorker_(ElasticJobWorker_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeregisterWorker_(ElasticJobWorker_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendStats_(ElasticJobWorker_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendRunningJobs_(ElasticJobWorker_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendJobResult_(ElasticJobWorker_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExchangeJob_(ElasticJobWorker_method_names[5], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status ElasticJobWorker::Stub::RegisterWorker(::grpc::ClientContext* context, const ::elasticjob_service::RegisterWorkerReqeust& request, ::elasticjob_service::RegisterWorkerReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RegisterWorker_, context, request, response);
}

void ElasticJobWorker::Stub::experimental_async::RegisterWorker(::grpc::ClientContext* context, const ::elasticjob_service::RegisterWorkerReqeust* request, ::elasticjob_service::RegisterWorkerReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterWorker_, context, request, response, std::move(f));
}

void ElasticJobWorker::Stub::experimental_async::RegisterWorker(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::RegisterWorkerReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterWorker_, context, request, response, std::move(f));
}

void ElasticJobWorker::Stub::experimental_async::RegisterWorker(::grpc::ClientContext* context, const ::elasticjob_service::RegisterWorkerReqeust* request, ::elasticjob_service::RegisterWorkerReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterWorker_, context, request, response, reactor);
}

void ElasticJobWorker::Stub::experimental_async::RegisterWorker(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::RegisterWorkerReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterWorker_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::elasticjob_service::RegisterWorkerReply>* ElasticJobWorker::Stub::AsyncRegisterWorkerRaw(::grpc::ClientContext* context, const ::elasticjob_service::RegisterWorkerReqeust& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::elasticjob_service::RegisterWorkerReply>::Create(channel_.get(), cq, rpcmethod_RegisterWorker_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::elasticjob_service::RegisterWorkerReply>* ElasticJobWorker::Stub::PrepareAsyncRegisterWorkerRaw(::grpc::ClientContext* context, const ::elasticjob_service::RegisterWorkerReqeust& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::elasticjob_service::RegisterWorkerReply>::Create(channel_.get(), cq, rpcmethod_RegisterWorker_, context, request, false);
}

::grpc::Status ElasticJobWorker::Stub::DeregisterWorker(::grpc::ClientContext* context, const ::elasticjob_service::DeregisterWorkerReqeust& request, ::elasticjob_service::DeregisterWorkerReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeregisterWorker_, context, request, response);
}

void ElasticJobWorker::Stub::experimental_async::DeregisterWorker(::grpc::ClientContext* context, const ::elasticjob_service::DeregisterWorkerReqeust* request, ::elasticjob_service::DeregisterWorkerReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeregisterWorker_, context, request, response, std::move(f));
}

void ElasticJobWorker::Stub::experimental_async::DeregisterWorker(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::DeregisterWorkerReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeregisterWorker_, context, request, response, std::move(f));
}

void ElasticJobWorker::Stub::experimental_async::DeregisterWorker(::grpc::ClientContext* context, const ::elasticjob_service::DeregisterWorkerReqeust* request, ::elasticjob_service::DeregisterWorkerReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeregisterWorker_, context, request, response, reactor);
}

void ElasticJobWorker::Stub::experimental_async::DeregisterWorker(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::DeregisterWorkerReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeregisterWorker_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::elasticjob_service::DeregisterWorkerReply>* ElasticJobWorker::Stub::AsyncDeregisterWorkerRaw(::grpc::ClientContext* context, const ::elasticjob_service::DeregisterWorkerReqeust& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::elasticjob_service::DeregisterWorkerReply>::Create(channel_.get(), cq, rpcmethod_DeregisterWorker_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::elasticjob_service::DeregisterWorkerReply>* ElasticJobWorker::Stub::PrepareAsyncDeregisterWorkerRaw(::grpc::ClientContext* context, const ::elasticjob_service::DeregisterWorkerReqeust& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::elasticjob_service::DeregisterWorkerReply>::Create(channel_.get(), cq, rpcmethod_DeregisterWorker_, context, request, false);
}

::grpc::Status ElasticJobWorker::Stub::SendStats(::grpc::ClientContext* context, const ::elasticjob_service::SendStatsReqeust& request, ::elasticjob_service::SendStatsReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendStats_, context, request, response);
}

void ElasticJobWorker::Stub::experimental_async::SendStats(::grpc::ClientContext* context, const ::elasticjob_service::SendStatsReqeust* request, ::elasticjob_service::SendStatsReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendStats_, context, request, response, std::move(f));
}

void ElasticJobWorker::Stub::experimental_async::SendStats(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::SendStatsReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendStats_, context, request, response, std::move(f));
}

void ElasticJobWorker::Stub::experimental_async::SendStats(::grpc::ClientContext* context, const ::elasticjob_service::SendStatsReqeust* request, ::elasticjob_service::SendStatsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SendStats_, context, request, response, reactor);
}

void ElasticJobWorker::Stub::experimental_async::SendStats(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::SendStatsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SendStats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::elasticjob_service::SendStatsReply>* ElasticJobWorker::Stub::AsyncSendStatsRaw(::grpc::ClientContext* context, const ::elasticjob_service::SendStatsReqeust& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::elasticjob_service::SendStatsReply>::Create(channel_.get(), cq, rpcmethod_SendStats_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::elasticjob_service::SendStatsReply>* ElasticJobWorker::Stub::PrepareAsyncSendStatsRaw(::grpc::ClientContext* context, const ::elasticjob_service::SendStatsReqeust& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::elasticjob_service::SendStatsReply>::Create(channel_.get(), cq, rpcmethod_SendStats_, context, request, false);
}

::grpc::Status ElasticJobWorker::Stub::SendRunningJobs(::grpc::ClientContext* context, const ::elasticjob_service::SendRunningJobsRequest& request, ::elasticjob_service::SendRunningJobsReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendRunningJobs_, context, request, response);
}

void ElasticJobWorker::Stub::experimental_async::SendRunningJobs(::grpc::ClientContext* context, const ::elasticjob_service::SendRunningJobsRequest* request, ::elasticjob_service::SendRunningJobsReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendRunningJobs_, context, request, response, std::move(f));
}

void ElasticJobWorker::Stub::experimental_async::SendRunningJobs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::SendRunningJobsReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendRunningJobs_, context, request, response, std::move(f));
}

void ElasticJobWorker::Stub::experimental_async::SendRunningJobs(::grpc::ClientContext* context, const ::elasticjob_service::SendRunningJobsRequest* request, ::elasticjob_service::SendRunningJobsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SendRunningJobs_, context, request, response, reactor);
}

void ElasticJobWorker::Stub::experimental_async::SendRunningJobs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::SendRunningJobsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SendRunningJobs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::elasticjob_service::SendRunningJobsReply>* ElasticJobWorker::Stub::AsyncSendRunningJobsRaw(::grpc::ClientContext* context, const ::elasticjob_service::SendRunningJobsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::elasticjob_service::SendRunningJobsReply>::Create(channel_.get(), cq, rpcmethod_SendRunningJobs_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::elasticjob_service::SendRunningJobsReply>* ElasticJobWorker::Stub::PrepareAsyncSendRunningJobsRaw(::grpc::ClientContext* context, const ::elasticjob_service::SendRunningJobsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::elasticjob_service::SendRunningJobsReply>::Create(channel_.get(), cq, rpcmethod_SendRunningJobs_, context, request, false);
}

::grpc::Status ElasticJobWorker::Stub::SendJobResult(::grpc::ClientContext* context, const ::elasticjob_service::SendJobResultRequest& request, ::elasticjob_service::SendJobResultReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendJobResult_, context, request, response);
}

void ElasticJobWorker::Stub::experimental_async::SendJobResult(::grpc::ClientContext* context, const ::elasticjob_service::SendJobResultRequest* request, ::elasticjob_service::SendJobResultReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendJobResult_, context, request, response, std::move(f));
}

void ElasticJobWorker::Stub::experimental_async::SendJobResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::SendJobResultReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendJobResult_, context, request, response, std::move(f));
}

void ElasticJobWorker::Stub::experimental_async::SendJobResult(::grpc::ClientContext* context, const ::elasticjob_service::SendJobResultRequest* request, ::elasticjob_service::SendJobResultReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SendJobResult_, context, request, response, reactor);
}

void ElasticJobWorker::Stub::experimental_async::SendJobResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::SendJobResultReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SendJobResult_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::elasticjob_service::SendJobResultReply>* ElasticJobWorker::Stub::AsyncSendJobResultRaw(::grpc::ClientContext* context, const ::elasticjob_service::SendJobResultRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::elasticjob_service::SendJobResultReply>::Create(channel_.get(), cq, rpcmethod_SendJobResult_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::elasticjob_service::SendJobResultReply>* ElasticJobWorker::Stub::PrepareAsyncSendJobResultRaw(::grpc::ClientContext* context, const ::elasticjob_service::SendJobResultRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::elasticjob_service::SendJobResultReply>::Create(channel_.get(), cq, rpcmethod_SendJobResult_, context, request, false);
}

::grpc::ClientReader< ::elasticjob_service::ExchangeJobReply>* ElasticJobWorker::Stub::ExchangeJobRaw(::grpc::ClientContext* context, const ::elasticjob_service::ExchangeJobRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::elasticjob_service::ExchangeJobReply>::Create(channel_.get(), rpcmethod_ExchangeJob_, context, request);
}

void ElasticJobWorker::Stub::experimental_async::ExchangeJob(::grpc::ClientContext* context, ::elasticjob_service::ExchangeJobRequest* request, ::grpc::experimental::ClientReadReactor< ::elasticjob_service::ExchangeJobReply>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::elasticjob_service::ExchangeJobReply>::Create(stub_->channel_.get(), stub_->rpcmethod_ExchangeJob_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::elasticjob_service::ExchangeJobReply>* ElasticJobWorker::Stub::AsyncExchangeJobRaw(::grpc::ClientContext* context, const ::elasticjob_service::ExchangeJobRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::elasticjob_service::ExchangeJobReply>::Create(channel_.get(), cq, rpcmethod_ExchangeJob_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::elasticjob_service::ExchangeJobReply>* ElasticJobWorker::Stub::PrepareAsyncExchangeJobRaw(::grpc::ClientContext* context, const ::elasticjob_service::ExchangeJobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::elasticjob_service::ExchangeJobReply>::Create(channel_.get(), cq, rpcmethod_ExchangeJob_, context, request, false, nullptr);
}

ElasticJobWorker::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ElasticJobWorker_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ElasticJobWorker::Service, ::elasticjob_service::RegisterWorkerReqeust, ::elasticjob_service::RegisterWorkerReply>(
          [](ElasticJobWorker::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::elasticjob_service::RegisterWorkerReqeust* req,
             ::elasticjob_service::RegisterWorkerReply* resp) {
               return service->RegisterWorker(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ElasticJobWorker_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ElasticJobWorker::Service, ::elasticjob_service::DeregisterWorkerReqeust, ::elasticjob_service::DeregisterWorkerReply>(
          [](ElasticJobWorker::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::elasticjob_service::DeregisterWorkerReqeust* req,
             ::elasticjob_service::DeregisterWorkerReply* resp) {
               return service->DeregisterWorker(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ElasticJobWorker_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ElasticJobWorker::Service, ::elasticjob_service::SendStatsReqeust, ::elasticjob_service::SendStatsReply>(
          [](ElasticJobWorker::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::elasticjob_service::SendStatsReqeust* req,
             ::elasticjob_service::SendStatsReply* resp) {
               return service->SendStats(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ElasticJobWorker_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ElasticJobWorker::Service, ::elasticjob_service::SendRunningJobsRequest, ::elasticjob_service::SendRunningJobsReply>(
          [](ElasticJobWorker::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::elasticjob_service::SendRunningJobsRequest* req,
             ::elasticjob_service::SendRunningJobsReply* resp) {
               return service->SendRunningJobs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ElasticJobWorker_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ElasticJobWorker::Service, ::elasticjob_service::SendJobResultRequest, ::elasticjob_service::SendJobResultReply>(
          [](ElasticJobWorker::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::elasticjob_service::SendJobResultRequest* req,
             ::elasticjob_service::SendJobResultReply* resp) {
               return service->SendJobResult(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ElasticJobWorker_method_names[5],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ElasticJobWorker::Service, ::elasticjob_service::ExchangeJobRequest, ::elasticjob_service::ExchangeJobReply>(
          [](ElasticJobWorker::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::elasticjob_service::ExchangeJobRequest* req,
             ::grpc_impl::ServerWriter<::elasticjob_service::ExchangeJobReply>* writer) {
               return service->ExchangeJob(ctx, req, writer);
             }, this)));
}

ElasticJobWorker::Service::~Service() {
}

::grpc::Status ElasticJobWorker::Service::RegisterWorker(::grpc::ServerContext* context, const ::elasticjob_service::RegisterWorkerReqeust* request, ::elasticjob_service::RegisterWorkerReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ElasticJobWorker::Service::DeregisterWorker(::grpc::ServerContext* context, const ::elasticjob_service::DeregisterWorkerReqeust* request, ::elasticjob_service::DeregisterWorkerReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ElasticJobWorker::Service::SendStats(::grpc::ServerContext* context, const ::elasticjob_service::SendStatsReqeust* request, ::elasticjob_service::SendStatsReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ElasticJobWorker::Service::SendRunningJobs(::grpc::ServerContext* context, const ::elasticjob_service::SendRunningJobsRequest* request, ::elasticjob_service::SendRunningJobsReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ElasticJobWorker::Service::SendJobResult(::grpc::ServerContext* context, const ::elasticjob_service::SendJobResultRequest* request, ::elasticjob_service::SendJobResultReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ElasticJobWorker::Service::ExchangeJob(::grpc::ServerContext* context, const ::elasticjob_service::ExchangeJobRequest* request, ::grpc::ServerWriter< ::elasticjob_service::ExchangeJobReply>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace elasticjob_service

