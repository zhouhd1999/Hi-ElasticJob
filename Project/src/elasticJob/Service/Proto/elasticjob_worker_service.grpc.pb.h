// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: elasticjob_worker_service.proto
#ifndef GRPC_elasticjob_5fworker_5fservice_2eproto__INCLUDED
#define GRPC_elasticjob_5fworker_5fservice_2eproto__INCLUDED

#include "elasticjob_worker_service.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace elasticjob_service {

class ElasticJobWorker final {
 public:
  static constexpr char const* service_full_name() {
    return "elasticjob_service.ElasticJobWorker";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 
    virtual ::grpc::Status RegisterWorker(::grpc::ClientContext* context, const ::elasticjob_service::RegisterWorkerReqeust& request, ::elasticjob_service::RegisterWorkerReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob_service::RegisterWorkerReply>> AsyncRegisterWorker(::grpc::ClientContext* context, const ::elasticjob_service::RegisterWorkerReqeust& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob_service::RegisterWorkerReply>>(AsyncRegisterWorkerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob_service::RegisterWorkerReply>> PrepareAsyncRegisterWorker(::grpc::ClientContext* context, const ::elasticjob_service::RegisterWorkerReqeust& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob_service::RegisterWorkerReply>>(PrepareAsyncRegisterWorkerRaw(context, request, cq));
    }
    virtual ::grpc::Status DeregisterWorker(::grpc::ClientContext* context, const ::elasticjob_service::DeregisterWorkerReqeust& request, ::elasticjob_service::DeregisterWorkerReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob_service::DeregisterWorkerReply>> AsyncDeregisterWorker(::grpc::ClientContext* context, const ::elasticjob_service::DeregisterWorkerReqeust& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob_service::DeregisterWorkerReply>>(AsyncDeregisterWorkerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob_service::DeregisterWorkerReply>> PrepareAsyncDeregisterWorker(::grpc::ClientContext* context, const ::elasticjob_service::DeregisterWorkerReqeust& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob_service::DeregisterWorkerReply>>(PrepareAsyncDeregisterWorkerRaw(context, request, cq));
    }
    virtual ::grpc::Status SendStats(::grpc::ClientContext* context, const ::elasticjob_service::SendStatsReqeust& request, ::elasticjob_service::SendStatsReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob_service::SendStatsReply>> AsyncSendStats(::grpc::ClientContext* context, const ::elasticjob_service::SendStatsReqeust& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob_service::SendStatsReply>>(AsyncSendStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob_service::SendStatsReply>> PrepareAsyncSendStats(::grpc::ClientContext* context, const ::elasticjob_service::SendStatsReqeust& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob_service::SendStatsReply>>(PrepareAsyncSendStatsRaw(context, request, cq));
    }
    virtual ::grpc::Status SendRunningJobs(::grpc::ClientContext* context, const ::elasticjob_service::SendRunningJobsRequest& request, ::elasticjob_service::SendRunningJobsReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob_service::SendRunningJobsReply>> AsyncSendRunningJobs(::grpc::ClientContext* context, const ::elasticjob_service::SendRunningJobsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob_service::SendRunningJobsReply>>(AsyncSendRunningJobsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob_service::SendRunningJobsReply>> PrepareAsyncSendRunningJobs(::grpc::ClientContext* context, const ::elasticjob_service::SendRunningJobsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob_service::SendRunningJobsReply>>(PrepareAsyncSendRunningJobsRaw(context, request, cq));
    }
    virtual ::grpc::Status SendJobResult(::grpc::ClientContext* context, const ::elasticjob_service::SendJobResultRequest& request, ::elasticjob_service::SendJobResultReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob_service::SendJobResultReply>> AsyncSendJobResult(::grpc::ClientContext* context, const ::elasticjob_service::SendJobResultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob_service::SendJobResultReply>>(AsyncSendJobResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob_service::SendJobResultReply>> PrepareAsyncSendJobResult(::grpc::ClientContext* context, const ::elasticjob_service::SendJobResultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob_service::SendJobResultReply>>(PrepareAsyncSendJobResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::elasticjob_service::ExchangeJobReply>> ExchangeJob(::grpc::ClientContext* context, const ::elasticjob_service::ExchangeJobRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::elasticjob_service::ExchangeJobReply>>(ExchangeJobRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::elasticjob_service::ExchangeJobReply>> AsyncExchangeJob(::grpc::ClientContext* context, const ::elasticjob_service::ExchangeJobRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::elasticjob_service::ExchangeJobReply>>(AsyncExchangeJobRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::elasticjob_service::ExchangeJobReply>> PrepareAsyncExchangeJob(::grpc::ClientContext* context, const ::elasticjob_service::ExchangeJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::elasticjob_service::ExchangeJobReply>>(PrepareAsyncExchangeJobRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // 
      virtual void RegisterWorker(::grpc::ClientContext* context, const ::elasticjob_service::RegisterWorkerReqeust* request, ::elasticjob_service::RegisterWorkerReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterWorker(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::RegisterWorkerReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RegisterWorker(::grpc::ClientContext* context, const ::elasticjob_service::RegisterWorkerReqeust* request, ::elasticjob_service::RegisterWorkerReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RegisterWorker(::grpc::ClientContext* context, const ::elasticjob_service::RegisterWorkerReqeust* request, ::elasticjob_service::RegisterWorkerReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RegisterWorker(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::RegisterWorkerReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RegisterWorker(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::RegisterWorkerReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DeregisterWorker(::grpc::ClientContext* context, const ::elasticjob_service::DeregisterWorkerReqeust* request, ::elasticjob_service::DeregisterWorkerReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeregisterWorker(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::DeregisterWorkerReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeregisterWorker(::grpc::ClientContext* context, const ::elasticjob_service::DeregisterWorkerReqeust* request, ::elasticjob_service::DeregisterWorkerReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeregisterWorker(::grpc::ClientContext* context, const ::elasticjob_service::DeregisterWorkerReqeust* request, ::elasticjob_service::DeregisterWorkerReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeregisterWorker(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::DeregisterWorkerReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeregisterWorker(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::DeregisterWorkerReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SendStats(::grpc::ClientContext* context, const ::elasticjob_service::SendStatsReqeust* request, ::elasticjob_service::SendStatsReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendStats(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::SendStatsReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendStats(::grpc::ClientContext* context, const ::elasticjob_service::SendStatsReqeust* request, ::elasticjob_service::SendStatsReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SendStats(::grpc::ClientContext* context, const ::elasticjob_service::SendStatsReqeust* request, ::elasticjob_service::SendStatsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendStats(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::SendStatsReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SendStats(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::SendStatsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SendRunningJobs(::grpc::ClientContext* context, const ::elasticjob_service::SendRunningJobsRequest* request, ::elasticjob_service::SendRunningJobsReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendRunningJobs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::SendRunningJobsReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendRunningJobs(::grpc::ClientContext* context, const ::elasticjob_service::SendRunningJobsRequest* request, ::elasticjob_service::SendRunningJobsReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SendRunningJobs(::grpc::ClientContext* context, const ::elasticjob_service::SendRunningJobsRequest* request, ::elasticjob_service::SendRunningJobsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendRunningJobs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::SendRunningJobsReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SendRunningJobs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::SendRunningJobsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SendJobResult(::grpc::ClientContext* context, const ::elasticjob_service::SendJobResultRequest* request, ::elasticjob_service::SendJobResultReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendJobResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::SendJobResultReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendJobResult(::grpc::ClientContext* context, const ::elasticjob_service::SendJobResultRequest* request, ::elasticjob_service::SendJobResultReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SendJobResult(::grpc::ClientContext* context, const ::elasticjob_service::SendJobResultRequest* request, ::elasticjob_service::SendJobResultReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendJobResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::SendJobResultReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SendJobResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::SendJobResultReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ExchangeJob(::grpc::ClientContext* context, ::elasticjob_service::ExchangeJobRequest* request, ::grpc::ClientReadReactor< ::elasticjob_service::ExchangeJobReply>* reactor) = 0;
      #else
      virtual void ExchangeJob(::grpc::ClientContext* context, ::elasticjob_service::ExchangeJobRequest* request, ::grpc::experimental::ClientReadReactor< ::elasticjob_service::ExchangeJobReply>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob_service::RegisterWorkerReply>* AsyncRegisterWorkerRaw(::grpc::ClientContext* context, const ::elasticjob_service::RegisterWorkerReqeust& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob_service::RegisterWorkerReply>* PrepareAsyncRegisterWorkerRaw(::grpc::ClientContext* context, const ::elasticjob_service::RegisterWorkerReqeust& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob_service::DeregisterWorkerReply>* AsyncDeregisterWorkerRaw(::grpc::ClientContext* context, const ::elasticjob_service::DeregisterWorkerReqeust& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob_service::DeregisterWorkerReply>* PrepareAsyncDeregisterWorkerRaw(::grpc::ClientContext* context, const ::elasticjob_service::DeregisterWorkerReqeust& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob_service::SendStatsReply>* AsyncSendStatsRaw(::grpc::ClientContext* context, const ::elasticjob_service::SendStatsReqeust& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob_service::SendStatsReply>* PrepareAsyncSendStatsRaw(::grpc::ClientContext* context, const ::elasticjob_service::SendStatsReqeust& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob_service::SendRunningJobsReply>* AsyncSendRunningJobsRaw(::grpc::ClientContext* context, const ::elasticjob_service::SendRunningJobsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob_service::SendRunningJobsReply>* PrepareAsyncSendRunningJobsRaw(::grpc::ClientContext* context, const ::elasticjob_service::SendRunningJobsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob_service::SendJobResultReply>* AsyncSendJobResultRaw(::grpc::ClientContext* context, const ::elasticjob_service::SendJobResultRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob_service::SendJobResultReply>* PrepareAsyncSendJobResultRaw(::grpc::ClientContext* context, const ::elasticjob_service::SendJobResultRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::elasticjob_service::ExchangeJobReply>* ExchangeJobRaw(::grpc::ClientContext* context, const ::elasticjob_service::ExchangeJobRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::elasticjob_service::ExchangeJobReply>* AsyncExchangeJobRaw(::grpc::ClientContext* context, const ::elasticjob_service::ExchangeJobRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::elasticjob_service::ExchangeJobReply>* PrepareAsyncExchangeJobRaw(::grpc::ClientContext* context, const ::elasticjob_service::ExchangeJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status RegisterWorker(::grpc::ClientContext* context, const ::elasticjob_service::RegisterWorkerReqeust& request, ::elasticjob_service::RegisterWorkerReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elasticjob_service::RegisterWorkerReply>> AsyncRegisterWorker(::grpc::ClientContext* context, const ::elasticjob_service::RegisterWorkerReqeust& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elasticjob_service::RegisterWorkerReply>>(AsyncRegisterWorkerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elasticjob_service::RegisterWorkerReply>> PrepareAsyncRegisterWorker(::grpc::ClientContext* context, const ::elasticjob_service::RegisterWorkerReqeust& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elasticjob_service::RegisterWorkerReply>>(PrepareAsyncRegisterWorkerRaw(context, request, cq));
    }
    ::grpc::Status DeregisterWorker(::grpc::ClientContext* context, const ::elasticjob_service::DeregisterWorkerReqeust& request, ::elasticjob_service::DeregisterWorkerReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elasticjob_service::DeregisterWorkerReply>> AsyncDeregisterWorker(::grpc::ClientContext* context, const ::elasticjob_service::DeregisterWorkerReqeust& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elasticjob_service::DeregisterWorkerReply>>(AsyncDeregisterWorkerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elasticjob_service::DeregisterWorkerReply>> PrepareAsyncDeregisterWorker(::grpc::ClientContext* context, const ::elasticjob_service::DeregisterWorkerReqeust& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elasticjob_service::DeregisterWorkerReply>>(PrepareAsyncDeregisterWorkerRaw(context, request, cq));
    }
    ::grpc::Status SendStats(::grpc::ClientContext* context, const ::elasticjob_service::SendStatsReqeust& request, ::elasticjob_service::SendStatsReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elasticjob_service::SendStatsReply>> AsyncSendStats(::grpc::ClientContext* context, const ::elasticjob_service::SendStatsReqeust& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elasticjob_service::SendStatsReply>>(AsyncSendStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elasticjob_service::SendStatsReply>> PrepareAsyncSendStats(::grpc::ClientContext* context, const ::elasticjob_service::SendStatsReqeust& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elasticjob_service::SendStatsReply>>(PrepareAsyncSendStatsRaw(context, request, cq));
    }
    ::grpc::Status SendRunningJobs(::grpc::ClientContext* context, const ::elasticjob_service::SendRunningJobsRequest& request, ::elasticjob_service::SendRunningJobsReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elasticjob_service::SendRunningJobsReply>> AsyncSendRunningJobs(::grpc::ClientContext* context, const ::elasticjob_service::SendRunningJobsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elasticjob_service::SendRunningJobsReply>>(AsyncSendRunningJobsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elasticjob_service::SendRunningJobsReply>> PrepareAsyncSendRunningJobs(::grpc::ClientContext* context, const ::elasticjob_service::SendRunningJobsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elasticjob_service::SendRunningJobsReply>>(PrepareAsyncSendRunningJobsRaw(context, request, cq));
    }
    ::grpc::Status SendJobResult(::grpc::ClientContext* context, const ::elasticjob_service::SendJobResultRequest& request, ::elasticjob_service::SendJobResultReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elasticjob_service::SendJobResultReply>> AsyncSendJobResult(::grpc::ClientContext* context, const ::elasticjob_service::SendJobResultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elasticjob_service::SendJobResultReply>>(AsyncSendJobResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elasticjob_service::SendJobResultReply>> PrepareAsyncSendJobResult(::grpc::ClientContext* context, const ::elasticjob_service::SendJobResultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elasticjob_service::SendJobResultReply>>(PrepareAsyncSendJobResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::elasticjob_service::ExchangeJobReply>> ExchangeJob(::grpc::ClientContext* context, const ::elasticjob_service::ExchangeJobRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::elasticjob_service::ExchangeJobReply>>(ExchangeJobRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::elasticjob_service::ExchangeJobReply>> AsyncExchangeJob(::grpc::ClientContext* context, const ::elasticjob_service::ExchangeJobRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::elasticjob_service::ExchangeJobReply>>(AsyncExchangeJobRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::elasticjob_service::ExchangeJobReply>> PrepareAsyncExchangeJob(::grpc::ClientContext* context, const ::elasticjob_service::ExchangeJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::elasticjob_service::ExchangeJobReply>>(PrepareAsyncExchangeJobRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void RegisterWorker(::grpc::ClientContext* context, const ::elasticjob_service::RegisterWorkerReqeust* request, ::elasticjob_service::RegisterWorkerReply* response, std::function<void(::grpc::Status)>) override;
      void RegisterWorker(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::RegisterWorkerReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RegisterWorker(::grpc::ClientContext* context, const ::elasticjob_service::RegisterWorkerReqeust* request, ::elasticjob_service::RegisterWorkerReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RegisterWorker(::grpc::ClientContext* context, const ::elasticjob_service::RegisterWorkerReqeust* request, ::elasticjob_service::RegisterWorkerReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RegisterWorker(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::RegisterWorkerReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RegisterWorker(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::RegisterWorkerReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeregisterWorker(::grpc::ClientContext* context, const ::elasticjob_service::DeregisterWorkerReqeust* request, ::elasticjob_service::DeregisterWorkerReply* response, std::function<void(::grpc::Status)>) override;
      void DeregisterWorker(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::DeregisterWorkerReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeregisterWorker(::grpc::ClientContext* context, const ::elasticjob_service::DeregisterWorkerReqeust* request, ::elasticjob_service::DeregisterWorkerReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeregisterWorker(::grpc::ClientContext* context, const ::elasticjob_service::DeregisterWorkerReqeust* request, ::elasticjob_service::DeregisterWorkerReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeregisterWorker(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::DeregisterWorkerReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeregisterWorker(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::DeregisterWorkerReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SendStats(::grpc::ClientContext* context, const ::elasticjob_service::SendStatsReqeust* request, ::elasticjob_service::SendStatsReply* response, std::function<void(::grpc::Status)>) override;
      void SendStats(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::SendStatsReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendStats(::grpc::ClientContext* context, const ::elasticjob_service::SendStatsReqeust* request, ::elasticjob_service::SendStatsReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SendStats(::grpc::ClientContext* context, const ::elasticjob_service::SendStatsReqeust* request, ::elasticjob_service::SendStatsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendStats(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::SendStatsReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SendStats(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::SendStatsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SendRunningJobs(::grpc::ClientContext* context, const ::elasticjob_service::SendRunningJobsRequest* request, ::elasticjob_service::SendRunningJobsReply* response, std::function<void(::grpc::Status)>) override;
      void SendRunningJobs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::SendRunningJobsReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendRunningJobs(::grpc::ClientContext* context, const ::elasticjob_service::SendRunningJobsRequest* request, ::elasticjob_service::SendRunningJobsReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SendRunningJobs(::grpc::ClientContext* context, const ::elasticjob_service::SendRunningJobsRequest* request, ::elasticjob_service::SendRunningJobsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendRunningJobs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::SendRunningJobsReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SendRunningJobs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::SendRunningJobsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SendJobResult(::grpc::ClientContext* context, const ::elasticjob_service::SendJobResultRequest* request, ::elasticjob_service::SendJobResultReply* response, std::function<void(::grpc::Status)>) override;
      void SendJobResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::SendJobResultReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendJobResult(::grpc::ClientContext* context, const ::elasticjob_service::SendJobResultRequest* request, ::elasticjob_service::SendJobResultReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SendJobResult(::grpc::ClientContext* context, const ::elasticjob_service::SendJobResultRequest* request, ::elasticjob_service::SendJobResultReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendJobResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::SendJobResultReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SendJobResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob_service::SendJobResultReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ExchangeJob(::grpc::ClientContext* context, ::elasticjob_service::ExchangeJobRequest* request, ::grpc::ClientReadReactor< ::elasticjob_service::ExchangeJobReply>* reactor) override;
      #else
      void ExchangeJob(::grpc::ClientContext* context, ::elasticjob_service::ExchangeJobRequest* request, ::grpc::experimental::ClientReadReactor< ::elasticjob_service::ExchangeJobReply>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::elasticjob_service::RegisterWorkerReply>* AsyncRegisterWorkerRaw(::grpc::ClientContext* context, const ::elasticjob_service::RegisterWorkerReqeust& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::elasticjob_service::RegisterWorkerReply>* PrepareAsyncRegisterWorkerRaw(::grpc::ClientContext* context, const ::elasticjob_service::RegisterWorkerReqeust& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::elasticjob_service::DeregisterWorkerReply>* AsyncDeregisterWorkerRaw(::grpc::ClientContext* context, const ::elasticjob_service::DeregisterWorkerReqeust& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::elasticjob_service::DeregisterWorkerReply>* PrepareAsyncDeregisterWorkerRaw(::grpc::ClientContext* context, const ::elasticjob_service::DeregisterWorkerReqeust& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::elasticjob_service::SendStatsReply>* AsyncSendStatsRaw(::grpc::ClientContext* context, const ::elasticjob_service::SendStatsReqeust& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::elasticjob_service::SendStatsReply>* PrepareAsyncSendStatsRaw(::grpc::ClientContext* context, const ::elasticjob_service::SendStatsReqeust& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::elasticjob_service::SendRunningJobsReply>* AsyncSendRunningJobsRaw(::grpc::ClientContext* context, const ::elasticjob_service::SendRunningJobsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::elasticjob_service::SendRunningJobsReply>* PrepareAsyncSendRunningJobsRaw(::grpc::ClientContext* context, const ::elasticjob_service::SendRunningJobsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::elasticjob_service::SendJobResultReply>* AsyncSendJobResultRaw(::grpc::ClientContext* context, const ::elasticjob_service::SendJobResultRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::elasticjob_service::SendJobResultReply>* PrepareAsyncSendJobResultRaw(::grpc::ClientContext* context, const ::elasticjob_service::SendJobResultRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::elasticjob_service::ExchangeJobReply>* ExchangeJobRaw(::grpc::ClientContext* context, const ::elasticjob_service::ExchangeJobRequest& request) override;
    ::grpc::ClientAsyncReader< ::elasticjob_service::ExchangeJobReply>* AsyncExchangeJobRaw(::grpc::ClientContext* context, const ::elasticjob_service::ExchangeJobRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::elasticjob_service::ExchangeJobReply>* PrepareAsyncExchangeJobRaw(::grpc::ClientContext* context, const ::elasticjob_service::ExchangeJobRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterWorker_;
    const ::grpc::internal::RpcMethod rpcmethod_DeregisterWorker_;
    const ::grpc::internal::RpcMethod rpcmethod_SendStats_;
    const ::grpc::internal::RpcMethod rpcmethod_SendRunningJobs_;
    const ::grpc::internal::RpcMethod rpcmethod_SendJobResult_;
    const ::grpc::internal::RpcMethod rpcmethod_ExchangeJob_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 
    virtual ::grpc::Status RegisterWorker(::grpc::ServerContext* context, const ::elasticjob_service::RegisterWorkerReqeust* request, ::elasticjob_service::RegisterWorkerReply* response);
    virtual ::grpc::Status DeregisterWorker(::grpc::ServerContext* context, const ::elasticjob_service::DeregisterWorkerReqeust* request, ::elasticjob_service::DeregisterWorkerReply* response);
    virtual ::grpc::Status SendStats(::grpc::ServerContext* context, const ::elasticjob_service::SendStatsReqeust* request, ::elasticjob_service::SendStatsReply* response);
    virtual ::grpc::Status SendRunningJobs(::grpc::ServerContext* context, const ::elasticjob_service::SendRunningJobsRequest* request, ::elasticjob_service::SendRunningJobsReply* response);
    virtual ::grpc::Status SendJobResult(::grpc::ServerContext* context, const ::elasticjob_service::SendJobResultRequest* request, ::elasticjob_service::SendJobResultReply* response);
    virtual ::grpc::Status ExchangeJob(::grpc::ServerContext* context, const ::elasticjob_service::ExchangeJobRequest* request, ::grpc::ServerWriter< ::elasticjob_service::ExchangeJobReply>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterWorker() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RegisterWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterWorker(::grpc::ServerContext* /*context*/, const ::elasticjob_service::RegisterWorkerReqeust* /*request*/, ::elasticjob_service::RegisterWorkerReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterWorker(::grpc::ServerContext* context, ::elasticjob_service::RegisterWorkerReqeust* request, ::grpc::ServerAsyncResponseWriter< ::elasticjob_service::RegisterWorkerReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeregisterWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeregisterWorker() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DeregisterWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeregisterWorker(::grpc::ServerContext* /*context*/, const ::elasticjob_service::DeregisterWorkerReqeust* /*request*/, ::elasticjob_service::DeregisterWorkerReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeregisterWorker(::grpc::ServerContext* context, ::elasticjob_service::DeregisterWorkerReqeust* request, ::grpc::ServerAsyncResponseWriter< ::elasticjob_service::DeregisterWorkerReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendStats() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SendStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendStats(::grpc::ServerContext* /*context*/, const ::elasticjob_service::SendStatsReqeust* /*request*/, ::elasticjob_service::SendStatsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendStats(::grpc::ServerContext* context, ::elasticjob_service::SendStatsReqeust* request, ::grpc::ServerAsyncResponseWriter< ::elasticjob_service::SendStatsReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendRunningJobs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendRunningJobs() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SendRunningJobs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendRunningJobs(::grpc::ServerContext* /*context*/, const ::elasticjob_service::SendRunningJobsRequest* /*request*/, ::elasticjob_service::SendRunningJobsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendRunningJobs(::grpc::ServerContext* context, ::elasticjob_service::SendRunningJobsRequest* request, ::grpc::ServerAsyncResponseWriter< ::elasticjob_service::SendRunningJobsReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendJobResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendJobResult() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SendJobResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendJobResult(::grpc::ServerContext* /*context*/, const ::elasticjob_service::SendJobResultRequest* /*request*/, ::elasticjob_service::SendJobResultReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendJobResult(::grpc::ServerContext* context, ::elasticjob_service::SendJobResultRequest* request, ::grpc::ServerAsyncResponseWriter< ::elasticjob_service::SendJobResultReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExchangeJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExchangeJob() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ExchangeJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeJob(::grpc::ServerContext* /*context*/, const ::elasticjob_service::ExchangeJobRequest* /*request*/, ::grpc::ServerWriter< ::elasticjob_service::ExchangeJobReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExchangeJob(::grpc::ServerContext* context, ::elasticjob_service::ExchangeJobRequest* request, ::grpc::ServerAsyncWriter< ::elasticjob_service::ExchangeJobReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RegisterWorker<WithAsyncMethod_DeregisterWorker<WithAsyncMethod_SendStats<WithAsyncMethod_SendRunningJobs<WithAsyncMethod_SendJobResult<WithAsyncMethod_ExchangeJob<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RegisterWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RegisterWorker() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::elasticjob_service::RegisterWorkerReqeust, ::elasticjob_service::RegisterWorkerReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::elasticjob_service::RegisterWorkerReqeust* request, ::elasticjob_service::RegisterWorkerReply* response) { return this->RegisterWorker(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterWorker(
        ::grpc::experimental::MessageAllocator< ::elasticjob_service::RegisterWorkerReqeust, ::elasticjob_service::RegisterWorkerReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::elasticjob_service::RegisterWorkerReqeust, ::elasticjob_service::RegisterWorkerReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RegisterWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterWorker(::grpc::ServerContext* /*context*/, const ::elasticjob_service::RegisterWorkerReqeust* /*request*/, ::elasticjob_service::RegisterWorkerReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterWorker(
      ::grpc::CallbackServerContext* /*context*/, const ::elasticjob_service::RegisterWorkerReqeust* /*request*/, ::elasticjob_service::RegisterWorkerReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterWorker(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::elasticjob_service::RegisterWorkerReqeust* /*request*/, ::elasticjob_service::RegisterWorkerReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeregisterWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeregisterWorker() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::elasticjob_service::DeregisterWorkerReqeust, ::elasticjob_service::DeregisterWorkerReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::elasticjob_service::DeregisterWorkerReqeust* request, ::elasticjob_service::DeregisterWorkerReply* response) { return this->DeregisterWorker(context, request, response); }));}
    void SetMessageAllocatorFor_DeregisterWorker(
        ::grpc::experimental::MessageAllocator< ::elasticjob_service::DeregisterWorkerReqeust, ::elasticjob_service::DeregisterWorkerReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::elasticjob_service::DeregisterWorkerReqeust, ::elasticjob_service::DeregisterWorkerReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeregisterWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeregisterWorker(::grpc::ServerContext* /*context*/, const ::elasticjob_service::DeregisterWorkerReqeust* /*request*/, ::elasticjob_service::DeregisterWorkerReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeregisterWorker(
      ::grpc::CallbackServerContext* /*context*/, const ::elasticjob_service::DeregisterWorkerReqeust* /*request*/, ::elasticjob_service::DeregisterWorkerReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeregisterWorker(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::elasticjob_service::DeregisterWorkerReqeust* /*request*/, ::elasticjob_service::DeregisterWorkerReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SendStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SendStats() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::elasticjob_service::SendStatsReqeust, ::elasticjob_service::SendStatsReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::elasticjob_service::SendStatsReqeust* request, ::elasticjob_service::SendStatsReply* response) { return this->SendStats(context, request, response); }));}
    void SetMessageAllocatorFor_SendStats(
        ::grpc::experimental::MessageAllocator< ::elasticjob_service::SendStatsReqeust, ::elasticjob_service::SendStatsReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::elasticjob_service::SendStatsReqeust, ::elasticjob_service::SendStatsReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SendStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendStats(::grpc::ServerContext* /*context*/, const ::elasticjob_service::SendStatsReqeust* /*request*/, ::elasticjob_service::SendStatsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendStats(
      ::grpc::CallbackServerContext* /*context*/, const ::elasticjob_service::SendStatsReqeust* /*request*/, ::elasticjob_service::SendStatsReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendStats(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::elasticjob_service::SendStatsReqeust* /*request*/, ::elasticjob_service::SendStatsReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SendRunningJobs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SendRunningJobs() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::elasticjob_service::SendRunningJobsRequest, ::elasticjob_service::SendRunningJobsReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::elasticjob_service::SendRunningJobsRequest* request, ::elasticjob_service::SendRunningJobsReply* response) { return this->SendRunningJobs(context, request, response); }));}
    void SetMessageAllocatorFor_SendRunningJobs(
        ::grpc::experimental::MessageAllocator< ::elasticjob_service::SendRunningJobsRequest, ::elasticjob_service::SendRunningJobsReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::elasticjob_service::SendRunningJobsRequest, ::elasticjob_service::SendRunningJobsReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SendRunningJobs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendRunningJobs(::grpc::ServerContext* /*context*/, const ::elasticjob_service::SendRunningJobsRequest* /*request*/, ::elasticjob_service::SendRunningJobsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendRunningJobs(
      ::grpc::CallbackServerContext* /*context*/, const ::elasticjob_service::SendRunningJobsRequest* /*request*/, ::elasticjob_service::SendRunningJobsReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendRunningJobs(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::elasticjob_service::SendRunningJobsRequest* /*request*/, ::elasticjob_service::SendRunningJobsReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SendJobResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SendJobResult() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::elasticjob_service::SendJobResultRequest, ::elasticjob_service::SendJobResultReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::elasticjob_service::SendJobResultRequest* request, ::elasticjob_service::SendJobResultReply* response) { return this->SendJobResult(context, request, response); }));}
    void SetMessageAllocatorFor_SendJobResult(
        ::grpc::experimental::MessageAllocator< ::elasticjob_service::SendJobResultRequest, ::elasticjob_service::SendJobResultReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::elasticjob_service::SendJobResultRequest, ::elasticjob_service::SendJobResultReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SendJobResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendJobResult(::grpc::ServerContext* /*context*/, const ::elasticjob_service::SendJobResultRequest* /*request*/, ::elasticjob_service::SendJobResultReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendJobResult(
      ::grpc::CallbackServerContext* /*context*/, const ::elasticjob_service::SendJobResultRequest* /*request*/, ::elasticjob_service::SendJobResultReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendJobResult(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::elasticjob_service::SendJobResultRequest* /*request*/, ::elasticjob_service::SendJobResultReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ExchangeJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ExchangeJob() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::elasticjob_service::ExchangeJobRequest, ::elasticjob_service::ExchangeJobReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::elasticjob_service::ExchangeJobRequest* request) { return this->ExchangeJob(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_ExchangeJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeJob(::grpc::ServerContext* /*context*/, const ::elasticjob_service::ExchangeJobRequest* /*request*/, ::grpc::ServerWriter< ::elasticjob_service::ExchangeJobReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::elasticjob_service::ExchangeJobReply>* ExchangeJob(
      ::grpc::CallbackServerContext* /*context*/, const ::elasticjob_service::ExchangeJobRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::elasticjob_service::ExchangeJobReply>* ExchangeJob(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::elasticjob_service::ExchangeJobRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_RegisterWorker<ExperimentalWithCallbackMethod_DeregisterWorker<ExperimentalWithCallbackMethod_SendStats<ExperimentalWithCallbackMethod_SendRunningJobs<ExperimentalWithCallbackMethod_SendJobResult<ExperimentalWithCallbackMethod_ExchangeJob<Service > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_RegisterWorker<ExperimentalWithCallbackMethod_DeregisterWorker<ExperimentalWithCallbackMethod_SendStats<ExperimentalWithCallbackMethod_SendRunningJobs<ExperimentalWithCallbackMethod_SendJobResult<ExperimentalWithCallbackMethod_ExchangeJob<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RegisterWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterWorker() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RegisterWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterWorker(::grpc::ServerContext* /*context*/, const ::elasticjob_service::RegisterWorkerReqeust* /*request*/, ::elasticjob_service::RegisterWorkerReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeregisterWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeregisterWorker() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DeregisterWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeregisterWorker(::grpc::ServerContext* /*context*/, const ::elasticjob_service::DeregisterWorkerReqeust* /*request*/, ::elasticjob_service::DeregisterWorkerReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendStats() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SendStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendStats(::grpc::ServerContext* /*context*/, const ::elasticjob_service::SendStatsReqeust* /*request*/, ::elasticjob_service::SendStatsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendRunningJobs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendRunningJobs() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SendRunningJobs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendRunningJobs(::grpc::ServerContext* /*context*/, const ::elasticjob_service::SendRunningJobsRequest* /*request*/, ::elasticjob_service::SendRunningJobsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendJobResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendJobResult() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SendJobResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendJobResult(::grpc::ServerContext* /*context*/, const ::elasticjob_service::SendJobResultRequest* /*request*/, ::elasticjob_service::SendJobResultReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExchangeJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExchangeJob() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ExchangeJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeJob(::grpc::ServerContext* /*context*/, const ::elasticjob_service::ExchangeJobRequest* /*request*/, ::grpc::ServerWriter< ::elasticjob_service::ExchangeJobReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterWorker() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RegisterWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterWorker(::grpc::ServerContext* /*context*/, const ::elasticjob_service::RegisterWorkerReqeust* /*request*/, ::elasticjob_service::RegisterWorkerReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterWorker(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeregisterWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeregisterWorker() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DeregisterWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeregisterWorker(::grpc::ServerContext* /*context*/, const ::elasticjob_service::DeregisterWorkerReqeust* /*request*/, ::elasticjob_service::DeregisterWorkerReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeregisterWorker(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendStats() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SendStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendStats(::grpc::ServerContext* /*context*/, const ::elasticjob_service::SendStatsReqeust* /*request*/, ::elasticjob_service::SendStatsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendStats(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendRunningJobs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendRunningJobs() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SendRunningJobs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendRunningJobs(::grpc::ServerContext* /*context*/, const ::elasticjob_service::SendRunningJobsRequest* /*request*/, ::elasticjob_service::SendRunningJobsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendRunningJobs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendJobResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendJobResult() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SendJobResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendJobResult(::grpc::ServerContext* /*context*/, const ::elasticjob_service::SendJobResultRequest* /*request*/, ::elasticjob_service::SendJobResultReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendJobResult(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExchangeJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExchangeJob() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ExchangeJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeJob(::grpc::ServerContext* /*context*/, const ::elasticjob_service::ExchangeJobRequest* /*request*/, ::grpc::ServerWriter< ::elasticjob_service::ExchangeJobReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExchangeJob(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RegisterWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RegisterWorker() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterWorker(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RegisterWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterWorker(::grpc::ServerContext* /*context*/, const ::elasticjob_service::RegisterWorkerReqeust* /*request*/, ::elasticjob_service::RegisterWorkerReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterWorker(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterWorker(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeregisterWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeregisterWorker() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeregisterWorker(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeregisterWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeregisterWorker(::grpc::ServerContext* /*context*/, const ::elasticjob_service::DeregisterWorkerReqeust* /*request*/, ::elasticjob_service::DeregisterWorkerReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeregisterWorker(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeregisterWorker(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SendStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SendStats() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendStats(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SendStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendStats(::grpc::ServerContext* /*context*/, const ::elasticjob_service::SendStatsReqeust* /*request*/, ::elasticjob_service::SendStatsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendStats(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendStats(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SendRunningJobs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SendRunningJobs() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendRunningJobs(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SendRunningJobs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendRunningJobs(::grpc::ServerContext* /*context*/, const ::elasticjob_service::SendRunningJobsRequest* /*request*/, ::elasticjob_service::SendRunningJobsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendRunningJobs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendRunningJobs(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SendJobResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SendJobResult() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendJobResult(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SendJobResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendJobResult(::grpc::ServerContext* /*context*/, const ::elasticjob_service::SendJobResultRequest* /*request*/, ::elasticjob_service::SendJobResultReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendJobResult(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendJobResult(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ExchangeJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ExchangeJob() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->ExchangeJob(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_ExchangeJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeJob(::grpc::ServerContext* /*context*/, const ::elasticjob_service::ExchangeJobRequest* /*request*/, ::grpc::ServerWriter< ::elasticjob_service::ExchangeJobReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ExchangeJob(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* ExchangeJob(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterWorker() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::elasticjob_service::RegisterWorkerReqeust, ::elasticjob_service::RegisterWorkerReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::elasticjob_service::RegisterWorkerReqeust, ::elasticjob_service::RegisterWorkerReply>* streamer) {
                       return this->StreamedRegisterWorker(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterWorker(::grpc::ServerContext* /*context*/, const ::elasticjob_service::RegisterWorkerReqeust* /*request*/, ::elasticjob_service::RegisterWorkerReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterWorker(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::elasticjob_service::RegisterWorkerReqeust,::elasticjob_service::RegisterWorkerReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeregisterWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeregisterWorker() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::elasticjob_service::DeregisterWorkerReqeust, ::elasticjob_service::DeregisterWorkerReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::elasticjob_service::DeregisterWorkerReqeust, ::elasticjob_service::DeregisterWorkerReply>* streamer) {
                       return this->StreamedDeregisterWorker(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeregisterWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeregisterWorker(::grpc::ServerContext* /*context*/, const ::elasticjob_service::DeregisterWorkerReqeust* /*request*/, ::elasticjob_service::DeregisterWorkerReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeregisterWorker(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::elasticjob_service::DeregisterWorkerReqeust,::elasticjob_service::DeregisterWorkerReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendStats() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::elasticjob_service::SendStatsReqeust, ::elasticjob_service::SendStatsReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::elasticjob_service::SendStatsReqeust, ::elasticjob_service::SendStatsReply>* streamer) {
                       return this->StreamedSendStats(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendStats(::grpc::ServerContext* /*context*/, const ::elasticjob_service::SendStatsReqeust* /*request*/, ::elasticjob_service::SendStatsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendStats(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::elasticjob_service::SendStatsReqeust,::elasticjob_service::SendStatsReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendRunningJobs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendRunningJobs() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::elasticjob_service::SendRunningJobsRequest, ::elasticjob_service::SendRunningJobsReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::elasticjob_service::SendRunningJobsRequest, ::elasticjob_service::SendRunningJobsReply>* streamer) {
                       return this->StreamedSendRunningJobs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendRunningJobs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendRunningJobs(::grpc::ServerContext* /*context*/, const ::elasticjob_service::SendRunningJobsRequest* /*request*/, ::elasticjob_service::SendRunningJobsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendRunningJobs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::elasticjob_service::SendRunningJobsRequest,::elasticjob_service::SendRunningJobsReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendJobResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendJobResult() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::elasticjob_service::SendJobResultRequest, ::elasticjob_service::SendJobResultReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::elasticjob_service::SendJobResultRequest, ::elasticjob_service::SendJobResultReply>* streamer) {
                       return this->StreamedSendJobResult(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendJobResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendJobResult(::grpc::ServerContext* /*context*/, const ::elasticjob_service::SendJobResultRequest* /*request*/, ::elasticjob_service::SendJobResultReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendJobResult(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::elasticjob_service::SendJobResultRequest,::elasticjob_service::SendJobResultReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RegisterWorker<WithStreamedUnaryMethod_DeregisterWorker<WithStreamedUnaryMethod_SendStats<WithStreamedUnaryMethod_SendRunningJobs<WithStreamedUnaryMethod_SendJobResult<Service > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ExchangeJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ExchangeJob() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::elasticjob_service::ExchangeJobRequest, ::elasticjob_service::ExchangeJobReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::elasticjob_service::ExchangeJobRequest, ::elasticjob_service::ExchangeJobReply>* streamer) {
                       return this->StreamedExchangeJob(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ExchangeJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExchangeJob(::grpc::ServerContext* /*context*/, const ::elasticjob_service::ExchangeJobRequest* /*request*/, ::grpc::ServerWriter< ::elasticjob_service::ExchangeJobReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedExchangeJob(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::elasticjob_service::ExchangeJobRequest,::elasticjob_service::ExchangeJobReply>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ExchangeJob<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_RegisterWorker<WithStreamedUnaryMethod_DeregisterWorker<WithStreamedUnaryMethod_SendStats<WithStreamedUnaryMethod_SendRunningJobs<WithStreamedUnaryMethod_SendJobResult<WithSplitStreamingMethod_ExchangeJob<Service > > > > > > StreamedService;
};

}  // namespace elasticjob_service


#endif  // GRPC_elasticjob_5fworker_5fservice_2eproto__INCLUDED
