// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: elasticjob_worker_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_elasticjob_5fworker_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_elasticjob_5fworker_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_elasticjob_5fworker_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_elasticjob_5fworker_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_elasticjob_5fworker_5fservice_2eproto;
namespace elasticjob_service {
class AddNewJobReply;
class AddNewJobReplyDefaultTypeInternal;
extern AddNewJobReplyDefaultTypeInternal _AddNewJobReply_default_instance_;
class AddNewJobReuqest;
class AddNewJobReuqestDefaultTypeInternal;
extern AddNewJobReuqestDefaultTypeInternal _AddNewJobReuqest_default_instance_;
class DeregisterWorkerReply;
class DeregisterWorkerReplyDefaultTypeInternal;
extern DeregisterWorkerReplyDefaultTypeInternal _DeregisterWorkerReply_default_instance_;
class DeregisterWorkerReqeust;
class DeregisterWorkerReqeustDefaultTypeInternal;
extern DeregisterWorkerReqeustDefaultTypeInternal _DeregisterWorkerReqeust_default_instance_;
class ErrorCode;
class ErrorCodeDefaultTypeInternal;
extern ErrorCodeDefaultTypeInternal _ErrorCode_default_instance_;
class ExchangeJobReply;
class ExchangeJobReplyDefaultTypeInternal;
extern ExchangeJobReplyDefaultTypeInternal _ExchangeJobReply_default_instance_;
class ExchangeJobRequest;
class ExchangeJobRequestDefaultTypeInternal;
extern ExchangeJobRequestDefaultTypeInternal _ExchangeJobRequest_default_instance_;
class JobResult;
class JobResultDefaultTypeInternal;
extern JobResultDefaultTypeInternal _JobResult_default_instance_;
class JobRunningInfo;
class JobRunningInfoDefaultTypeInternal;
extern JobRunningInfoDefaultTypeInternal _JobRunningInfo_default_instance_;
class RegisterWorkerReply;
class RegisterWorkerReplyDefaultTypeInternal;
extern RegisterWorkerReplyDefaultTypeInternal _RegisterWorkerReply_default_instance_;
class RegisterWorkerReqeust;
class RegisterWorkerReqeustDefaultTypeInternal;
extern RegisterWorkerReqeustDefaultTypeInternal _RegisterWorkerReqeust_default_instance_;
class SendJobResultReply;
class SendJobResultReplyDefaultTypeInternal;
extern SendJobResultReplyDefaultTypeInternal _SendJobResultReply_default_instance_;
class SendJobResultRequest;
class SendJobResultRequestDefaultTypeInternal;
extern SendJobResultRequestDefaultTypeInternal _SendJobResultRequest_default_instance_;
class SendRunningJobsReply;
class SendRunningJobsReplyDefaultTypeInternal;
extern SendRunningJobsReplyDefaultTypeInternal _SendRunningJobsReply_default_instance_;
class SendRunningJobsRequest;
class SendRunningJobsRequestDefaultTypeInternal;
extern SendRunningJobsRequestDefaultTypeInternal _SendRunningJobsRequest_default_instance_;
class SendStatsReply;
class SendStatsReplyDefaultTypeInternal;
extern SendStatsReplyDefaultTypeInternal _SendStatsReply_default_instance_;
class SendStatsReqeust;
class SendStatsReqeustDefaultTypeInternal;
extern SendStatsReqeustDefaultTypeInternal _SendStatsReqeust_default_instance_;
class WorkerAbility;
class WorkerAbilityDefaultTypeInternal;
extern WorkerAbilityDefaultTypeInternal _WorkerAbility_default_instance_;
}  // namespace elasticjob_service
PROTOBUF_NAMESPACE_OPEN
template<> ::elasticjob_service::AddNewJobReply* Arena::CreateMaybeMessage<::elasticjob_service::AddNewJobReply>(Arena*);
template<> ::elasticjob_service::AddNewJobReuqest* Arena::CreateMaybeMessage<::elasticjob_service::AddNewJobReuqest>(Arena*);
template<> ::elasticjob_service::DeregisterWorkerReply* Arena::CreateMaybeMessage<::elasticjob_service::DeregisterWorkerReply>(Arena*);
template<> ::elasticjob_service::DeregisterWorkerReqeust* Arena::CreateMaybeMessage<::elasticjob_service::DeregisterWorkerReqeust>(Arena*);
template<> ::elasticjob_service::ErrorCode* Arena::CreateMaybeMessage<::elasticjob_service::ErrorCode>(Arena*);
template<> ::elasticjob_service::ExchangeJobReply* Arena::CreateMaybeMessage<::elasticjob_service::ExchangeJobReply>(Arena*);
template<> ::elasticjob_service::ExchangeJobRequest* Arena::CreateMaybeMessage<::elasticjob_service::ExchangeJobRequest>(Arena*);
template<> ::elasticjob_service::JobResult* Arena::CreateMaybeMessage<::elasticjob_service::JobResult>(Arena*);
template<> ::elasticjob_service::JobRunningInfo* Arena::CreateMaybeMessage<::elasticjob_service::JobRunningInfo>(Arena*);
template<> ::elasticjob_service::RegisterWorkerReply* Arena::CreateMaybeMessage<::elasticjob_service::RegisterWorkerReply>(Arena*);
template<> ::elasticjob_service::RegisterWorkerReqeust* Arena::CreateMaybeMessage<::elasticjob_service::RegisterWorkerReqeust>(Arena*);
template<> ::elasticjob_service::SendJobResultReply* Arena::CreateMaybeMessage<::elasticjob_service::SendJobResultReply>(Arena*);
template<> ::elasticjob_service::SendJobResultRequest* Arena::CreateMaybeMessage<::elasticjob_service::SendJobResultRequest>(Arena*);
template<> ::elasticjob_service::SendRunningJobsReply* Arena::CreateMaybeMessage<::elasticjob_service::SendRunningJobsReply>(Arena*);
template<> ::elasticjob_service::SendRunningJobsRequest* Arena::CreateMaybeMessage<::elasticjob_service::SendRunningJobsRequest>(Arena*);
template<> ::elasticjob_service::SendStatsReply* Arena::CreateMaybeMessage<::elasticjob_service::SendStatsReply>(Arena*);
template<> ::elasticjob_service::SendStatsReqeust* Arena::CreateMaybeMessage<::elasticjob_service::SendStatsReqeust>(Arena*);
template<> ::elasticjob_service::WorkerAbility* Arena::CreateMaybeMessage<::elasticjob_service::WorkerAbility>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace elasticjob_service {

// ===================================================================

class JobRunningInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:elasticjob_service.JobRunningInfo) */ {
 public:
  inline JobRunningInfo() : JobRunningInfo(nullptr) {}
  virtual ~JobRunningInfo();

  JobRunningInfo(const JobRunningInfo& from);
  JobRunningInfo(JobRunningInfo&& from) noexcept
    : JobRunningInfo() {
    *this = ::std::move(from);
  }

  inline JobRunningInfo& operator=(const JobRunningInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobRunningInfo& operator=(JobRunningInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JobRunningInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobRunningInfo* internal_default_instance() {
    return reinterpret_cast<const JobRunningInfo*>(
               &_JobRunningInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(JobRunningInfo& a, JobRunningInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(JobRunningInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobRunningInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JobRunningInfo* New() const final {
    return CreateMaybeMessage<JobRunningInfo>(nullptr);
  }

  JobRunningInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JobRunningInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JobRunningInfo& from);
  void MergeFrom(const JobRunningInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobRunningInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "elasticjob_service.JobRunningInfo";
  }
  protected:
  explicit JobRunningInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elasticjob_5fworker_5fservice_2eproto);
    return ::descriptor_table_elasticjob_5fworker_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kJobIdFieldNumber = 2,
    kNameFieldNumber = 3,
    kCategoryFieldNumber = 4,
    kParamFieldNumber = 5,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string job_id = 2;
  void clear_job_id();
  const std::string& job_id() const;
  void set_job_id(const std::string& value);
  void set_job_id(std::string&& value);
  void set_job_id(const char* value);
  void set_job_id(const char* value, size_t size);
  std::string* mutable_job_id();
  std::string* release_job_id();
  void set_allocated_job_id(std::string* job_id);
  private:
  const std::string& _internal_job_id() const;
  void _internal_set_job_id(const std::string& value);
  std::string* _internal_mutable_job_id();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string category = 4;
  void clear_category();
  const std::string& category() const;
  void set_category(const std::string& value);
  void set_category(std::string&& value);
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  std::string* mutable_category();
  std::string* release_category();
  void set_allocated_category(std::string* category);
  private:
  const std::string& _internal_category() const;
  void _internal_set_category(const std::string& value);
  std::string* _internal_mutable_category();
  public:

  // string param = 5;
  void clear_param();
  const std::string& param() const;
  void set_param(const std::string& value);
  void set_param(std::string&& value);
  void set_param(const char* value);
  void set_param(const char* value, size_t size);
  std::string* mutable_param();
  std::string* release_param();
  void set_allocated_param(std::string* param);
  private:
  const std::string& _internal_param() const;
  void _internal_set_param(const std::string& value);
  std::string* _internal_mutable_param();
  public:

  // @@protoc_insertion_point(class_scope:elasticjob_service.JobRunningInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr job_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_elasticjob_5fworker_5fservice_2eproto;
};
// -------------------------------------------------------------------

class WorkerAbility PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:elasticjob_service.WorkerAbility) */ {
 public:
  inline WorkerAbility() : WorkerAbility(nullptr) {}
  virtual ~WorkerAbility();

  WorkerAbility(const WorkerAbility& from);
  WorkerAbility(WorkerAbility&& from) noexcept
    : WorkerAbility() {
    *this = ::std::move(from);
  }

  inline WorkerAbility& operator=(const WorkerAbility& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkerAbility& operator=(WorkerAbility&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkerAbility& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkerAbility* internal_default_instance() {
    return reinterpret_cast<const WorkerAbility*>(
               &_WorkerAbility_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WorkerAbility& a, WorkerAbility& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkerAbility* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkerAbility* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkerAbility* New() const final {
    return CreateMaybeMessage<WorkerAbility>(nullptr);
  }

  WorkerAbility* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkerAbility>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkerAbility& from);
  void MergeFrom(const WorkerAbility& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkerAbility* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "elasticjob_service.WorkerAbility";
  }
  protected:
  explicit WorkerAbility(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elasticjob_5fworker_5fservice_2eproto);
    return ::descriptor_table_elasticjob_5fworker_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCategoriesFieldNumber = 1,
    kMaxParallelJobFieldNumber = 2,
  };
  // repeated string categories = 1;
  int categories_size() const;
  private:
  int _internal_categories_size() const;
  public:
  void clear_categories();
  const std::string& categories(int index) const;
  std::string* mutable_categories(int index);
  void set_categories(int index, const std::string& value);
  void set_categories(int index, std::string&& value);
  void set_categories(int index, const char* value);
  void set_categories(int index, const char* value, size_t size);
  std::string* add_categories();
  void add_categories(const std::string& value);
  void add_categories(std::string&& value);
  void add_categories(const char* value);
  void add_categories(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& categories() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_categories();
  private:
  const std::string& _internal_categories(int index) const;
  std::string* _internal_add_categories();
  public:

  // int32 max_parallel_job = 2;
  void clear_max_parallel_job();
  ::PROTOBUF_NAMESPACE_ID::int32 max_parallel_job() const;
  void set_max_parallel_job(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_parallel_job() const;
  void _internal_set_max_parallel_job(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:elasticjob_service.WorkerAbility)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> categories_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_parallel_job_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_elasticjob_5fworker_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ErrorCode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:elasticjob_service.ErrorCode) */ {
 public:
  inline ErrorCode() : ErrorCode(nullptr) {}
  virtual ~ErrorCode();

  ErrorCode(const ErrorCode& from);
  ErrorCode(ErrorCode&& from) noexcept
    : ErrorCode() {
    *this = ::std::move(from);
  }

  inline ErrorCode& operator=(const ErrorCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrorCode& operator=(ErrorCode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ErrorCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ErrorCode* internal_default_instance() {
    return reinterpret_cast<const ErrorCode*>(
               &_ErrorCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ErrorCode& a, ErrorCode& b) {
    a.Swap(&b);
  }
  inline void Swap(ErrorCode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErrorCode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ErrorCode* New() const final {
    return CreateMaybeMessage<ErrorCode>(nullptr);
  }

  ErrorCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ErrorCode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ErrorCode& from);
  void MergeFrom(const ErrorCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "elasticjob_service.ErrorCode";
  }
  protected:
  explicit ErrorCode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elasticjob_5fworker_5fservice_2eproto);
    return ::descriptor_table_elasticjob_5fworker_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // string code = 1;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:elasticjob_service.ErrorCode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_elasticjob_5fworker_5fservice_2eproto;
};
// -------------------------------------------------------------------

class JobResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:elasticjob_service.JobResult) */ {
 public:
  inline JobResult() : JobResult(nullptr) {}
  virtual ~JobResult();

  JobResult(const JobResult& from);
  JobResult(JobResult&& from) noexcept
    : JobResult() {
    *this = ::std::move(from);
  }

  inline JobResult& operator=(const JobResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobResult& operator=(JobResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JobResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobResult* internal_default_instance() {
    return reinterpret_cast<const JobResult*>(
               &_JobResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(JobResult& a, JobResult& b) {
    a.Swap(&b);
  }
  inline void Swap(JobResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JobResult* New() const final {
    return CreateMaybeMessage<JobResult>(nullptr);
  }

  JobResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JobResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JobResult& from);
  void MergeFrom(const JobResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "elasticjob_service.JobResult";
  }
  protected:
  explicit JobResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elasticjob_5fworker_5fservice_2eproto);
    return ::descriptor_table_elasticjob_5fworker_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kJobIdFieldNumber = 2,
    kResultFieldNumber = 4,
    kErrCodeFieldNumber = 5,
    kStatusFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string job_id = 2;
  void clear_job_id();
  const std::string& job_id() const;
  void set_job_id(const std::string& value);
  void set_job_id(std::string&& value);
  void set_job_id(const char* value);
  void set_job_id(const char* value, size_t size);
  std::string* mutable_job_id();
  std::string* release_job_id();
  void set_allocated_job_id(std::string* job_id);
  private:
  const std::string& _internal_job_id() const;
  void _internal_set_job_id(const std::string& value);
  std::string* _internal_mutable_job_id();
  public:

  // string result = 4;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // .elasticjob_service.ErrorCode err_code = 5;
  bool has_err_code() const;
  private:
  bool _internal_has_err_code() const;
  public:
  void clear_err_code();
  const ::elasticjob_service::ErrorCode& err_code() const;
  ::elasticjob_service::ErrorCode* release_err_code();
  ::elasticjob_service::ErrorCode* mutable_err_code();
  void set_allocated_err_code(::elasticjob_service::ErrorCode* err_code);
  private:
  const ::elasticjob_service::ErrorCode& _internal_err_code() const;
  ::elasticjob_service::ErrorCode* _internal_mutable_err_code();
  public:
  void unsafe_arena_set_allocated_err_code(
      ::elasticjob_service::ErrorCode* err_code);
  ::elasticjob_service::ErrorCode* unsafe_arena_release_err_code();

  // int32 status = 3;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:elasticjob_service.JobResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr job_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  ::elasticjob_service::ErrorCode* err_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_elasticjob_5fworker_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddNewJobReuqest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:elasticjob_service.AddNewJobReuqest) */ {
 public:
  inline AddNewJobReuqest() : AddNewJobReuqest(nullptr) {}
  virtual ~AddNewJobReuqest();

  AddNewJobReuqest(const AddNewJobReuqest& from);
  AddNewJobReuqest(AddNewJobReuqest&& from) noexcept
    : AddNewJobReuqest() {
    *this = ::std::move(from);
  }

  inline AddNewJobReuqest& operator=(const AddNewJobReuqest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddNewJobReuqest& operator=(AddNewJobReuqest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddNewJobReuqest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddNewJobReuqest* internal_default_instance() {
    return reinterpret_cast<const AddNewJobReuqest*>(
               &_AddNewJobReuqest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AddNewJobReuqest& a, AddNewJobReuqest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddNewJobReuqest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddNewJobReuqest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddNewJobReuqest* New() const final {
    return CreateMaybeMessage<AddNewJobReuqest>(nullptr);
  }

  AddNewJobReuqest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddNewJobReuqest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddNewJobReuqest& from);
  void MergeFrom(const AddNewJobReuqest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddNewJobReuqest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "elasticjob_service.AddNewJobReuqest";
  }
  protected:
  explicit AddNewJobReuqest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elasticjob_5fworker_5fservice_2eproto);
    return ::descriptor_table_elasticjob_5fworker_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRunningInfoFieldNumber = 1,
  };
  // .elasticjob_service.JobRunningInfo running_info = 1;
  bool has_running_info() const;
  private:
  bool _internal_has_running_info() const;
  public:
  void clear_running_info();
  const ::elasticjob_service::JobRunningInfo& running_info() const;
  ::elasticjob_service::JobRunningInfo* release_running_info();
  ::elasticjob_service::JobRunningInfo* mutable_running_info();
  void set_allocated_running_info(::elasticjob_service::JobRunningInfo* running_info);
  private:
  const ::elasticjob_service::JobRunningInfo& _internal_running_info() const;
  ::elasticjob_service::JobRunningInfo* _internal_mutable_running_info();
  public:
  void unsafe_arena_set_allocated_running_info(
      ::elasticjob_service::JobRunningInfo* running_info);
  ::elasticjob_service::JobRunningInfo* unsafe_arena_release_running_info();

  // @@protoc_insertion_point(class_scope:elasticjob_service.AddNewJobReuqest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::elasticjob_service::JobRunningInfo* running_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_elasticjob_5fworker_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddNewJobReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:elasticjob_service.AddNewJobReply) */ {
 public:
  inline AddNewJobReply() : AddNewJobReply(nullptr) {}
  virtual ~AddNewJobReply();

  AddNewJobReply(const AddNewJobReply& from);
  AddNewJobReply(AddNewJobReply&& from) noexcept
    : AddNewJobReply() {
    *this = ::std::move(from);
  }

  inline AddNewJobReply& operator=(const AddNewJobReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddNewJobReply& operator=(AddNewJobReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddNewJobReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddNewJobReply* internal_default_instance() {
    return reinterpret_cast<const AddNewJobReply*>(
               &_AddNewJobReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AddNewJobReply& a, AddNewJobReply& b) {
    a.Swap(&b);
  }
  inline void Swap(AddNewJobReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddNewJobReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddNewJobReply* New() const final {
    return CreateMaybeMessage<AddNewJobReply>(nullptr);
  }

  AddNewJobReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddNewJobReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddNewJobReply& from);
  void MergeFrom(const AddNewJobReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddNewJobReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "elasticjob_service.AddNewJobReply";
  }
  protected:
  explicit AddNewJobReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elasticjob_5fworker_5fservice_2eproto);
    return ::descriptor_table_elasticjob_5fworker_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrCodeFieldNumber = 1,
  };
  // .elasticjob_service.ErrorCode err_code = 1;
  bool has_err_code() const;
  private:
  bool _internal_has_err_code() const;
  public:
  void clear_err_code();
  const ::elasticjob_service::ErrorCode& err_code() const;
  ::elasticjob_service::ErrorCode* release_err_code();
  ::elasticjob_service::ErrorCode* mutable_err_code();
  void set_allocated_err_code(::elasticjob_service::ErrorCode* err_code);
  private:
  const ::elasticjob_service::ErrorCode& _internal_err_code() const;
  ::elasticjob_service::ErrorCode* _internal_mutable_err_code();
  public:
  void unsafe_arena_set_allocated_err_code(
      ::elasticjob_service::ErrorCode* err_code);
  ::elasticjob_service::ErrorCode* unsafe_arena_release_err_code();

  // @@protoc_insertion_point(class_scope:elasticjob_service.AddNewJobReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::elasticjob_service::ErrorCode* err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_elasticjob_5fworker_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RegisterWorkerReqeust PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:elasticjob_service.RegisterWorkerReqeust) */ {
 public:
  inline RegisterWorkerReqeust() : RegisterWorkerReqeust(nullptr) {}
  virtual ~RegisterWorkerReqeust();

  RegisterWorkerReqeust(const RegisterWorkerReqeust& from);
  RegisterWorkerReqeust(RegisterWorkerReqeust&& from) noexcept
    : RegisterWorkerReqeust() {
    *this = ::std::move(from);
  }

  inline RegisterWorkerReqeust& operator=(const RegisterWorkerReqeust& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterWorkerReqeust& operator=(RegisterWorkerReqeust&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterWorkerReqeust& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterWorkerReqeust* internal_default_instance() {
    return reinterpret_cast<const RegisterWorkerReqeust*>(
               &_RegisterWorkerReqeust_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RegisterWorkerReqeust& a, RegisterWorkerReqeust& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterWorkerReqeust* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterWorkerReqeust* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterWorkerReqeust* New() const final {
    return CreateMaybeMessage<RegisterWorkerReqeust>(nullptr);
  }

  RegisterWorkerReqeust* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterWorkerReqeust>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterWorkerReqeust& from);
  void MergeFrom(const RegisterWorkerReqeust& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterWorkerReqeust* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "elasticjob_service.RegisterWorkerReqeust";
  }
  protected:
  explicit RegisterWorkerReqeust(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elasticjob_5fworker_5fservice_2eproto);
    return ::descriptor_table_elasticjob_5fworker_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAbilityFieldNumber = 1,
  };
  // .elasticjob_service.WorkerAbility ability = 1;
  bool has_ability() const;
  private:
  bool _internal_has_ability() const;
  public:
  void clear_ability();
  const ::elasticjob_service::WorkerAbility& ability() const;
  ::elasticjob_service::WorkerAbility* release_ability();
  ::elasticjob_service::WorkerAbility* mutable_ability();
  void set_allocated_ability(::elasticjob_service::WorkerAbility* ability);
  private:
  const ::elasticjob_service::WorkerAbility& _internal_ability() const;
  ::elasticjob_service::WorkerAbility* _internal_mutable_ability();
  public:
  void unsafe_arena_set_allocated_ability(
      ::elasticjob_service::WorkerAbility* ability);
  ::elasticjob_service::WorkerAbility* unsafe_arena_release_ability();

  // @@protoc_insertion_point(class_scope:elasticjob_service.RegisterWorkerReqeust)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::elasticjob_service::WorkerAbility* ability_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_elasticjob_5fworker_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RegisterWorkerReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:elasticjob_service.RegisterWorkerReply) */ {
 public:
  inline RegisterWorkerReply() : RegisterWorkerReply(nullptr) {}
  virtual ~RegisterWorkerReply();

  RegisterWorkerReply(const RegisterWorkerReply& from);
  RegisterWorkerReply(RegisterWorkerReply&& from) noexcept
    : RegisterWorkerReply() {
    *this = ::std::move(from);
  }

  inline RegisterWorkerReply& operator=(const RegisterWorkerReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterWorkerReply& operator=(RegisterWorkerReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterWorkerReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterWorkerReply* internal_default_instance() {
    return reinterpret_cast<const RegisterWorkerReply*>(
               &_RegisterWorkerReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RegisterWorkerReply& a, RegisterWorkerReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterWorkerReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterWorkerReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterWorkerReply* New() const final {
    return CreateMaybeMessage<RegisterWorkerReply>(nullptr);
  }

  RegisterWorkerReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterWorkerReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterWorkerReply& from);
  void MergeFrom(const RegisterWorkerReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterWorkerReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "elasticjob_service.RegisterWorkerReply";
  }
  protected:
  explicit RegisterWorkerReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elasticjob_5fworker_5fservice_2eproto);
    return ::descriptor_table_elasticjob_5fworker_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrCodeFieldNumber = 1,
  };
  // .elasticjob_service.ErrorCode err_code = 1;
  bool has_err_code() const;
  private:
  bool _internal_has_err_code() const;
  public:
  void clear_err_code();
  const ::elasticjob_service::ErrorCode& err_code() const;
  ::elasticjob_service::ErrorCode* release_err_code();
  ::elasticjob_service::ErrorCode* mutable_err_code();
  void set_allocated_err_code(::elasticjob_service::ErrorCode* err_code);
  private:
  const ::elasticjob_service::ErrorCode& _internal_err_code() const;
  ::elasticjob_service::ErrorCode* _internal_mutable_err_code();
  public:
  void unsafe_arena_set_allocated_err_code(
      ::elasticjob_service::ErrorCode* err_code);
  ::elasticjob_service::ErrorCode* unsafe_arena_release_err_code();

  // @@protoc_insertion_point(class_scope:elasticjob_service.RegisterWorkerReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::elasticjob_service::ErrorCode* err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_elasticjob_5fworker_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DeregisterWorkerReqeust PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:elasticjob_service.DeregisterWorkerReqeust) */ {
 public:
  inline DeregisterWorkerReqeust() : DeregisterWorkerReqeust(nullptr) {}
  virtual ~DeregisterWorkerReqeust();

  DeregisterWorkerReqeust(const DeregisterWorkerReqeust& from);
  DeregisterWorkerReqeust(DeregisterWorkerReqeust&& from) noexcept
    : DeregisterWorkerReqeust() {
    *this = ::std::move(from);
  }

  inline DeregisterWorkerReqeust& operator=(const DeregisterWorkerReqeust& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeregisterWorkerReqeust& operator=(DeregisterWorkerReqeust&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeregisterWorkerReqeust& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeregisterWorkerReqeust* internal_default_instance() {
    return reinterpret_cast<const DeregisterWorkerReqeust*>(
               &_DeregisterWorkerReqeust_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DeregisterWorkerReqeust& a, DeregisterWorkerReqeust& b) {
    a.Swap(&b);
  }
  inline void Swap(DeregisterWorkerReqeust* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeregisterWorkerReqeust* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeregisterWorkerReqeust* New() const final {
    return CreateMaybeMessage<DeregisterWorkerReqeust>(nullptr);
  }

  DeregisterWorkerReqeust* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeregisterWorkerReqeust>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeregisterWorkerReqeust& from);
  void MergeFrom(const DeregisterWorkerReqeust& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeregisterWorkerReqeust* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "elasticjob_service.DeregisterWorkerReqeust";
  }
  protected:
  explicit DeregisterWorkerReqeust(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elasticjob_5fworker_5fservice_2eproto);
    return ::descriptor_table_elasticjob_5fworker_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:elasticjob_service.DeregisterWorkerReqeust)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_elasticjob_5fworker_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DeregisterWorkerReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:elasticjob_service.DeregisterWorkerReply) */ {
 public:
  inline DeregisterWorkerReply() : DeregisterWorkerReply(nullptr) {}
  virtual ~DeregisterWorkerReply();

  DeregisterWorkerReply(const DeregisterWorkerReply& from);
  DeregisterWorkerReply(DeregisterWorkerReply&& from) noexcept
    : DeregisterWorkerReply() {
    *this = ::std::move(from);
  }

  inline DeregisterWorkerReply& operator=(const DeregisterWorkerReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeregisterWorkerReply& operator=(DeregisterWorkerReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeregisterWorkerReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeregisterWorkerReply* internal_default_instance() {
    return reinterpret_cast<const DeregisterWorkerReply*>(
               &_DeregisterWorkerReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DeregisterWorkerReply& a, DeregisterWorkerReply& b) {
    a.Swap(&b);
  }
  inline void Swap(DeregisterWorkerReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeregisterWorkerReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeregisterWorkerReply* New() const final {
    return CreateMaybeMessage<DeregisterWorkerReply>(nullptr);
  }

  DeregisterWorkerReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeregisterWorkerReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeregisterWorkerReply& from);
  void MergeFrom(const DeregisterWorkerReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeregisterWorkerReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "elasticjob_service.DeregisterWorkerReply";
  }
  protected:
  explicit DeregisterWorkerReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elasticjob_5fworker_5fservice_2eproto);
    return ::descriptor_table_elasticjob_5fworker_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrCodeFieldNumber = 1,
  };
  // .elasticjob_service.ErrorCode err_code = 1;
  bool has_err_code() const;
  private:
  bool _internal_has_err_code() const;
  public:
  void clear_err_code();
  const ::elasticjob_service::ErrorCode& err_code() const;
  ::elasticjob_service::ErrorCode* release_err_code();
  ::elasticjob_service::ErrorCode* mutable_err_code();
  void set_allocated_err_code(::elasticjob_service::ErrorCode* err_code);
  private:
  const ::elasticjob_service::ErrorCode& _internal_err_code() const;
  ::elasticjob_service::ErrorCode* _internal_mutable_err_code();
  public:
  void unsafe_arena_set_allocated_err_code(
      ::elasticjob_service::ErrorCode* err_code);
  ::elasticjob_service::ErrorCode* unsafe_arena_release_err_code();

  // @@protoc_insertion_point(class_scope:elasticjob_service.DeregisterWorkerReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::elasticjob_service::ErrorCode* err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_elasticjob_5fworker_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SendRunningJobsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:elasticjob_service.SendRunningJobsRequest) */ {
 public:
  inline SendRunningJobsRequest() : SendRunningJobsRequest(nullptr) {}
  virtual ~SendRunningJobsRequest();

  SendRunningJobsRequest(const SendRunningJobsRequest& from);
  SendRunningJobsRequest(SendRunningJobsRequest&& from) noexcept
    : SendRunningJobsRequest() {
    *this = ::std::move(from);
  }

  inline SendRunningJobsRequest& operator=(const SendRunningJobsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendRunningJobsRequest& operator=(SendRunningJobsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendRunningJobsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendRunningJobsRequest* internal_default_instance() {
    return reinterpret_cast<const SendRunningJobsRequest*>(
               &_SendRunningJobsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SendRunningJobsRequest& a, SendRunningJobsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendRunningJobsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendRunningJobsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendRunningJobsRequest* New() const final {
    return CreateMaybeMessage<SendRunningJobsRequest>(nullptr);
  }

  SendRunningJobsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendRunningJobsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendRunningJobsRequest& from);
  void MergeFrom(const SendRunningJobsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendRunningJobsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "elasticjob_service.SendRunningJobsRequest";
  }
  protected:
  explicit SendRunningJobsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elasticjob_5fworker_5fservice_2eproto);
    return ::descriptor_table_elasticjob_5fworker_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJobResultsFieldNumber = 2,
  };
  // repeated .elasticjob_service.JobResult job_results = 2;
  int job_results_size() const;
  private:
  int _internal_job_results_size() const;
  public:
  void clear_job_results();
  ::elasticjob_service::JobResult* mutable_job_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::elasticjob_service::JobResult >*
      mutable_job_results();
  private:
  const ::elasticjob_service::JobResult& _internal_job_results(int index) const;
  ::elasticjob_service::JobResult* _internal_add_job_results();
  public:
  const ::elasticjob_service::JobResult& job_results(int index) const;
  ::elasticjob_service::JobResult* add_job_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::elasticjob_service::JobResult >&
      job_results() const;

  // @@protoc_insertion_point(class_scope:elasticjob_service.SendRunningJobsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::elasticjob_service::JobResult > job_results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_elasticjob_5fworker_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SendRunningJobsReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:elasticjob_service.SendRunningJobsReply) */ {
 public:
  inline SendRunningJobsReply() : SendRunningJobsReply(nullptr) {}
  virtual ~SendRunningJobsReply();

  SendRunningJobsReply(const SendRunningJobsReply& from);
  SendRunningJobsReply(SendRunningJobsReply&& from) noexcept
    : SendRunningJobsReply() {
    *this = ::std::move(from);
  }

  inline SendRunningJobsReply& operator=(const SendRunningJobsReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendRunningJobsReply& operator=(SendRunningJobsReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendRunningJobsReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendRunningJobsReply* internal_default_instance() {
    return reinterpret_cast<const SendRunningJobsReply*>(
               &_SendRunningJobsReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SendRunningJobsReply& a, SendRunningJobsReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SendRunningJobsReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendRunningJobsReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendRunningJobsReply* New() const final {
    return CreateMaybeMessage<SendRunningJobsReply>(nullptr);
  }

  SendRunningJobsReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendRunningJobsReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendRunningJobsReply& from);
  void MergeFrom(const SendRunningJobsReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendRunningJobsReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "elasticjob_service.SendRunningJobsReply";
  }
  protected:
  explicit SendRunningJobsReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elasticjob_5fworker_5fservice_2eproto);
    return ::descriptor_table_elasticjob_5fworker_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrCodeFieldNumber = 1,
  };
  // .elasticjob_service.ErrorCode err_code = 1;
  bool has_err_code() const;
  private:
  bool _internal_has_err_code() const;
  public:
  void clear_err_code();
  const ::elasticjob_service::ErrorCode& err_code() const;
  ::elasticjob_service::ErrorCode* release_err_code();
  ::elasticjob_service::ErrorCode* mutable_err_code();
  void set_allocated_err_code(::elasticjob_service::ErrorCode* err_code);
  private:
  const ::elasticjob_service::ErrorCode& _internal_err_code() const;
  ::elasticjob_service::ErrorCode* _internal_mutable_err_code();
  public:
  void unsafe_arena_set_allocated_err_code(
      ::elasticjob_service::ErrorCode* err_code);
  ::elasticjob_service::ErrorCode* unsafe_arena_release_err_code();

  // @@protoc_insertion_point(class_scope:elasticjob_service.SendRunningJobsReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::elasticjob_service::ErrorCode* err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_elasticjob_5fworker_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SendJobResultRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:elasticjob_service.SendJobResultRequest) */ {
 public:
  inline SendJobResultRequest() : SendJobResultRequest(nullptr) {}
  virtual ~SendJobResultRequest();

  SendJobResultRequest(const SendJobResultRequest& from);
  SendJobResultRequest(SendJobResultRequest&& from) noexcept
    : SendJobResultRequest() {
    *this = ::std::move(from);
  }

  inline SendJobResultRequest& operator=(const SendJobResultRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendJobResultRequest& operator=(SendJobResultRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendJobResultRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendJobResultRequest* internal_default_instance() {
    return reinterpret_cast<const SendJobResultRequest*>(
               &_SendJobResultRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SendJobResultRequest& a, SendJobResultRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendJobResultRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendJobResultRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendJobResultRequest* New() const final {
    return CreateMaybeMessage<SendJobResultRequest>(nullptr);
  }

  SendJobResultRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendJobResultRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendJobResultRequest& from);
  void MergeFrom(const SendJobResultRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendJobResultRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "elasticjob_service.SendJobResultRequest";
  }
  protected:
  explicit SendJobResultRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elasticjob_5fworker_5fservice_2eproto);
    return ::descriptor_table_elasticjob_5fworker_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJobResultsFieldNumber = 1,
  };
  // .elasticjob_service.JobResult job_results = 1;
  bool has_job_results() const;
  private:
  bool _internal_has_job_results() const;
  public:
  void clear_job_results();
  const ::elasticjob_service::JobResult& job_results() const;
  ::elasticjob_service::JobResult* release_job_results();
  ::elasticjob_service::JobResult* mutable_job_results();
  void set_allocated_job_results(::elasticjob_service::JobResult* job_results);
  private:
  const ::elasticjob_service::JobResult& _internal_job_results() const;
  ::elasticjob_service::JobResult* _internal_mutable_job_results();
  public:
  void unsafe_arena_set_allocated_job_results(
      ::elasticjob_service::JobResult* job_results);
  ::elasticjob_service::JobResult* unsafe_arena_release_job_results();

  // @@protoc_insertion_point(class_scope:elasticjob_service.SendJobResultRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::elasticjob_service::JobResult* job_results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_elasticjob_5fworker_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SendJobResultReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:elasticjob_service.SendJobResultReply) */ {
 public:
  inline SendJobResultReply() : SendJobResultReply(nullptr) {}
  virtual ~SendJobResultReply();

  SendJobResultReply(const SendJobResultReply& from);
  SendJobResultReply(SendJobResultReply&& from) noexcept
    : SendJobResultReply() {
    *this = ::std::move(from);
  }

  inline SendJobResultReply& operator=(const SendJobResultReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendJobResultReply& operator=(SendJobResultReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendJobResultReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendJobResultReply* internal_default_instance() {
    return reinterpret_cast<const SendJobResultReply*>(
               &_SendJobResultReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SendJobResultReply& a, SendJobResultReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SendJobResultReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendJobResultReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendJobResultReply* New() const final {
    return CreateMaybeMessage<SendJobResultReply>(nullptr);
  }

  SendJobResultReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendJobResultReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendJobResultReply& from);
  void MergeFrom(const SendJobResultReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendJobResultReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "elasticjob_service.SendJobResultReply";
  }
  protected:
  explicit SendJobResultReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elasticjob_5fworker_5fservice_2eproto);
    return ::descriptor_table_elasticjob_5fworker_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrCodeFieldNumber = 1,
  };
  // .elasticjob_service.ErrorCode err_code = 1;
  bool has_err_code() const;
  private:
  bool _internal_has_err_code() const;
  public:
  void clear_err_code();
  const ::elasticjob_service::ErrorCode& err_code() const;
  ::elasticjob_service::ErrorCode* release_err_code();
  ::elasticjob_service::ErrorCode* mutable_err_code();
  void set_allocated_err_code(::elasticjob_service::ErrorCode* err_code);
  private:
  const ::elasticjob_service::ErrorCode& _internal_err_code() const;
  ::elasticjob_service::ErrorCode* _internal_mutable_err_code();
  public:
  void unsafe_arena_set_allocated_err_code(
      ::elasticjob_service::ErrorCode* err_code);
  ::elasticjob_service::ErrorCode* unsafe_arena_release_err_code();

  // @@protoc_insertion_point(class_scope:elasticjob_service.SendJobResultReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::elasticjob_service::ErrorCode* err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_elasticjob_5fworker_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ExchangeJobRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:elasticjob_service.ExchangeJobRequest) */ {
 public:
  inline ExchangeJobRequest() : ExchangeJobRequest(nullptr) {}
  virtual ~ExchangeJobRequest();

  ExchangeJobRequest(const ExchangeJobRequest& from);
  ExchangeJobRequest(ExchangeJobRequest&& from) noexcept
    : ExchangeJobRequest() {
    *this = ::std::move(from);
  }

  inline ExchangeJobRequest& operator=(const ExchangeJobRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExchangeJobRequest& operator=(ExchangeJobRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExchangeJobRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExchangeJobRequest* internal_default_instance() {
    return reinterpret_cast<const ExchangeJobRequest*>(
               &_ExchangeJobRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ExchangeJobRequest& a, ExchangeJobRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExchangeJobRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExchangeJobRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExchangeJobRequest* New() const final {
    return CreateMaybeMessage<ExchangeJobRequest>(nullptr);
  }

  ExchangeJobRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExchangeJobRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExchangeJobRequest& from);
  void MergeFrom(const ExchangeJobRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExchangeJobRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "elasticjob_service.ExchangeJobRequest";
  }
  protected:
  explicit ExchangeJobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elasticjob_5fworker_5fservice_2eproto);
    return ::descriptor_table_elasticjob_5fworker_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:elasticjob_service.ExchangeJobRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_elasticjob_5fworker_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ExchangeJobReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:elasticjob_service.ExchangeJobReply) */ {
 public:
  inline ExchangeJobReply() : ExchangeJobReply(nullptr) {}
  virtual ~ExchangeJobReply();

  ExchangeJobReply(const ExchangeJobReply& from);
  ExchangeJobReply(ExchangeJobReply&& from) noexcept
    : ExchangeJobReply() {
    *this = ::std::move(from);
  }

  inline ExchangeJobReply& operator=(const ExchangeJobReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExchangeJobReply& operator=(ExchangeJobReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExchangeJobReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExchangeJobReply* internal_default_instance() {
    return reinterpret_cast<const ExchangeJobReply*>(
               &_ExchangeJobReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ExchangeJobReply& a, ExchangeJobReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ExchangeJobReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExchangeJobReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExchangeJobReply* New() const final {
    return CreateMaybeMessage<ExchangeJobReply>(nullptr);
  }

  ExchangeJobReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExchangeJobReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExchangeJobReply& from);
  void MergeFrom(const ExchangeJobReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExchangeJobReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "elasticjob_service.ExchangeJobReply";
  }
  protected:
  explicit ExchangeJobReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elasticjob_5fworker_5fservice_2eproto);
    return ::descriptor_table_elasticjob_5fworker_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrCodeFieldNumber = 1,
    kRunningInfoFieldNumber = 2,
  };
  // .elasticjob_service.ErrorCode err_code = 1;
  bool has_err_code() const;
  private:
  bool _internal_has_err_code() const;
  public:
  void clear_err_code();
  const ::elasticjob_service::ErrorCode& err_code() const;
  ::elasticjob_service::ErrorCode* release_err_code();
  ::elasticjob_service::ErrorCode* mutable_err_code();
  void set_allocated_err_code(::elasticjob_service::ErrorCode* err_code);
  private:
  const ::elasticjob_service::ErrorCode& _internal_err_code() const;
  ::elasticjob_service::ErrorCode* _internal_mutable_err_code();
  public:
  void unsafe_arena_set_allocated_err_code(
      ::elasticjob_service::ErrorCode* err_code);
  ::elasticjob_service::ErrorCode* unsafe_arena_release_err_code();

  // .elasticjob_service.JobRunningInfo running_info = 2;
  bool has_running_info() const;
  private:
  bool _internal_has_running_info() const;
  public:
  void clear_running_info();
  const ::elasticjob_service::JobRunningInfo& running_info() const;
  ::elasticjob_service::JobRunningInfo* release_running_info();
  ::elasticjob_service::JobRunningInfo* mutable_running_info();
  void set_allocated_running_info(::elasticjob_service::JobRunningInfo* running_info);
  private:
  const ::elasticjob_service::JobRunningInfo& _internal_running_info() const;
  ::elasticjob_service::JobRunningInfo* _internal_mutable_running_info();
  public:
  void unsafe_arena_set_allocated_running_info(
      ::elasticjob_service::JobRunningInfo* running_info);
  ::elasticjob_service::JobRunningInfo* unsafe_arena_release_running_info();

  // @@protoc_insertion_point(class_scope:elasticjob_service.ExchangeJobReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::elasticjob_service::ErrorCode* err_code_;
  ::elasticjob_service::JobRunningInfo* running_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_elasticjob_5fworker_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SendStatsReqeust PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:elasticjob_service.SendStatsReqeust) */ {
 public:
  inline SendStatsReqeust() : SendStatsReqeust(nullptr) {}
  virtual ~SendStatsReqeust();

  SendStatsReqeust(const SendStatsReqeust& from);
  SendStatsReqeust(SendStatsReqeust&& from) noexcept
    : SendStatsReqeust() {
    *this = ::std::move(from);
  }

  inline SendStatsReqeust& operator=(const SendStatsReqeust& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendStatsReqeust& operator=(SendStatsReqeust&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendStatsReqeust& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendStatsReqeust* internal_default_instance() {
    return reinterpret_cast<const SendStatsReqeust*>(
               &_SendStatsReqeust_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SendStatsReqeust& a, SendStatsReqeust& b) {
    a.Swap(&b);
  }
  inline void Swap(SendStatsReqeust* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendStatsReqeust* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendStatsReqeust* New() const final {
    return CreateMaybeMessage<SendStatsReqeust>(nullptr);
  }

  SendStatsReqeust* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendStatsReqeust>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendStatsReqeust& from);
  void MergeFrom(const SendStatsReqeust& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendStatsReqeust* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "elasticjob_service.SendStatsReqeust";
  }
  protected:
  explicit SendStatsReqeust(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elasticjob_5fworker_5fservice_2eproto);
    return ::descriptor_table_elasticjob_5fworker_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRuningJobsFieldNumber = 1,
  };
  // int32 runing_jobs = 1;
  void clear_runing_jobs();
  ::PROTOBUF_NAMESPACE_ID::int32 runing_jobs() const;
  void set_runing_jobs(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_runing_jobs() const;
  void _internal_set_runing_jobs(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:elasticjob_service.SendStatsReqeust)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 runing_jobs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_elasticjob_5fworker_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SendStatsReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:elasticjob_service.SendStatsReply) */ {
 public:
  inline SendStatsReply() : SendStatsReply(nullptr) {}
  virtual ~SendStatsReply();

  SendStatsReply(const SendStatsReply& from);
  SendStatsReply(SendStatsReply&& from) noexcept
    : SendStatsReply() {
    *this = ::std::move(from);
  }

  inline SendStatsReply& operator=(const SendStatsReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendStatsReply& operator=(SendStatsReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendStatsReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendStatsReply* internal_default_instance() {
    return reinterpret_cast<const SendStatsReply*>(
               &_SendStatsReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SendStatsReply& a, SendStatsReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SendStatsReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendStatsReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendStatsReply* New() const final {
    return CreateMaybeMessage<SendStatsReply>(nullptr);
  }

  SendStatsReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendStatsReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendStatsReply& from);
  void MergeFrom(const SendStatsReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendStatsReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "elasticjob_service.SendStatsReply";
  }
  protected:
  explicit SendStatsReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elasticjob_5fworker_5fservice_2eproto);
    return ::descriptor_table_elasticjob_5fworker_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrCodeFieldNumber = 1,
  };
  // .elasticjob_service.ErrorCode err_code = 1;
  bool has_err_code() const;
  private:
  bool _internal_has_err_code() const;
  public:
  void clear_err_code();
  const ::elasticjob_service::ErrorCode& err_code() const;
  ::elasticjob_service::ErrorCode* release_err_code();
  ::elasticjob_service::ErrorCode* mutable_err_code();
  void set_allocated_err_code(::elasticjob_service::ErrorCode* err_code);
  private:
  const ::elasticjob_service::ErrorCode& _internal_err_code() const;
  ::elasticjob_service::ErrorCode* _internal_mutable_err_code();
  public:
  void unsafe_arena_set_allocated_err_code(
      ::elasticjob_service::ErrorCode* err_code);
  ::elasticjob_service::ErrorCode* unsafe_arena_release_err_code();

  // @@protoc_insertion_point(class_scope:elasticjob_service.SendStatsReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::elasticjob_service::ErrorCode* err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_elasticjob_5fworker_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// JobRunningInfo

// string id = 1;
inline void JobRunningInfo::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JobRunningInfo::id() const {
  // @@protoc_insertion_point(field_get:elasticjob_service.JobRunningInfo.id)
  return _internal_id();
}
inline void JobRunningInfo::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:elasticjob_service.JobRunningInfo.id)
}
inline std::string* JobRunningInfo::mutable_id() {
  // @@protoc_insertion_point(field_mutable:elasticjob_service.JobRunningInfo.id)
  return _internal_mutable_id();
}
inline const std::string& JobRunningInfo::_internal_id() const {
  return id_.Get();
}
inline void JobRunningInfo::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JobRunningInfo::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:elasticjob_service.JobRunningInfo.id)
}
inline void JobRunningInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:elasticjob_service.JobRunningInfo.id)
}
inline void JobRunningInfo::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:elasticjob_service.JobRunningInfo.id)
}
inline std::string* JobRunningInfo::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JobRunningInfo::release_id() {
  // @@protoc_insertion_point(field_release:elasticjob_service.JobRunningInfo.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JobRunningInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:elasticjob_service.JobRunningInfo.id)
}

// string job_id = 2;
inline void JobRunningInfo::clear_job_id() {
  job_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JobRunningInfo::job_id() const {
  // @@protoc_insertion_point(field_get:elasticjob_service.JobRunningInfo.job_id)
  return _internal_job_id();
}
inline void JobRunningInfo::set_job_id(const std::string& value) {
  _internal_set_job_id(value);
  // @@protoc_insertion_point(field_set:elasticjob_service.JobRunningInfo.job_id)
}
inline std::string* JobRunningInfo::mutable_job_id() {
  // @@protoc_insertion_point(field_mutable:elasticjob_service.JobRunningInfo.job_id)
  return _internal_mutable_job_id();
}
inline const std::string& JobRunningInfo::_internal_job_id() const {
  return job_id_.Get();
}
inline void JobRunningInfo::_internal_set_job_id(const std::string& value) {
  
  job_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JobRunningInfo::set_job_id(std::string&& value) {
  
  job_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:elasticjob_service.JobRunningInfo.job_id)
}
inline void JobRunningInfo::set_job_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  job_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:elasticjob_service.JobRunningInfo.job_id)
}
inline void JobRunningInfo::set_job_id(const char* value,
    size_t size) {
  
  job_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:elasticjob_service.JobRunningInfo.job_id)
}
inline std::string* JobRunningInfo::_internal_mutable_job_id() {
  
  return job_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JobRunningInfo::release_job_id() {
  // @@protoc_insertion_point(field_release:elasticjob_service.JobRunningInfo.job_id)
  return job_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JobRunningInfo::set_allocated_job_id(std::string* job_id) {
  if (job_id != nullptr) {
    
  } else {
    
  }
  job_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), job_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:elasticjob_service.JobRunningInfo.job_id)
}

// string name = 3;
inline void JobRunningInfo::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JobRunningInfo::name() const {
  // @@protoc_insertion_point(field_get:elasticjob_service.JobRunningInfo.name)
  return _internal_name();
}
inline void JobRunningInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:elasticjob_service.JobRunningInfo.name)
}
inline std::string* JobRunningInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:elasticjob_service.JobRunningInfo.name)
  return _internal_mutable_name();
}
inline const std::string& JobRunningInfo::_internal_name() const {
  return name_.Get();
}
inline void JobRunningInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JobRunningInfo::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:elasticjob_service.JobRunningInfo.name)
}
inline void JobRunningInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:elasticjob_service.JobRunningInfo.name)
}
inline void JobRunningInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:elasticjob_service.JobRunningInfo.name)
}
inline std::string* JobRunningInfo::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JobRunningInfo::release_name() {
  // @@protoc_insertion_point(field_release:elasticjob_service.JobRunningInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JobRunningInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:elasticjob_service.JobRunningInfo.name)
}

// string category = 4;
inline void JobRunningInfo::clear_category() {
  category_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JobRunningInfo::category() const {
  // @@protoc_insertion_point(field_get:elasticjob_service.JobRunningInfo.category)
  return _internal_category();
}
inline void JobRunningInfo::set_category(const std::string& value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:elasticjob_service.JobRunningInfo.category)
}
inline std::string* JobRunningInfo::mutable_category() {
  // @@protoc_insertion_point(field_mutable:elasticjob_service.JobRunningInfo.category)
  return _internal_mutable_category();
}
inline const std::string& JobRunningInfo::_internal_category() const {
  return category_.Get();
}
inline void JobRunningInfo::_internal_set_category(const std::string& value) {
  
  category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JobRunningInfo::set_category(std::string&& value) {
  
  category_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:elasticjob_service.JobRunningInfo.category)
}
inline void JobRunningInfo::set_category(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:elasticjob_service.JobRunningInfo.category)
}
inline void JobRunningInfo::set_category(const char* value,
    size_t size) {
  
  category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:elasticjob_service.JobRunningInfo.category)
}
inline std::string* JobRunningInfo::_internal_mutable_category() {
  
  return category_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JobRunningInfo::release_category() {
  // @@protoc_insertion_point(field_release:elasticjob_service.JobRunningInfo.category)
  return category_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JobRunningInfo::set_allocated_category(std::string* category) {
  if (category != nullptr) {
    
  } else {
    
  }
  category_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), category,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:elasticjob_service.JobRunningInfo.category)
}

// string param = 5;
inline void JobRunningInfo::clear_param() {
  param_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JobRunningInfo::param() const {
  // @@protoc_insertion_point(field_get:elasticjob_service.JobRunningInfo.param)
  return _internal_param();
}
inline void JobRunningInfo::set_param(const std::string& value) {
  _internal_set_param(value);
  // @@protoc_insertion_point(field_set:elasticjob_service.JobRunningInfo.param)
}
inline std::string* JobRunningInfo::mutable_param() {
  // @@protoc_insertion_point(field_mutable:elasticjob_service.JobRunningInfo.param)
  return _internal_mutable_param();
}
inline const std::string& JobRunningInfo::_internal_param() const {
  return param_.Get();
}
inline void JobRunningInfo::_internal_set_param(const std::string& value) {
  
  param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JobRunningInfo::set_param(std::string&& value) {
  
  param_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:elasticjob_service.JobRunningInfo.param)
}
inline void JobRunningInfo::set_param(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:elasticjob_service.JobRunningInfo.param)
}
inline void JobRunningInfo::set_param(const char* value,
    size_t size) {
  
  param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:elasticjob_service.JobRunningInfo.param)
}
inline std::string* JobRunningInfo::_internal_mutable_param() {
  
  return param_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JobRunningInfo::release_param() {
  // @@protoc_insertion_point(field_release:elasticjob_service.JobRunningInfo.param)
  return param_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JobRunningInfo::set_allocated_param(std::string* param) {
  if (param != nullptr) {
    
  } else {
    
  }
  param_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:elasticjob_service.JobRunningInfo.param)
}

// -------------------------------------------------------------------

// WorkerAbility

// repeated string categories = 1;
inline int WorkerAbility::_internal_categories_size() const {
  return categories_.size();
}
inline int WorkerAbility::categories_size() const {
  return _internal_categories_size();
}
inline void WorkerAbility::clear_categories() {
  categories_.Clear();
}
inline std::string* WorkerAbility::add_categories() {
  // @@protoc_insertion_point(field_add_mutable:elasticjob_service.WorkerAbility.categories)
  return _internal_add_categories();
}
inline const std::string& WorkerAbility::_internal_categories(int index) const {
  return categories_.Get(index);
}
inline const std::string& WorkerAbility::categories(int index) const {
  // @@protoc_insertion_point(field_get:elasticjob_service.WorkerAbility.categories)
  return _internal_categories(index);
}
inline std::string* WorkerAbility::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:elasticjob_service.WorkerAbility.categories)
  return categories_.Mutable(index);
}
inline void WorkerAbility::set_categories(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:elasticjob_service.WorkerAbility.categories)
  categories_.Mutable(index)->assign(value);
}
inline void WorkerAbility::set_categories(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:elasticjob_service.WorkerAbility.categories)
  categories_.Mutable(index)->assign(std::move(value));
}
inline void WorkerAbility::set_categories(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  categories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:elasticjob_service.WorkerAbility.categories)
}
inline void WorkerAbility::set_categories(int index, const char* value, size_t size) {
  categories_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:elasticjob_service.WorkerAbility.categories)
}
inline std::string* WorkerAbility::_internal_add_categories() {
  return categories_.Add();
}
inline void WorkerAbility::add_categories(const std::string& value) {
  categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:elasticjob_service.WorkerAbility.categories)
}
inline void WorkerAbility::add_categories(std::string&& value) {
  categories_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:elasticjob_service.WorkerAbility.categories)
}
inline void WorkerAbility::add_categories(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:elasticjob_service.WorkerAbility.categories)
}
inline void WorkerAbility::add_categories(const char* value, size_t size) {
  categories_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:elasticjob_service.WorkerAbility.categories)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
WorkerAbility::categories() const {
  // @@protoc_insertion_point(field_list:elasticjob_service.WorkerAbility.categories)
  return categories_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
WorkerAbility::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:elasticjob_service.WorkerAbility.categories)
  return &categories_;
}

// int32 max_parallel_job = 2;
inline void WorkerAbility::clear_max_parallel_job() {
  max_parallel_job_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkerAbility::_internal_max_parallel_job() const {
  return max_parallel_job_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkerAbility::max_parallel_job() const {
  // @@protoc_insertion_point(field_get:elasticjob_service.WorkerAbility.max_parallel_job)
  return _internal_max_parallel_job();
}
inline void WorkerAbility::_internal_set_max_parallel_job(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_parallel_job_ = value;
}
inline void WorkerAbility::set_max_parallel_job(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_parallel_job(value);
  // @@protoc_insertion_point(field_set:elasticjob_service.WorkerAbility.max_parallel_job)
}

// -------------------------------------------------------------------

// ErrorCode

// string code = 1;
inline void ErrorCode::clear_code() {
  code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ErrorCode::code() const {
  // @@protoc_insertion_point(field_get:elasticjob_service.ErrorCode.code)
  return _internal_code();
}
inline void ErrorCode::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:elasticjob_service.ErrorCode.code)
}
inline std::string* ErrorCode::mutable_code() {
  // @@protoc_insertion_point(field_mutable:elasticjob_service.ErrorCode.code)
  return _internal_mutable_code();
}
inline const std::string& ErrorCode::_internal_code() const {
  return code_.Get();
}
inline void ErrorCode::_internal_set_code(const std::string& value) {
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ErrorCode::set_code(std::string&& value) {
  
  code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:elasticjob_service.ErrorCode.code)
}
inline void ErrorCode::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:elasticjob_service.ErrorCode.code)
}
inline void ErrorCode::set_code(const char* value,
    size_t size) {
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:elasticjob_service.ErrorCode.code)
}
inline std::string* ErrorCode::_internal_mutable_code() {
  
  return code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ErrorCode::release_code() {
  // @@protoc_insertion_point(field_release:elasticjob_service.ErrorCode.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ErrorCode::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:elasticjob_service.ErrorCode.code)
}

// string message = 2;
inline void ErrorCode::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ErrorCode::message() const {
  // @@protoc_insertion_point(field_get:elasticjob_service.ErrorCode.message)
  return _internal_message();
}
inline void ErrorCode::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:elasticjob_service.ErrorCode.message)
}
inline std::string* ErrorCode::mutable_message() {
  // @@protoc_insertion_point(field_mutable:elasticjob_service.ErrorCode.message)
  return _internal_mutable_message();
}
inline const std::string& ErrorCode::_internal_message() const {
  return message_.Get();
}
inline void ErrorCode::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ErrorCode::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:elasticjob_service.ErrorCode.message)
}
inline void ErrorCode::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:elasticjob_service.ErrorCode.message)
}
inline void ErrorCode::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:elasticjob_service.ErrorCode.message)
}
inline std::string* ErrorCode::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ErrorCode::release_message() {
  // @@protoc_insertion_point(field_release:elasticjob_service.ErrorCode.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ErrorCode::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:elasticjob_service.ErrorCode.message)
}

// -------------------------------------------------------------------

// JobResult

// string id = 1;
inline void JobResult::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JobResult::id() const {
  // @@protoc_insertion_point(field_get:elasticjob_service.JobResult.id)
  return _internal_id();
}
inline void JobResult::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:elasticjob_service.JobResult.id)
}
inline std::string* JobResult::mutable_id() {
  // @@protoc_insertion_point(field_mutable:elasticjob_service.JobResult.id)
  return _internal_mutable_id();
}
inline const std::string& JobResult::_internal_id() const {
  return id_.Get();
}
inline void JobResult::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JobResult::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:elasticjob_service.JobResult.id)
}
inline void JobResult::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:elasticjob_service.JobResult.id)
}
inline void JobResult::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:elasticjob_service.JobResult.id)
}
inline std::string* JobResult::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JobResult::release_id() {
  // @@protoc_insertion_point(field_release:elasticjob_service.JobResult.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JobResult::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:elasticjob_service.JobResult.id)
}

// string job_id = 2;
inline void JobResult::clear_job_id() {
  job_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JobResult::job_id() const {
  // @@protoc_insertion_point(field_get:elasticjob_service.JobResult.job_id)
  return _internal_job_id();
}
inline void JobResult::set_job_id(const std::string& value) {
  _internal_set_job_id(value);
  // @@protoc_insertion_point(field_set:elasticjob_service.JobResult.job_id)
}
inline std::string* JobResult::mutable_job_id() {
  // @@protoc_insertion_point(field_mutable:elasticjob_service.JobResult.job_id)
  return _internal_mutable_job_id();
}
inline const std::string& JobResult::_internal_job_id() const {
  return job_id_.Get();
}
inline void JobResult::_internal_set_job_id(const std::string& value) {
  
  job_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JobResult::set_job_id(std::string&& value) {
  
  job_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:elasticjob_service.JobResult.job_id)
}
inline void JobResult::set_job_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  job_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:elasticjob_service.JobResult.job_id)
}
inline void JobResult::set_job_id(const char* value,
    size_t size) {
  
  job_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:elasticjob_service.JobResult.job_id)
}
inline std::string* JobResult::_internal_mutable_job_id() {
  
  return job_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JobResult::release_job_id() {
  // @@protoc_insertion_point(field_release:elasticjob_service.JobResult.job_id)
  return job_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JobResult::set_allocated_job_id(std::string* job_id) {
  if (job_id != nullptr) {
    
  } else {
    
  }
  job_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), job_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:elasticjob_service.JobResult.job_id)
}

// int32 status = 3;
inline void JobResult::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JobResult::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JobResult::status() const {
  // @@protoc_insertion_point(field_get:elasticjob_service.JobResult.status)
  return _internal_status();
}
inline void JobResult::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void JobResult::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:elasticjob_service.JobResult.status)
}

// string result = 4;
inline void JobResult::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JobResult::result() const {
  // @@protoc_insertion_point(field_get:elasticjob_service.JobResult.result)
  return _internal_result();
}
inline void JobResult::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:elasticjob_service.JobResult.result)
}
inline std::string* JobResult::mutable_result() {
  // @@protoc_insertion_point(field_mutable:elasticjob_service.JobResult.result)
  return _internal_mutable_result();
}
inline const std::string& JobResult::_internal_result() const {
  return result_.Get();
}
inline void JobResult::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JobResult::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:elasticjob_service.JobResult.result)
}
inline void JobResult::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:elasticjob_service.JobResult.result)
}
inline void JobResult::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:elasticjob_service.JobResult.result)
}
inline std::string* JobResult::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JobResult::release_result() {
  // @@protoc_insertion_point(field_release:elasticjob_service.JobResult.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JobResult::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:elasticjob_service.JobResult.result)
}

// .elasticjob_service.ErrorCode err_code = 5;
inline bool JobResult::_internal_has_err_code() const {
  return this != internal_default_instance() && err_code_ != nullptr;
}
inline bool JobResult::has_err_code() const {
  return _internal_has_err_code();
}
inline void JobResult::clear_err_code() {
  if (GetArena() == nullptr && err_code_ != nullptr) {
    delete err_code_;
  }
  err_code_ = nullptr;
}
inline const ::elasticjob_service::ErrorCode& JobResult::_internal_err_code() const {
  const ::elasticjob_service::ErrorCode* p = err_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::elasticjob_service::ErrorCode*>(
      &::elasticjob_service::_ErrorCode_default_instance_);
}
inline const ::elasticjob_service::ErrorCode& JobResult::err_code() const {
  // @@protoc_insertion_point(field_get:elasticjob_service.JobResult.err_code)
  return _internal_err_code();
}
inline void JobResult::unsafe_arena_set_allocated_err_code(
    ::elasticjob_service::ErrorCode* err_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(err_code_);
  }
  err_code_ = err_code;
  if (err_code) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:elasticjob_service.JobResult.err_code)
}
inline ::elasticjob_service::ErrorCode* JobResult::release_err_code() {
  
  ::elasticjob_service::ErrorCode* temp = err_code_;
  err_code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::elasticjob_service::ErrorCode* JobResult::unsafe_arena_release_err_code() {
  // @@protoc_insertion_point(field_release:elasticjob_service.JobResult.err_code)
  
  ::elasticjob_service::ErrorCode* temp = err_code_;
  err_code_ = nullptr;
  return temp;
}
inline ::elasticjob_service::ErrorCode* JobResult::_internal_mutable_err_code() {
  
  if (err_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::elasticjob_service::ErrorCode>(GetArena());
    err_code_ = p;
  }
  return err_code_;
}
inline ::elasticjob_service::ErrorCode* JobResult::mutable_err_code() {
  // @@protoc_insertion_point(field_mutable:elasticjob_service.JobResult.err_code)
  return _internal_mutable_err_code();
}
inline void JobResult::set_allocated_err_code(::elasticjob_service::ErrorCode* err_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete err_code_;
  }
  if (err_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(err_code);
    if (message_arena != submessage_arena) {
      err_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, err_code, submessage_arena);
    }
    
  } else {
    
  }
  err_code_ = err_code;
  // @@protoc_insertion_point(field_set_allocated:elasticjob_service.JobResult.err_code)
}

// -------------------------------------------------------------------

// AddNewJobReuqest

// .elasticjob_service.JobRunningInfo running_info = 1;
inline bool AddNewJobReuqest::_internal_has_running_info() const {
  return this != internal_default_instance() && running_info_ != nullptr;
}
inline bool AddNewJobReuqest::has_running_info() const {
  return _internal_has_running_info();
}
inline void AddNewJobReuqest::clear_running_info() {
  if (GetArena() == nullptr && running_info_ != nullptr) {
    delete running_info_;
  }
  running_info_ = nullptr;
}
inline const ::elasticjob_service::JobRunningInfo& AddNewJobReuqest::_internal_running_info() const {
  const ::elasticjob_service::JobRunningInfo* p = running_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::elasticjob_service::JobRunningInfo*>(
      &::elasticjob_service::_JobRunningInfo_default_instance_);
}
inline const ::elasticjob_service::JobRunningInfo& AddNewJobReuqest::running_info() const {
  // @@protoc_insertion_point(field_get:elasticjob_service.AddNewJobReuqest.running_info)
  return _internal_running_info();
}
inline void AddNewJobReuqest::unsafe_arena_set_allocated_running_info(
    ::elasticjob_service::JobRunningInfo* running_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(running_info_);
  }
  running_info_ = running_info;
  if (running_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:elasticjob_service.AddNewJobReuqest.running_info)
}
inline ::elasticjob_service::JobRunningInfo* AddNewJobReuqest::release_running_info() {
  
  ::elasticjob_service::JobRunningInfo* temp = running_info_;
  running_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::elasticjob_service::JobRunningInfo* AddNewJobReuqest::unsafe_arena_release_running_info() {
  // @@protoc_insertion_point(field_release:elasticjob_service.AddNewJobReuqest.running_info)
  
  ::elasticjob_service::JobRunningInfo* temp = running_info_;
  running_info_ = nullptr;
  return temp;
}
inline ::elasticjob_service::JobRunningInfo* AddNewJobReuqest::_internal_mutable_running_info() {
  
  if (running_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::elasticjob_service::JobRunningInfo>(GetArena());
    running_info_ = p;
  }
  return running_info_;
}
inline ::elasticjob_service::JobRunningInfo* AddNewJobReuqest::mutable_running_info() {
  // @@protoc_insertion_point(field_mutable:elasticjob_service.AddNewJobReuqest.running_info)
  return _internal_mutable_running_info();
}
inline void AddNewJobReuqest::set_allocated_running_info(::elasticjob_service::JobRunningInfo* running_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete running_info_;
  }
  if (running_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(running_info);
    if (message_arena != submessage_arena) {
      running_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, running_info, submessage_arena);
    }
    
  } else {
    
  }
  running_info_ = running_info;
  // @@protoc_insertion_point(field_set_allocated:elasticjob_service.AddNewJobReuqest.running_info)
}

// -------------------------------------------------------------------

// AddNewJobReply

// .elasticjob_service.ErrorCode err_code = 1;
inline bool AddNewJobReply::_internal_has_err_code() const {
  return this != internal_default_instance() && err_code_ != nullptr;
}
inline bool AddNewJobReply::has_err_code() const {
  return _internal_has_err_code();
}
inline void AddNewJobReply::clear_err_code() {
  if (GetArena() == nullptr && err_code_ != nullptr) {
    delete err_code_;
  }
  err_code_ = nullptr;
}
inline const ::elasticjob_service::ErrorCode& AddNewJobReply::_internal_err_code() const {
  const ::elasticjob_service::ErrorCode* p = err_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::elasticjob_service::ErrorCode*>(
      &::elasticjob_service::_ErrorCode_default_instance_);
}
inline const ::elasticjob_service::ErrorCode& AddNewJobReply::err_code() const {
  // @@protoc_insertion_point(field_get:elasticjob_service.AddNewJobReply.err_code)
  return _internal_err_code();
}
inline void AddNewJobReply::unsafe_arena_set_allocated_err_code(
    ::elasticjob_service::ErrorCode* err_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(err_code_);
  }
  err_code_ = err_code;
  if (err_code) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:elasticjob_service.AddNewJobReply.err_code)
}
inline ::elasticjob_service::ErrorCode* AddNewJobReply::release_err_code() {
  
  ::elasticjob_service::ErrorCode* temp = err_code_;
  err_code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::elasticjob_service::ErrorCode* AddNewJobReply::unsafe_arena_release_err_code() {
  // @@protoc_insertion_point(field_release:elasticjob_service.AddNewJobReply.err_code)
  
  ::elasticjob_service::ErrorCode* temp = err_code_;
  err_code_ = nullptr;
  return temp;
}
inline ::elasticjob_service::ErrorCode* AddNewJobReply::_internal_mutable_err_code() {
  
  if (err_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::elasticjob_service::ErrorCode>(GetArena());
    err_code_ = p;
  }
  return err_code_;
}
inline ::elasticjob_service::ErrorCode* AddNewJobReply::mutable_err_code() {
  // @@protoc_insertion_point(field_mutable:elasticjob_service.AddNewJobReply.err_code)
  return _internal_mutable_err_code();
}
inline void AddNewJobReply::set_allocated_err_code(::elasticjob_service::ErrorCode* err_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete err_code_;
  }
  if (err_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(err_code);
    if (message_arena != submessage_arena) {
      err_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, err_code, submessage_arena);
    }
    
  } else {
    
  }
  err_code_ = err_code;
  // @@protoc_insertion_point(field_set_allocated:elasticjob_service.AddNewJobReply.err_code)
}

// -------------------------------------------------------------------

// RegisterWorkerReqeust

// .elasticjob_service.WorkerAbility ability = 1;
inline bool RegisterWorkerReqeust::_internal_has_ability() const {
  return this != internal_default_instance() && ability_ != nullptr;
}
inline bool RegisterWorkerReqeust::has_ability() const {
  return _internal_has_ability();
}
inline void RegisterWorkerReqeust::clear_ability() {
  if (GetArena() == nullptr && ability_ != nullptr) {
    delete ability_;
  }
  ability_ = nullptr;
}
inline const ::elasticjob_service::WorkerAbility& RegisterWorkerReqeust::_internal_ability() const {
  const ::elasticjob_service::WorkerAbility* p = ability_;
  return p != nullptr ? *p : *reinterpret_cast<const ::elasticjob_service::WorkerAbility*>(
      &::elasticjob_service::_WorkerAbility_default_instance_);
}
inline const ::elasticjob_service::WorkerAbility& RegisterWorkerReqeust::ability() const {
  // @@protoc_insertion_point(field_get:elasticjob_service.RegisterWorkerReqeust.ability)
  return _internal_ability();
}
inline void RegisterWorkerReqeust::unsafe_arena_set_allocated_ability(
    ::elasticjob_service::WorkerAbility* ability) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ability_);
  }
  ability_ = ability;
  if (ability) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:elasticjob_service.RegisterWorkerReqeust.ability)
}
inline ::elasticjob_service::WorkerAbility* RegisterWorkerReqeust::release_ability() {
  
  ::elasticjob_service::WorkerAbility* temp = ability_;
  ability_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::elasticjob_service::WorkerAbility* RegisterWorkerReqeust::unsafe_arena_release_ability() {
  // @@protoc_insertion_point(field_release:elasticjob_service.RegisterWorkerReqeust.ability)
  
  ::elasticjob_service::WorkerAbility* temp = ability_;
  ability_ = nullptr;
  return temp;
}
inline ::elasticjob_service::WorkerAbility* RegisterWorkerReqeust::_internal_mutable_ability() {
  
  if (ability_ == nullptr) {
    auto* p = CreateMaybeMessage<::elasticjob_service::WorkerAbility>(GetArena());
    ability_ = p;
  }
  return ability_;
}
inline ::elasticjob_service::WorkerAbility* RegisterWorkerReqeust::mutable_ability() {
  // @@protoc_insertion_point(field_mutable:elasticjob_service.RegisterWorkerReqeust.ability)
  return _internal_mutable_ability();
}
inline void RegisterWorkerReqeust::set_allocated_ability(::elasticjob_service::WorkerAbility* ability) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ability_;
  }
  if (ability) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ability);
    if (message_arena != submessage_arena) {
      ability = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ability, submessage_arena);
    }
    
  } else {
    
  }
  ability_ = ability;
  // @@protoc_insertion_point(field_set_allocated:elasticjob_service.RegisterWorkerReqeust.ability)
}

// -------------------------------------------------------------------

// RegisterWorkerReply

// .elasticjob_service.ErrorCode err_code = 1;
inline bool RegisterWorkerReply::_internal_has_err_code() const {
  return this != internal_default_instance() && err_code_ != nullptr;
}
inline bool RegisterWorkerReply::has_err_code() const {
  return _internal_has_err_code();
}
inline void RegisterWorkerReply::clear_err_code() {
  if (GetArena() == nullptr && err_code_ != nullptr) {
    delete err_code_;
  }
  err_code_ = nullptr;
}
inline const ::elasticjob_service::ErrorCode& RegisterWorkerReply::_internal_err_code() const {
  const ::elasticjob_service::ErrorCode* p = err_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::elasticjob_service::ErrorCode*>(
      &::elasticjob_service::_ErrorCode_default_instance_);
}
inline const ::elasticjob_service::ErrorCode& RegisterWorkerReply::err_code() const {
  // @@protoc_insertion_point(field_get:elasticjob_service.RegisterWorkerReply.err_code)
  return _internal_err_code();
}
inline void RegisterWorkerReply::unsafe_arena_set_allocated_err_code(
    ::elasticjob_service::ErrorCode* err_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(err_code_);
  }
  err_code_ = err_code;
  if (err_code) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:elasticjob_service.RegisterWorkerReply.err_code)
}
inline ::elasticjob_service::ErrorCode* RegisterWorkerReply::release_err_code() {
  
  ::elasticjob_service::ErrorCode* temp = err_code_;
  err_code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::elasticjob_service::ErrorCode* RegisterWorkerReply::unsafe_arena_release_err_code() {
  // @@protoc_insertion_point(field_release:elasticjob_service.RegisterWorkerReply.err_code)
  
  ::elasticjob_service::ErrorCode* temp = err_code_;
  err_code_ = nullptr;
  return temp;
}
inline ::elasticjob_service::ErrorCode* RegisterWorkerReply::_internal_mutable_err_code() {
  
  if (err_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::elasticjob_service::ErrorCode>(GetArena());
    err_code_ = p;
  }
  return err_code_;
}
inline ::elasticjob_service::ErrorCode* RegisterWorkerReply::mutable_err_code() {
  // @@protoc_insertion_point(field_mutable:elasticjob_service.RegisterWorkerReply.err_code)
  return _internal_mutable_err_code();
}
inline void RegisterWorkerReply::set_allocated_err_code(::elasticjob_service::ErrorCode* err_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete err_code_;
  }
  if (err_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(err_code);
    if (message_arena != submessage_arena) {
      err_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, err_code, submessage_arena);
    }
    
  } else {
    
  }
  err_code_ = err_code;
  // @@protoc_insertion_point(field_set_allocated:elasticjob_service.RegisterWorkerReply.err_code)
}

// -------------------------------------------------------------------

// DeregisterWorkerReqeust

// -------------------------------------------------------------------

// DeregisterWorkerReply

// .elasticjob_service.ErrorCode err_code = 1;
inline bool DeregisterWorkerReply::_internal_has_err_code() const {
  return this != internal_default_instance() && err_code_ != nullptr;
}
inline bool DeregisterWorkerReply::has_err_code() const {
  return _internal_has_err_code();
}
inline void DeregisterWorkerReply::clear_err_code() {
  if (GetArena() == nullptr && err_code_ != nullptr) {
    delete err_code_;
  }
  err_code_ = nullptr;
}
inline const ::elasticjob_service::ErrorCode& DeregisterWorkerReply::_internal_err_code() const {
  const ::elasticjob_service::ErrorCode* p = err_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::elasticjob_service::ErrorCode*>(
      &::elasticjob_service::_ErrorCode_default_instance_);
}
inline const ::elasticjob_service::ErrorCode& DeregisterWorkerReply::err_code() const {
  // @@protoc_insertion_point(field_get:elasticjob_service.DeregisterWorkerReply.err_code)
  return _internal_err_code();
}
inline void DeregisterWorkerReply::unsafe_arena_set_allocated_err_code(
    ::elasticjob_service::ErrorCode* err_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(err_code_);
  }
  err_code_ = err_code;
  if (err_code) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:elasticjob_service.DeregisterWorkerReply.err_code)
}
inline ::elasticjob_service::ErrorCode* DeregisterWorkerReply::release_err_code() {
  
  ::elasticjob_service::ErrorCode* temp = err_code_;
  err_code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::elasticjob_service::ErrorCode* DeregisterWorkerReply::unsafe_arena_release_err_code() {
  // @@protoc_insertion_point(field_release:elasticjob_service.DeregisterWorkerReply.err_code)
  
  ::elasticjob_service::ErrorCode* temp = err_code_;
  err_code_ = nullptr;
  return temp;
}
inline ::elasticjob_service::ErrorCode* DeregisterWorkerReply::_internal_mutable_err_code() {
  
  if (err_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::elasticjob_service::ErrorCode>(GetArena());
    err_code_ = p;
  }
  return err_code_;
}
inline ::elasticjob_service::ErrorCode* DeregisterWorkerReply::mutable_err_code() {
  // @@protoc_insertion_point(field_mutable:elasticjob_service.DeregisterWorkerReply.err_code)
  return _internal_mutable_err_code();
}
inline void DeregisterWorkerReply::set_allocated_err_code(::elasticjob_service::ErrorCode* err_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete err_code_;
  }
  if (err_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(err_code);
    if (message_arena != submessage_arena) {
      err_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, err_code, submessage_arena);
    }
    
  } else {
    
  }
  err_code_ = err_code;
  // @@protoc_insertion_point(field_set_allocated:elasticjob_service.DeregisterWorkerReply.err_code)
}

// -------------------------------------------------------------------

// SendRunningJobsRequest

// repeated .elasticjob_service.JobResult job_results = 2;
inline int SendRunningJobsRequest::_internal_job_results_size() const {
  return job_results_.size();
}
inline int SendRunningJobsRequest::job_results_size() const {
  return _internal_job_results_size();
}
inline void SendRunningJobsRequest::clear_job_results() {
  job_results_.Clear();
}
inline ::elasticjob_service::JobResult* SendRunningJobsRequest::mutable_job_results(int index) {
  // @@protoc_insertion_point(field_mutable:elasticjob_service.SendRunningJobsRequest.job_results)
  return job_results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::elasticjob_service::JobResult >*
SendRunningJobsRequest::mutable_job_results() {
  // @@protoc_insertion_point(field_mutable_list:elasticjob_service.SendRunningJobsRequest.job_results)
  return &job_results_;
}
inline const ::elasticjob_service::JobResult& SendRunningJobsRequest::_internal_job_results(int index) const {
  return job_results_.Get(index);
}
inline const ::elasticjob_service::JobResult& SendRunningJobsRequest::job_results(int index) const {
  // @@protoc_insertion_point(field_get:elasticjob_service.SendRunningJobsRequest.job_results)
  return _internal_job_results(index);
}
inline ::elasticjob_service::JobResult* SendRunningJobsRequest::_internal_add_job_results() {
  return job_results_.Add();
}
inline ::elasticjob_service::JobResult* SendRunningJobsRequest::add_job_results() {
  // @@protoc_insertion_point(field_add:elasticjob_service.SendRunningJobsRequest.job_results)
  return _internal_add_job_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::elasticjob_service::JobResult >&
SendRunningJobsRequest::job_results() const {
  // @@protoc_insertion_point(field_list:elasticjob_service.SendRunningJobsRequest.job_results)
  return job_results_;
}

// -------------------------------------------------------------------

// SendRunningJobsReply

// .elasticjob_service.ErrorCode err_code = 1;
inline bool SendRunningJobsReply::_internal_has_err_code() const {
  return this != internal_default_instance() && err_code_ != nullptr;
}
inline bool SendRunningJobsReply::has_err_code() const {
  return _internal_has_err_code();
}
inline void SendRunningJobsReply::clear_err_code() {
  if (GetArena() == nullptr && err_code_ != nullptr) {
    delete err_code_;
  }
  err_code_ = nullptr;
}
inline const ::elasticjob_service::ErrorCode& SendRunningJobsReply::_internal_err_code() const {
  const ::elasticjob_service::ErrorCode* p = err_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::elasticjob_service::ErrorCode*>(
      &::elasticjob_service::_ErrorCode_default_instance_);
}
inline const ::elasticjob_service::ErrorCode& SendRunningJobsReply::err_code() const {
  // @@protoc_insertion_point(field_get:elasticjob_service.SendRunningJobsReply.err_code)
  return _internal_err_code();
}
inline void SendRunningJobsReply::unsafe_arena_set_allocated_err_code(
    ::elasticjob_service::ErrorCode* err_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(err_code_);
  }
  err_code_ = err_code;
  if (err_code) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:elasticjob_service.SendRunningJobsReply.err_code)
}
inline ::elasticjob_service::ErrorCode* SendRunningJobsReply::release_err_code() {
  
  ::elasticjob_service::ErrorCode* temp = err_code_;
  err_code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::elasticjob_service::ErrorCode* SendRunningJobsReply::unsafe_arena_release_err_code() {
  // @@protoc_insertion_point(field_release:elasticjob_service.SendRunningJobsReply.err_code)
  
  ::elasticjob_service::ErrorCode* temp = err_code_;
  err_code_ = nullptr;
  return temp;
}
inline ::elasticjob_service::ErrorCode* SendRunningJobsReply::_internal_mutable_err_code() {
  
  if (err_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::elasticjob_service::ErrorCode>(GetArena());
    err_code_ = p;
  }
  return err_code_;
}
inline ::elasticjob_service::ErrorCode* SendRunningJobsReply::mutable_err_code() {
  // @@protoc_insertion_point(field_mutable:elasticjob_service.SendRunningJobsReply.err_code)
  return _internal_mutable_err_code();
}
inline void SendRunningJobsReply::set_allocated_err_code(::elasticjob_service::ErrorCode* err_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete err_code_;
  }
  if (err_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(err_code);
    if (message_arena != submessage_arena) {
      err_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, err_code, submessage_arena);
    }
    
  } else {
    
  }
  err_code_ = err_code;
  // @@protoc_insertion_point(field_set_allocated:elasticjob_service.SendRunningJobsReply.err_code)
}

// -------------------------------------------------------------------

// SendJobResultRequest

// .elasticjob_service.JobResult job_results = 1;
inline bool SendJobResultRequest::_internal_has_job_results() const {
  return this != internal_default_instance() && job_results_ != nullptr;
}
inline bool SendJobResultRequest::has_job_results() const {
  return _internal_has_job_results();
}
inline void SendJobResultRequest::clear_job_results() {
  if (GetArena() == nullptr && job_results_ != nullptr) {
    delete job_results_;
  }
  job_results_ = nullptr;
}
inline const ::elasticjob_service::JobResult& SendJobResultRequest::_internal_job_results() const {
  const ::elasticjob_service::JobResult* p = job_results_;
  return p != nullptr ? *p : *reinterpret_cast<const ::elasticjob_service::JobResult*>(
      &::elasticjob_service::_JobResult_default_instance_);
}
inline const ::elasticjob_service::JobResult& SendJobResultRequest::job_results() const {
  // @@protoc_insertion_point(field_get:elasticjob_service.SendJobResultRequest.job_results)
  return _internal_job_results();
}
inline void SendJobResultRequest::unsafe_arena_set_allocated_job_results(
    ::elasticjob_service::JobResult* job_results) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(job_results_);
  }
  job_results_ = job_results;
  if (job_results) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:elasticjob_service.SendJobResultRequest.job_results)
}
inline ::elasticjob_service::JobResult* SendJobResultRequest::release_job_results() {
  
  ::elasticjob_service::JobResult* temp = job_results_;
  job_results_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::elasticjob_service::JobResult* SendJobResultRequest::unsafe_arena_release_job_results() {
  // @@protoc_insertion_point(field_release:elasticjob_service.SendJobResultRequest.job_results)
  
  ::elasticjob_service::JobResult* temp = job_results_;
  job_results_ = nullptr;
  return temp;
}
inline ::elasticjob_service::JobResult* SendJobResultRequest::_internal_mutable_job_results() {
  
  if (job_results_ == nullptr) {
    auto* p = CreateMaybeMessage<::elasticjob_service::JobResult>(GetArena());
    job_results_ = p;
  }
  return job_results_;
}
inline ::elasticjob_service::JobResult* SendJobResultRequest::mutable_job_results() {
  // @@protoc_insertion_point(field_mutable:elasticjob_service.SendJobResultRequest.job_results)
  return _internal_mutable_job_results();
}
inline void SendJobResultRequest::set_allocated_job_results(::elasticjob_service::JobResult* job_results) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete job_results_;
  }
  if (job_results) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(job_results);
    if (message_arena != submessage_arena) {
      job_results = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, job_results, submessage_arena);
    }
    
  } else {
    
  }
  job_results_ = job_results;
  // @@protoc_insertion_point(field_set_allocated:elasticjob_service.SendJobResultRequest.job_results)
}

// -------------------------------------------------------------------

// SendJobResultReply

// .elasticjob_service.ErrorCode err_code = 1;
inline bool SendJobResultReply::_internal_has_err_code() const {
  return this != internal_default_instance() && err_code_ != nullptr;
}
inline bool SendJobResultReply::has_err_code() const {
  return _internal_has_err_code();
}
inline void SendJobResultReply::clear_err_code() {
  if (GetArena() == nullptr && err_code_ != nullptr) {
    delete err_code_;
  }
  err_code_ = nullptr;
}
inline const ::elasticjob_service::ErrorCode& SendJobResultReply::_internal_err_code() const {
  const ::elasticjob_service::ErrorCode* p = err_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::elasticjob_service::ErrorCode*>(
      &::elasticjob_service::_ErrorCode_default_instance_);
}
inline const ::elasticjob_service::ErrorCode& SendJobResultReply::err_code() const {
  // @@protoc_insertion_point(field_get:elasticjob_service.SendJobResultReply.err_code)
  return _internal_err_code();
}
inline void SendJobResultReply::unsafe_arena_set_allocated_err_code(
    ::elasticjob_service::ErrorCode* err_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(err_code_);
  }
  err_code_ = err_code;
  if (err_code) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:elasticjob_service.SendJobResultReply.err_code)
}
inline ::elasticjob_service::ErrorCode* SendJobResultReply::release_err_code() {
  
  ::elasticjob_service::ErrorCode* temp = err_code_;
  err_code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::elasticjob_service::ErrorCode* SendJobResultReply::unsafe_arena_release_err_code() {
  // @@protoc_insertion_point(field_release:elasticjob_service.SendJobResultReply.err_code)
  
  ::elasticjob_service::ErrorCode* temp = err_code_;
  err_code_ = nullptr;
  return temp;
}
inline ::elasticjob_service::ErrorCode* SendJobResultReply::_internal_mutable_err_code() {
  
  if (err_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::elasticjob_service::ErrorCode>(GetArena());
    err_code_ = p;
  }
  return err_code_;
}
inline ::elasticjob_service::ErrorCode* SendJobResultReply::mutable_err_code() {
  // @@protoc_insertion_point(field_mutable:elasticjob_service.SendJobResultReply.err_code)
  return _internal_mutable_err_code();
}
inline void SendJobResultReply::set_allocated_err_code(::elasticjob_service::ErrorCode* err_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete err_code_;
  }
  if (err_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(err_code);
    if (message_arena != submessage_arena) {
      err_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, err_code, submessage_arena);
    }
    
  } else {
    
  }
  err_code_ = err_code;
  // @@protoc_insertion_point(field_set_allocated:elasticjob_service.SendJobResultReply.err_code)
}

// -------------------------------------------------------------------

// ExchangeJobRequest

// -------------------------------------------------------------------

// ExchangeJobReply

// .elasticjob_service.ErrorCode err_code = 1;
inline bool ExchangeJobReply::_internal_has_err_code() const {
  return this != internal_default_instance() && err_code_ != nullptr;
}
inline bool ExchangeJobReply::has_err_code() const {
  return _internal_has_err_code();
}
inline void ExchangeJobReply::clear_err_code() {
  if (GetArena() == nullptr && err_code_ != nullptr) {
    delete err_code_;
  }
  err_code_ = nullptr;
}
inline const ::elasticjob_service::ErrorCode& ExchangeJobReply::_internal_err_code() const {
  const ::elasticjob_service::ErrorCode* p = err_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::elasticjob_service::ErrorCode*>(
      &::elasticjob_service::_ErrorCode_default_instance_);
}
inline const ::elasticjob_service::ErrorCode& ExchangeJobReply::err_code() const {
  // @@protoc_insertion_point(field_get:elasticjob_service.ExchangeJobReply.err_code)
  return _internal_err_code();
}
inline void ExchangeJobReply::unsafe_arena_set_allocated_err_code(
    ::elasticjob_service::ErrorCode* err_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(err_code_);
  }
  err_code_ = err_code;
  if (err_code) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:elasticjob_service.ExchangeJobReply.err_code)
}
inline ::elasticjob_service::ErrorCode* ExchangeJobReply::release_err_code() {
  
  ::elasticjob_service::ErrorCode* temp = err_code_;
  err_code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::elasticjob_service::ErrorCode* ExchangeJobReply::unsafe_arena_release_err_code() {
  // @@protoc_insertion_point(field_release:elasticjob_service.ExchangeJobReply.err_code)
  
  ::elasticjob_service::ErrorCode* temp = err_code_;
  err_code_ = nullptr;
  return temp;
}
inline ::elasticjob_service::ErrorCode* ExchangeJobReply::_internal_mutable_err_code() {
  
  if (err_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::elasticjob_service::ErrorCode>(GetArena());
    err_code_ = p;
  }
  return err_code_;
}
inline ::elasticjob_service::ErrorCode* ExchangeJobReply::mutable_err_code() {
  // @@protoc_insertion_point(field_mutable:elasticjob_service.ExchangeJobReply.err_code)
  return _internal_mutable_err_code();
}
inline void ExchangeJobReply::set_allocated_err_code(::elasticjob_service::ErrorCode* err_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete err_code_;
  }
  if (err_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(err_code);
    if (message_arena != submessage_arena) {
      err_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, err_code, submessage_arena);
    }
    
  } else {
    
  }
  err_code_ = err_code;
  // @@protoc_insertion_point(field_set_allocated:elasticjob_service.ExchangeJobReply.err_code)
}

// .elasticjob_service.JobRunningInfo running_info = 2;
inline bool ExchangeJobReply::_internal_has_running_info() const {
  return this != internal_default_instance() && running_info_ != nullptr;
}
inline bool ExchangeJobReply::has_running_info() const {
  return _internal_has_running_info();
}
inline void ExchangeJobReply::clear_running_info() {
  if (GetArena() == nullptr && running_info_ != nullptr) {
    delete running_info_;
  }
  running_info_ = nullptr;
}
inline const ::elasticjob_service::JobRunningInfo& ExchangeJobReply::_internal_running_info() const {
  const ::elasticjob_service::JobRunningInfo* p = running_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::elasticjob_service::JobRunningInfo*>(
      &::elasticjob_service::_JobRunningInfo_default_instance_);
}
inline const ::elasticjob_service::JobRunningInfo& ExchangeJobReply::running_info() const {
  // @@protoc_insertion_point(field_get:elasticjob_service.ExchangeJobReply.running_info)
  return _internal_running_info();
}
inline void ExchangeJobReply::unsafe_arena_set_allocated_running_info(
    ::elasticjob_service::JobRunningInfo* running_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(running_info_);
  }
  running_info_ = running_info;
  if (running_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:elasticjob_service.ExchangeJobReply.running_info)
}
inline ::elasticjob_service::JobRunningInfo* ExchangeJobReply::release_running_info() {
  
  ::elasticjob_service::JobRunningInfo* temp = running_info_;
  running_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::elasticjob_service::JobRunningInfo* ExchangeJobReply::unsafe_arena_release_running_info() {
  // @@protoc_insertion_point(field_release:elasticjob_service.ExchangeJobReply.running_info)
  
  ::elasticjob_service::JobRunningInfo* temp = running_info_;
  running_info_ = nullptr;
  return temp;
}
inline ::elasticjob_service::JobRunningInfo* ExchangeJobReply::_internal_mutable_running_info() {
  
  if (running_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::elasticjob_service::JobRunningInfo>(GetArena());
    running_info_ = p;
  }
  return running_info_;
}
inline ::elasticjob_service::JobRunningInfo* ExchangeJobReply::mutable_running_info() {
  // @@protoc_insertion_point(field_mutable:elasticjob_service.ExchangeJobReply.running_info)
  return _internal_mutable_running_info();
}
inline void ExchangeJobReply::set_allocated_running_info(::elasticjob_service::JobRunningInfo* running_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete running_info_;
  }
  if (running_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(running_info);
    if (message_arena != submessage_arena) {
      running_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, running_info, submessage_arena);
    }
    
  } else {
    
  }
  running_info_ = running_info;
  // @@protoc_insertion_point(field_set_allocated:elasticjob_service.ExchangeJobReply.running_info)
}

// -------------------------------------------------------------------

// SendStatsReqeust

// int32 runing_jobs = 1;
inline void SendStatsReqeust::clear_runing_jobs() {
  runing_jobs_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendStatsReqeust::_internal_runing_jobs() const {
  return runing_jobs_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendStatsReqeust::runing_jobs() const {
  // @@protoc_insertion_point(field_get:elasticjob_service.SendStatsReqeust.runing_jobs)
  return _internal_runing_jobs();
}
inline void SendStatsReqeust::_internal_set_runing_jobs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  runing_jobs_ = value;
}
inline void SendStatsReqeust::set_runing_jobs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_runing_jobs(value);
  // @@protoc_insertion_point(field_set:elasticjob_service.SendStatsReqeust.runing_jobs)
}

// -------------------------------------------------------------------

// SendStatsReply

// .elasticjob_service.ErrorCode err_code = 1;
inline bool SendStatsReply::_internal_has_err_code() const {
  return this != internal_default_instance() && err_code_ != nullptr;
}
inline bool SendStatsReply::has_err_code() const {
  return _internal_has_err_code();
}
inline void SendStatsReply::clear_err_code() {
  if (GetArena() == nullptr && err_code_ != nullptr) {
    delete err_code_;
  }
  err_code_ = nullptr;
}
inline const ::elasticjob_service::ErrorCode& SendStatsReply::_internal_err_code() const {
  const ::elasticjob_service::ErrorCode* p = err_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::elasticjob_service::ErrorCode*>(
      &::elasticjob_service::_ErrorCode_default_instance_);
}
inline const ::elasticjob_service::ErrorCode& SendStatsReply::err_code() const {
  // @@protoc_insertion_point(field_get:elasticjob_service.SendStatsReply.err_code)
  return _internal_err_code();
}
inline void SendStatsReply::unsafe_arena_set_allocated_err_code(
    ::elasticjob_service::ErrorCode* err_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(err_code_);
  }
  err_code_ = err_code;
  if (err_code) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:elasticjob_service.SendStatsReply.err_code)
}
inline ::elasticjob_service::ErrorCode* SendStatsReply::release_err_code() {
  
  ::elasticjob_service::ErrorCode* temp = err_code_;
  err_code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::elasticjob_service::ErrorCode* SendStatsReply::unsafe_arena_release_err_code() {
  // @@protoc_insertion_point(field_release:elasticjob_service.SendStatsReply.err_code)
  
  ::elasticjob_service::ErrorCode* temp = err_code_;
  err_code_ = nullptr;
  return temp;
}
inline ::elasticjob_service::ErrorCode* SendStatsReply::_internal_mutable_err_code() {
  
  if (err_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::elasticjob_service::ErrorCode>(GetArena());
    err_code_ = p;
  }
  return err_code_;
}
inline ::elasticjob_service::ErrorCode* SendStatsReply::mutable_err_code() {
  // @@protoc_insertion_point(field_mutable:elasticjob_service.SendStatsReply.err_code)
  return _internal_mutable_err_code();
}
inline void SendStatsReply::set_allocated_err_code(::elasticjob_service::ErrorCode* err_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete err_code_;
  }
  if (err_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(err_code);
    if (message_arena != submessage_arena) {
      err_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, err_code, submessage_arena);
    }
    
  } else {
    
  }
  err_code_ = err_code;
  // @@protoc_insertion_point(field_set_allocated:elasticjob_service.SendStatsReply.err_code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace elasticjob_service

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_elasticjob_5fworker_5fservice_2eproto
