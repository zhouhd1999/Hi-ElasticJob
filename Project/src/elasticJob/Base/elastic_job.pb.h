// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: elastic_job.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_elastic_5fjob_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_elastic_5fjob_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_elastic_5fjob_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_elastic_5fjob_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_elastic_5fjob_2eproto;
namespace elasticjob {
namespace proto {
class AddJobReply;
class AddJobReplyDefaultTypeInternal;
extern AddJobReplyDefaultTypeInternal _AddJobReply_default_instance_;
class AddJobRequest;
class AddJobRequestDefaultTypeInternal;
extern AddJobRequestDefaultTypeInternal _AddJobRequest_default_instance_;
class DeleteJobReply;
class DeleteJobReplyDefaultTypeInternal;
extern DeleteJobReplyDefaultTypeInternal _DeleteJobReply_default_instance_;
class DeleteJobRequest;
class DeleteJobRequestDefaultTypeInternal;
extern DeleteJobRequestDefaultTypeInternal _DeleteJobRequest_default_instance_;
class ErrorCode;
class ErrorCodeDefaultTypeInternal;
extern ErrorCodeDefaultTypeInternal _ErrorCode_default_instance_;
class GetJobResultReply;
class GetJobResultReplyDefaultTypeInternal;
extern GetJobResultReplyDefaultTypeInternal _GetJobResultReply_default_instance_;
class GetJobResultRequest;
class GetJobResultRequestDefaultTypeInternal;
extern GetJobResultRequestDefaultTypeInternal _GetJobResultRequest_default_instance_;
class JobInfo;
class JobInfoDefaultTypeInternal;
extern JobInfoDefaultTypeInternal _JobInfo_default_instance_;
class JobResult;
class JobResultDefaultTypeInternal;
extern JobResultDefaultTypeInternal _JobResult_default_instance_;
class PingRequest;
class PingRequestDefaultTypeInternal;
extern PingRequestDefaultTypeInternal _PingRequest_default_instance_;
class PongResponse;
class PongResponseDefaultTypeInternal;
extern PongResponseDefaultTypeInternal _PongResponse_default_instance_;
}  // namespace proto
}  // namespace elasticjob
PROTOBUF_NAMESPACE_OPEN
template<> ::elasticjob::proto::AddJobReply* Arena::CreateMaybeMessage<::elasticjob::proto::AddJobReply>(Arena*);
template<> ::elasticjob::proto::AddJobRequest* Arena::CreateMaybeMessage<::elasticjob::proto::AddJobRequest>(Arena*);
template<> ::elasticjob::proto::DeleteJobReply* Arena::CreateMaybeMessage<::elasticjob::proto::DeleteJobReply>(Arena*);
template<> ::elasticjob::proto::DeleteJobRequest* Arena::CreateMaybeMessage<::elasticjob::proto::DeleteJobRequest>(Arena*);
template<> ::elasticjob::proto::ErrorCode* Arena::CreateMaybeMessage<::elasticjob::proto::ErrorCode>(Arena*);
template<> ::elasticjob::proto::GetJobResultReply* Arena::CreateMaybeMessage<::elasticjob::proto::GetJobResultReply>(Arena*);
template<> ::elasticjob::proto::GetJobResultRequest* Arena::CreateMaybeMessage<::elasticjob::proto::GetJobResultRequest>(Arena*);
template<> ::elasticjob::proto::JobInfo* Arena::CreateMaybeMessage<::elasticjob::proto::JobInfo>(Arena*);
template<> ::elasticjob::proto::JobResult* Arena::CreateMaybeMessage<::elasticjob::proto::JobResult>(Arena*);
template<> ::elasticjob::proto::PingRequest* Arena::CreateMaybeMessage<::elasticjob::proto::PingRequest>(Arena*);
template<> ::elasticjob::proto::PongResponse* Arena::CreateMaybeMessage<::elasticjob::proto::PongResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace elasticjob {
namespace proto {

// ===================================================================

class ErrorCode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:elasticjob.proto.ErrorCode) */ {
 public:
  inline ErrorCode() : ErrorCode(nullptr) {}
  virtual ~ErrorCode();

  ErrorCode(const ErrorCode& from);
  ErrorCode(ErrorCode&& from) noexcept
    : ErrorCode() {
    *this = ::std::move(from);
  }

  inline ErrorCode& operator=(const ErrorCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrorCode& operator=(ErrorCode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ErrorCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ErrorCode* internal_default_instance() {
    return reinterpret_cast<const ErrorCode*>(
               &_ErrorCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ErrorCode& a, ErrorCode& b) {
    a.Swap(&b);
  }
  inline void Swap(ErrorCode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErrorCode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ErrorCode* New() const final {
    return CreateMaybeMessage<ErrorCode>(nullptr);
  }

  ErrorCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ErrorCode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ErrorCode& from);
  void MergeFrom(const ErrorCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "elasticjob.proto.ErrorCode";
  }
  protected:
  explicit ErrorCode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elastic_5fjob_2eproto);
    return ::descriptor_table_elastic_5fjob_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // string code = 1;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:elasticjob.proto.ErrorCode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_elastic_5fjob_2eproto;
};
// -------------------------------------------------------------------

class JobInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:elasticjob.proto.JobInfo) */ {
 public:
  inline JobInfo() : JobInfo(nullptr) {}
  virtual ~JobInfo();

  JobInfo(const JobInfo& from);
  JobInfo(JobInfo&& from) noexcept
    : JobInfo() {
    *this = ::std::move(from);
  }

  inline JobInfo& operator=(const JobInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobInfo& operator=(JobInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JobInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobInfo* internal_default_instance() {
    return reinterpret_cast<const JobInfo*>(
               &_JobInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(JobInfo& a, JobInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(JobInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JobInfo* New() const final {
    return CreateMaybeMessage<JobInfo>(nullptr);
  }

  JobInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JobInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JobInfo& from);
  void MergeFrom(const JobInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "elasticjob.proto.JobInfo";
  }
  protected:
  explicit JobInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elastic_5fjob_2eproto);
    return ::descriptor_table_elastic_5fjob_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kCategoryFieldNumber = 3,
    kParamFieldNumber = 5,
    kSheduleParamFieldNumber = 7,
    kParallelStrategyFieldNumber = 8,
    kRetryStrategyFieldNumber = 9,
    kPriorityFieldNumber = 4,
    kSheduleTypeFieldNumber = 6,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string category = 3;
  void clear_category();
  const std::string& category() const;
  void set_category(const std::string& value);
  void set_category(std::string&& value);
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  std::string* mutable_category();
  std::string* release_category();
  void set_allocated_category(std::string* category);
  private:
  const std::string& _internal_category() const;
  void _internal_set_category(const std::string& value);
  std::string* _internal_mutable_category();
  public:

  // string param = 5;
  void clear_param();
  const std::string& param() const;
  void set_param(const std::string& value);
  void set_param(std::string&& value);
  void set_param(const char* value);
  void set_param(const char* value, size_t size);
  std::string* mutable_param();
  std::string* release_param();
  void set_allocated_param(std::string* param);
  private:
  const std::string& _internal_param() const;
  void _internal_set_param(const std::string& value);
  std::string* _internal_mutable_param();
  public:

  // string shedule_param = 7;
  void clear_shedule_param();
  const std::string& shedule_param() const;
  void set_shedule_param(const std::string& value);
  void set_shedule_param(std::string&& value);
  void set_shedule_param(const char* value);
  void set_shedule_param(const char* value, size_t size);
  std::string* mutable_shedule_param();
  std::string* release_shedule_param();
  void set_allocated_shedule_param(std::string* shedule_param);
  private:
  const std::string& _internal_shedule_param() const;
  void _internal_set_shedule_param(const std::string& value);
  std::string* _internal_mutable_shedule_param();
  public:

  // string parallel_strategy = 8;
  void clear_parallel_strategy();
  const std::string& parallel_strategy() const;
  void set_parallel_strategy(const std::string& value);
  void set_parallel_strategy(std::string&& value);
  void set_parallel_strategy(const char* value);
  void set_parallel_strategy(const char* value, size_t size);
  std::string* mutable_parallel_strategy();
  std::string* release_parallel_strategy();
  void set_allocated_parallel_strategy(std::string* parallel_strategy);
  private:
  const std::string& _internal_parallel_strategy() const;
  void _internal_set_parallel_strategy(const std::string& value);
  std::string* _internal_mutable_parallel_strategy();
  public:

  // string retry_strategy = 9;
  void clear_retry_strategy();
  const std::string& retry_strategy() const;
  void set_retry_strategy(const std::string& value);
  void set_retry_strategy(std::string&& value);
  void set_retry_strategy(const char* value);
  void set_retry_strategy(const char* value, size_t size);
  std::string* mutable_retry_strategy();
  std::string* release_retry_strategy();
  void set_allocated_retry_strategy(std::string* retry_strategy);
  private:
  const std::string& _internal_retry_strategy() const;
  void _internal_set_retry_strategy(const std::string& value);
  std::string* _internal_mutable_retry_strategy();
  public:

  // int32 priority = 4;
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_priority() const;
  void _internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 shedule_type = 6;
  void clear_shedule_type();
  ::PROTOBUF_NAMESPACE_ID::int32 shedule_type() const;
  void set_shedule_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shedule_type() const;
  void _internal_set_shedule_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:elasticjob.proto.JobInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shedule_param_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parallel_strategy_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr retry_strategy_;
  ::PROTOBUF_NAMESPACE_ID::int32 priority_;
  ::PROTOBUF_NAMESPACE_ID::int32 shedule_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_elastic_5fjob_2eproto;
};
// -------------------------------------------------------------------

class JobResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:elasticjob.proto.JobResult) */ {
 public:
  inline JobResult() : JobResult(nullptr) {}
  virtual ~JobResult();

  JobResult(const JobResult& from);
  JobResult(JobResult&& from) noexcept
    : JobResult() {
    *this = ::std::move(from);
  }

  inline JobResult& operator=(const JobResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobResult& operator=(JobResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JobResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobResult* internal_default_instance() {
    return reinterpret_cast<const JobResult*>(
               &_JobResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(JobResult& a, JobResult& b) {
    a.Swap(&b);
  }
  inline void Swap(JobResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JobResult* New() const final {
    return CreateMaybeMessage<JobResult>(nullptr);
  }

  JobResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JobResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JobResult& from);
  void MergeFrom(const JobResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "elasticjob.proto.JobResult";
  }
  protected:
  explicit JobResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elastic_5fjob_2eproto);
    return ::descriptor_table_elastic_5fjob_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kJobIdFieldNumber = 2,
    kResultFieldNumber = 4,
    kErrorCodeFieldNumber = 5,
    kStatusFieldNumber = 3,
    kFailedCountFieldNumber = 8,
    kStartTimeFieldNumber = 6,
    kFinishedTimeFieldNumber = 7,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string job_id = 2;
  void clear_job_id();
  const std::string& job_id() const;
  void set_job_id(const std::string& value);
  void set_job_id(std::string&& value);
  void set_job_id(const char* value);
  void set_job_id(const char* value, size_t size);
  std::string* mutable_job_id();
  std::string* release_job_id();
  void set_allocated_job_id(std::string* job_id);
  private:
  const std::string& _internal_job_id() const;
  void _internal_set_job_id(const std::string& value);
  std::string* _internal_mutable_job_id();
  public:

  // string result = 4;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // .elasticjob.proto.ErrorCode error_code = 5;
  bool has_error_code() const;
  private:
  bool _internal_has_error_code() const;
  public:
  void clear_error_code();
  const ::elasticjob::proto::ErrorCode& error_code() const;
  ::elasticjob::proto::ErrorCode* release_error_code();
  ::elasticjob::proto::ErrorCode* mutable_error_code();
  void set_allocated_error_code(::elasticjob::proto::ErrorCode* error_code);
  private:
  const ::elasticjob::proto::ErrorCode& _internal_error_code() const;
  ::elasticjob::proto::ErrorCode* _internal_mutable_error_code();
  public:
  void unsafe_arena_set_allocated_error_code(
      ::elasticjob::proto::ErrorCode* error_code);
  ::elasticjob::proto::ErrorCode* unsafe_arena_release_error_code();

  // int32 status = 3;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 failed_count = 8;
  void clear_failed_count();
  ::PROTOBUF_NAMESPACE_ID::int32 failed_count() const;
  void set_failed_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_failed_count() const;
  void _internal_set_failed_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 start_time = 6;
  void clear_start_time();
  ::PROTOBUF_NAMESPACE_ID::int64 start_time() const;
  void set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_start_time() const;
  void _internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 finished_time = 7;
  void clear_finished_time();
  ::PROTOBUF_NAMESPACE_ID::int64 finished_time() const;
  void set_finished_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_finished_time() const;
  void _internal_set_finished_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:elasticjob.proto.JobResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr job_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  ::elasticjob::proto::ErrorCode* error_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 failed_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 finished_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_elastic_5fjob_2eproto;
};
// -------------------------------------------------------------------

class PingRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:elasticjob.proto.PingRequest) */ {
 public:
  inline PingRequest() : PingRequest(nullptr) {}
  virtual ~PingRequest();

  PingRequest(const PingRequest& from);
  PingRequest(PingRequest&& from) noexcept
    : PingRequest() {
    *this = ::std::move(from);
  }

  inline PingRequest& operator=(const PingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingRequest& operator=(PingRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PingRequest* internal_default_instance() {
    return reinterpret_cast<const PingRequest*>(
               &_PingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PingRequest& a, PingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PingRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PingRequest* New() const final {
    return CreateMaybeMessage<PingRequest>(nullptr);
  }

  PingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PingRequest& from);
  void MergeFrom(const PingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "elasticjob.proto.PingRequest";
  }
  protected:
  explicit PingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elastic_5fjob_2eproto);
    return ::descriptor_table_elastic_5fjob_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:elasticjob.proto.PingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_elastic_5fjob_2eproto;
};
// -------------------------------------------------------------------

class PongResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:elasticjob.proto.PongResponse) */ {
 public:
  inline PongResponse() : PongResponse(nullptr) {}
  virtual ~PongResponse();

  PongResponse(const PongResponse& from);
  PongResponse(PongResponse&& from) noexcept
    : PongResponse() {
    *this = ::std::move(from);
  }

  inline PongResponse& operator=(const PongResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PongResponse& operator=(PongResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PongResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PongResponse* internal_default_instance() {
    return reinterpret_cast<const PongResponse*>(
               &_PongResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PongResponse& a, PongResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PongResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PongResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PongResponse* New() const final {
    return CreateMaybeMessage<PongResponse>(nullptr);
  }

  PongResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PongResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PongResponse& from);
  void MergeFrom(const PongResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PongResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "elasticjob.proto.PongResponse";
  }
  protected:
  explicit PongResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elastic_5fjob_2eproto);
    return ::descriptor_table_elastic_5fjob_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:elasticjob.proto.PongResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_elastic_5fjob_2eproto;
};
// -------------------------------------------------------------------

class AddJobRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:elasticjob.proto.AddJobRequest) */ {
 public:
  inline AddJobRequest() : AddJobRequest(nullptr) {}
  virtual ~AddJobRequest();

  AddJobRequest(const AddJobRequest& from);
  AddJobRequest(AddJobRequest&& from) noexcept
    : AddJobRequest() {
    *this = ::std::move(from);
  }

  inline AddJobRequest& operator=(const AddJobRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddJobRequest& operator=(AddJobRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddJobRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddJobRequest* internal_default_instance() {
    return reinterpret_cast<const AddJobRequest*>(
               &_AddJobRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AddJobRequest& a, AddJobRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddJobRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddJobRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddJobRequest* New() const final {
    return CreateMaybeMessage<AddJobRequest>(nullptr);
  }

  AddJobRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddJobRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddJobRequest& from);
  void MergeFrom(const AddJobRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddJobRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "elasticjob.proto.AddJobRequest";
  }
  protected:
  explicit AddJobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elastic_5fjob_2eproto);
    return ::descriptor_table_elastic_5fjob_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJobInfoFieldNumber = 1,
  };
  // .elasticjob.proto.JobInfo job_info = 1;
  bool has_job_info() const;
  private:
  bool _internal_has_job_info() const;
  public:
  void clear_job_info();
  const ::elasticjob::proto::JobInfo& job_info() const;
  ::elasticjob::proto::JobInfo* release_job_info();
  ::elasticjob::proto::JobInfo* mutable_job_info();
  void set_allocated_job_info(::elasticjob::proto::JobInfo* job_info);
  private:
  const ::elasticjob::proto::JobInfo& _internal_job_info() const;
  ::elasticjob::proto::JobInfo* _internal_mutable_job_info();
  public:
  void unsafe_arena_set_allocated_job_info(
      ::elasticjob::proto::JobInfo* job_info);
  ::elasticjob::proto::JobInfo* unsafe_arena_release_job_info();

  // @@protoc_insertion_point(class_scope:elasticjob.proto.AddJobRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::elasticjob::proto::JobInfo* job_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_elastic_5fjob_2eproto;
};
// -------------------------------------------------------------------

class AddJobReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:elasticjob.proto.AddJobReply) */ {
 public:
  inline AddJobReply() : AddJobReply(nullptr) {}
  virtual ~AddJobReply();

  AddJobReply(const AddJobReply& from);
  AddJobReply(AddJobReply&& from) noexcept
    : AddJobReply() {
    *this = ::std::move(from);
  }

  inline AddJobReply& operator=(const AddJobReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddJobReply& operator=(AddJobReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddJobReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddJobReply* internal_default_instance() {
    return reinterpret_cast<const AddJobReply*>(
               &_AddJobReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AddJobReply& a, AddJobReply& b) {
    a.Swap(&b);
  }
  inline void Swap(AddJobReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddJobReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddJobReply* New() const final {
    return CreateMaybeMessage<AddJobReply>(nullptr);
  }

  AddJobReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddJobReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddJobReply& from);
  void MergeFrom(const AddJobReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddJobReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "elasticjob.proto.AddJobReply";
  }
  protected:
  explicit AddJobReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elastic_5fjob_2eproto);
    return ::descriptor_table_elastic_5fjob_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kErrCodeFieldNumber = 1,
  };
  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .elasticjob.proto.ErrorCode err_code = 1;
  bool has_err_code() const;
  private:
  bool _internal_has_err_code() const;
  public:
  void clear_err_code();
  const ::elasticjob::proto::ErrorCode& err_code() const;
  ::elasticjob::proto::ErrorCode* release_err_code();
  ::elasticjob::proto::ErrorCode* mutable_err_code();
  void set_allocated_err_code(::elasticjob::proto::ErrorCode* err_code);
  private:
  const ::elasticjob::proto::ErrorCode& _internal_err_code() const;
  ::elasticjob::proto::ErrorCode* _internal_mutable_err_code();
  public:
  void unsafe_arena_set_allocated_err_code(
      ::elasticjob::proto::ErrorCode* err_code);
  ::elasticjob::proto::ErrorCode* unsafe_arena_release_err_code();

  // @@protoc_insertion_point(class_scope:elasticjob.proto.AddJobReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::elasticjob::proto::ErrorCode* err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_elastic_5fjob_2eproto;
};
// -------------------------------------------------------------------

class DeleteJobRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:elasticjob.proto.DeleteJobRequest) */ {
 public:
  inline DeleteJobRequest() : DeleteJobRequest(nullptr) {}
  virtual ~DeleteJobRequest();

  DeleteJobRequest(const DeleteJobRequest& from);
  DeleteJobRequest(DeleteJobRequest&& from) noexcept
    : DeleteJobRequest() {
    *this = ::std::move(from);
  }

  inline DeleteJobRequest& operator=(const DeleteJobRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteJobRequest& operator=(DeleteJobRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteJobRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteJobRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteJobRequest*>(
               &_DeleteJobRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteJobRequest& a, DeleteJobRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteJobRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteJobRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteJobRequest* New() const final {
    return CreateMaybeMessage<DeleteJobRequest>(nullptr);
  }

  DeleteJobRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteJobRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteJobRequest& from);
  void MergeFrom(const DeleteJobRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteJobRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "elasticjob.proto.DeleteJobRequest";
  }
  protected:
  explicit DeleteJobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elastic_5fjob_2eproto);
    return ::descriptor_table_elastic_5fjob_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:elasticjob.proto.DeleteJobRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_elastic_5fjob_2eproto;
};
// -------------------------------------------------------------------

class DeleteJobReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:elasticjob.proto.DeleteJobReply) */ {
 public:
  inline DeleteJobReply() : DeleteJobReply(nullptr) {}
  virtual ~DeleteJobReply();

  DeleteJobReply(const DeleteJobReply& from);
  DeleteJobReply(DeleteJobReply&& from) noexcept
    : DeleteJobReply() {
    *this = ::std::move(from);
  }

  inline DeleteJobReply& operator=(const DeleteJobReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteJobReply& operator=(DeleteJobReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteJobReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteJobReply* internal_default_instance() {
    return reinterpret_cast<const DeleteJobReply*>(
               &_DeleteJobReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DeleteJobReply& a, DeleteJobReply& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteJobReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteJobReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteJobReply* New() const final {
    return CreateMaybeMessage<DeleteJobReply>(nullptr);
  }

  DeleteJobReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteJobReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteJobReply& from);
  void MergeFrom(const DeleteJobReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteJobReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "elasticjob.proto.DeleteJobReply";
  }
  protected:
  explicit DeleteJobReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elastic_5fjob_2eproto);
    return ::descriptor_table_elastic_5fjob_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrCodeFieldNumber = 1,
  };
  // .elasticjob.proto.ErrorCode err_code = 1;
  bool has_err_code() const;
  private:
  bool _internal_has_err_code() const;
  public:
  void clear_err_code();
  const ::elasticjob::proto::ErrorCode& err_code() const;
  ::elasticjob::proto::ErrorCode* release_err_code();
  ::elasticjob::proto::ErrorCode* mutable_err_code();
  void set_allocated_err_code(::elasticjob::proto::ErrorCode* err_code);
  private:
  const ::elasticjob::proto::ErrorCode& _internal_err_code() const;
  ::elasticjob::proto::ErrorCode* _internal_mutable_err_code();
  public:
  void unsafe_arena_set_allocated_err_code(
      ::elasticjob::proto::ErrorCode* err_code);
  ::elasticjob::proto::ErrorCode* unsafe_arena_release_err_code();

  // @@protoc_insertion_point(class_scope:elasticjob.proto.DeleteJobReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::elasticjob::proto::ErrorCode* err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_elastic_5fjob_2eproto;
};
// -------------------------------------------------------------------

class GetJobResultRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:elasticjob.proto.GetJobResultRequest) */ {
 public:
  inline GetJobResultRequest() : GetJobResultRequest(nullptr) {}
  virtual ~GetJobResultRequest();

  GetJobResultRequest(const GetJobResultRequest& from);
  GetJobResultRequest(GetJobResultRequest&& from) noexcept
    : GetJobResultRequest() {
    *this = ::std::move(from);
  }

  inline GetJobResultRequest& operator=(const GetJobResultRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetJobResultRequest& operator=(GetJobResultRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetJobResultRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetJobResultRequest* internal_default_instance() {
    return reinterpret_cast<const GetJobResultRequest*>(
               &_GetJobResultRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetJobResultRequest& a, GetJobResultRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetJobResultRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetJobResultRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetJobResultRequest* New() const final {
    return CreateMaybeMessage<GetJobResultRequest>(nullptr);
  }

  GetJobResultRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetJobResultRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetJobResultRequest& from);
  void MergeFrom(const GetJobResultRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetJobResultRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "elasticjob.proto.GetJobResultRequest";
  }
  protected:
  explicit GetJobResultRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elastic_5fjob_2eproto);
    return ::descriptor_table_elastic_5fjob_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJobIdFieldNumber = 1,
  };
  // string job_id = 1;
  void clear_job_id();
  const std::string& job_id() const;
  void set_job_id(const std::string& value);
  void set_job_id(std::string&& value);
  void set_job_id(const char* value);
  void set_job_id(const char* value, size_t size);
  std::string* mutable_job_id();
  std::string* release_job_id();
  void set_allocated_job_id(std::string* job_id);
  private:
  const std::string& _internal_job_id() const;
  void _internal_set_job_id(const std::string& value);
  std::string* _internal_mutable_job_id();
  public:

  // @@protoc_insertion_point(class_scope:elasticjob.proto.GetJobResultRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr job_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_elastic_5fjob_2eproto;
};
// -------------------------------------------------------------------

class GetJobResultReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:elasticjob.proto.GetJobResultReply) */ {
 public:
  inline GetJobResultReply() : GetJobResultReply(nullptr) {}
  virtual ~GetJobResultReply();

  GetJobResultReply(const GetJobResultReply& from);
  GetJobResultReply(GetJobResultReply&& from) noexcept
    : GetJobResultReply() {
    *this = ::std::move(from);
  }

  inline GetJobResultReply& operator=(const GetJobResultReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetJobResultReply& operator=(GetJobResultReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetJobResultReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetJobResultReply* internal_default_instance() {
    return reinterpret_cast<const GetJobResultReply*>(
               &_GetJobResultReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetJobResultReply& a, GetJobResultReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetJobResultReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetJobResultReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetJobResultReply* New() const final {
    return CreateMaybeMessage<GetJobResultReply>(nullptr);
  }

  GetJobResultReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetJobResultReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetJobResultReply& from);
  void MergeFrom(const GetJobResultReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetJobResultReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "elasticjob.proto.GetJobResultReply";
  }
  protected:
  explicit GetJobResultReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elastic_5fjob_2eproto);
    return ::descriptor_table_elastic_5fjob_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrCodeFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // .elasticjob.proto.ErrorCode err_code = 1;
  bool has_err_code() const;
  private:
  bool _internal_has_err_code() const;
  public:
  void clear_err_code();
  const ::elasticjob::proto::ErrorCode& err_code() const;
  ::elasticjob::proto::ErrorCode* release_err_code();
  ::elasticjob::proto::ErrorCode* mutable_err_code();
  void set_allocated_err_code(::elasticjob::proto::ErrorCode* err_code);
  private:
  const ::elasticjob::proto::ErrorCode& _internal_err_code() const;
  ::elasticjob::proto::ErrorCode* _internal_mutable_err_code();
  public:
  void unsafe_arena_set_allocated_err_code(
      ::elasticjob::proto::ErrorCode* err_code);
  ::elasticjob::proto::ErrorCode* unsafe_arena_release_err_code();

  // .elasticjob.proto.JobResult result = 2;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::elasticjob::proto::JobResult& result() const;
  ::elasticjob::proto::JobResult* release_result();
  ::elasticjob::proto::JobResult* mutable_result();
  void set_allocated_result(::elasticjob::proto::JobResult* result);
  private:
  const ::elasticjob::proto::JobResult& _internal_result() const;
  ::elasticjob::proto::JobResult* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::elasticjob::proto::JobResult* result);
  ::elasticjob::proto::JobResult* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:elasticjob.proto.GetJobResultReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::elasticjob::proto::ErrorCode* err_code_;
  ::elasticjob::proto::JobResult* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_elastic_5fjob_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ErrorCode

// string code = 1;
inline void ErrorCode::clear_code() {
  code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ErrorCode::code() const {
  // @@protoc_insertion_point(field_get:elasticjob.proto.ErrorCode.code)
  return _internal_code();
}
inline void ErrorCode::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:elasticjob.proto.ErrorCode.code)
}
inline std::string* ErrorCode::mutable_code() {
  // @@protoc_insertion_point(field_mutable:elasticjob.proto.ErrorCode.code)
  return _internal_mutable_code();
}
inline const std::string& ErrorCode::_internal_code() const {
  return code_.Get();
}
inline void ErrorCode::_internal_set_code(const std::string& value) {
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ErrorCode::set_code(std::string&& value) {
  
  code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:elasticjob.proto.ErrorCode.code)
}
inline void ErrorCode::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:elasticjob.proto.ErrorCode.code)
}
inline void ErrorCode::set_code(const char* value,
    size_t size) {
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:elasticjob.proto.ErrorCode.code)
}
inline std::string* ErrorCode::_internal_mutable_code() {
  
  return code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ErrorCode::release_code() {
  // @@protoc_insertion_point(field_release:elasticjob.proto.ErrorCode.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ErrorCode::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:elasticjob.proto.ErrorCode.code)
}

// string message = 2;
inline void ErrorCode::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ErrorCode::message() const {
  // @@protoc_insertion_point(field_get:elasticjob.proto.ErrorCode.message)
  return _internal_message();
}
inline void ErrorCode::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:elasticjob.proto.ErrorCode.message)
}
inline std::string* ErrorCode::mutable_message() {
  // @@protoc_insertion_point(field_mutable:elasticjob.proto.ErrorCode.message)
  return _internal_mutable_message();
}
inline const std::string& ErrorCode::_internal_message() const {
  return message_.Get();
}
inline void ErrorCode::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ErrorCode::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:elasticjob.proto.ErrorCode.message)
}
inline void ErrorCode::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:elasticjob.proto.ErrorCode.message)
}
inline void ErrorCode::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:elasticjob.proto.ErrorCode.message)
}
inline std::string* ErrorCode::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ErrorCode::release_message() {
  // @@protoc_insertion_point(field_release:elasticjob.proto.ErrorCode.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ErrorCode::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:elasticjob.proto.ErrorCode.message)
}

// -------------------------------------------------------------------

// JobInfo

// string id = 1;
inline void JobInfo::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JobInfo::id() const {
  // @@protoc_insertion_point(field_get:elasticjob.proto.JobInfo.id)
  return _internal_id();
}
inline void JobInfo::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:elasticjob.proto.JobInfo.id)
}
inline std::string* JobInfo::mutable_id() {
  // @@protoc_insertion_point(field_mutable:elasticjob.proto.JobInfo.id)
  return _internal_mutable_id();
}
inline const std::string& JobInfo::_internal_id() const {
  return id_.Get();
}
inline void JobInfo::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JobInfo::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:elasticjob.proto.JobInfo.id)
}
inline void JobInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:elasticjob.proto.JobInfo.id)
}
inline void JobInfo::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:elasticjob.proto.JobInfo.id)
}
inline std::string* JobInfo::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JobInfo::release_id() {
  // @@protoc_insertion_point(field_release:elasticjob.proto.JobInfo.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JobInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:elasticjob.proto.JobInfo.id)
}

// string name = 2;
inline void JobInfo::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JobInfo::name() const {
  // @@protoc_insertion_point(field_get:elasticjob.proto.JobInfo.name)
  return _internal_name();
}
inline void JobInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:elasticjob.proto.JobInfo.name)
}
inline std::string* JobInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:elasticjob.proto.JobInfo.name)
  return _internal_mutable_name();
}
inline const std::string& JobInfo::_internal_name() const {
  return name_.Get();
}
inline void JobInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JobInfo::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:elasticjob.proto.JobInfo.name)
}
inline void JobInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:elasticjob.proto.JobInfo.name)
}
inline void JobInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:elasticjob.proto.JobInfo.name)
}
inline std::string* JobInfo::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JobInfo::release_name() {
  // @@protoc_insertion_point(field_release:elasticjob.proto.JobInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JobInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:elasticjob.proto.JobInfo.name)
}

// string category = 3;
inline void JobInfo::clear_category() {
  category_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JobInfo::category() const {
  // @@protoc_insertion_point(field_get:elasticjob.proto.JobInfo.category)
  return _internal_category();
}
inline void JobInfo::set_category(const std::string& value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:elasticjob.proto.JobInfo.category)
}
inline std::string* JobInfo::mutable_category() {
  // @@protoc_insertion_point(field_mutable:elasticjob.proto.JobInfo.category)
  return _internal_mutable_category();
}
inline const std::string& JobInfo::_internal_category() const {
  return category_.Get();
}
inline void JobInfo::_internal_set_category(const std::string& value) {
  
  category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JobInfo::set_category(std::string&& value) {
  
  category_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:elasticjob.proto.JobInfo.category)
}
inline void JobInfo::set_category(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:elasticjob.proto.JobInfo.category)
}
inline void JobInfo::set_category(const char* value,
    size_t size) {
  
  category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:elasticjob.proto.JobInfo.category)
}
inline std::string* JobInfo::_internal_mutable_category() {
  
  return category_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JobInfo::release_category() {
  // @@protoc_insertion_point(field_release:elasticjob.proto.JobInfo.category)
  return category_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JobInfo::set_allocated_category(std::string* category) {
  if (category != nullptr) {
    
  } else {
    
  }
  category_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), category,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:elasticjob.proto.JobInfo.category)
}

// int32 priority = 4;
inline void JobInfo::clear_priority() {
  priority_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JobInfo::_internal_priority() const {
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JobInfo::priority() const {
  // @@protoc_insertion_point(field_get:elasticjob.proto.JobInfo.priority)
  return _internal_priority();
}
inline void JobInfo::_internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  priority_ = value;
}
inline void JobInfo::set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:elasticjob.proto.JobInfo.priority)
}

// string param = 5;
inline void JobInfo::clear_param() {
  param_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JobInfo::param() const {
  // @@protoc_insertion_point(field_get:elasticjob.proto.JobInfo.param)
  return _internal_param();
}
inline void JobInfo::set_param(const std::string& value) {
  _internal_set_param(value);
  // @@protoc_insertion_point(field_set:elasticjob.proto.JobInfo.param)
}
inline std::string* JobInfo::mutable_param() {
  // @@protoc_insertion_point(field_mutable:elasticjob.proto.JobInfo.param)
  return _internal_mutable_param();
}
inline const std::string& JobInfo::_internal_param() const {
  return param_.Get();
}
inline void JobInfo::_internal_set_param(const std::string& value) {
  
  param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JobInfo::set_param(std::string&& value) {
  
  param_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:elasticjob.proto.JobInfo.param)
}
inline void JobInfo::set_param(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:elasticjob.proto.JobInfo.param)
}
inline void JobInfo::set_param(const char* value,
    size_t size) {
  
  param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:elasticjob.proto.JobInfo.param)
}
inline std::string* JobInfo::_internal_mutable_param() {
  
  return param_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JobInfo::release_param() {
  // @@protoc_insertion_point(field_release:elasticjob.proto.JobInfo.param)
  return param_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JobInfo::set_allocated_param(std::string* param) {
  if (param != nullptr) {
    
  } else {
    
  }
  param_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:elasticjob.proto.JobInfo.param)
}

// int32 shedule_type = 6;
inline void JobInfo::clear_shedule_type() {
  shedule_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JobInfo::_internal_shedule_type() const {
  return shedule_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JobInfo::shedule_type() const {
  // @@protoc_insertion_point(field_get:elasticjob.proto.JobInfo.shedule_type)
  return _internal_shedule_type();
}
inline void JobInfo::_internal_set_shedule_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  shedule_type_ = value;
}
inline void JobInfo::set_shedule_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_shedule_type(value);
  // @@protoc_insertion_point(field_set:elasticjob.proto.JobInfo.shedule_type)
}

// string shedule_param = 7;
inline void JobInfo::clear_shedule_param() {
  shedule_param_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JobInfo::shedule_param() const {
  // @@protoc_insertion_point(field_get:elasticjob.proto.JobInfo.shedule_param)
  return _internal_shedule_param();
}
inline void JobInfo::set_shedule_param(const std::string& value) {
  _internal_set_shedule_param(value);
  // @@protoc_insertion_point(field_set:elasticjob.proto.JobInfo.shedule_param)
}
inline std::string* JobInfo::mutable_shedule_param() {
  // @@protoc_insertion_point(field_mutable:elasticjob.proto.JobInfo.shedule_param)
  return _internal_mutable_shedule_param();
}
inline const std::string& JobInfo::_internal_shedule_param() const {
  return shedule_param_.Get();
}
inline void JobInfo::_internal_set_shedule_param(const std::string& value) {
  
  shedule_param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JobInfo::set_shedule_param(std::string&& value) {
  
  shedule_param_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:elasticjob.proto.JobInfo.shedule_param)
}
inline void JobInfo::set_shedule_param(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  shedule_param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:elasticjob.proto.JobInfo.shedule_param)
}
inline void JobInfo::set_shedule_param(const char* value,
    size_t size) {
  
  shedule_param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:elasticjob.proto.JobInfo.shedule_param)
}
inline std::string* JobInfo::_internal_mutable_shedule_param() {
  
  return shedule_param_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JobInfo::release_shedule_param() {
  // @@protoc_insertion_point(field_release:elasticjob.proto.JobInfo.shedule_param)
  return shedule_param_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JobInfo::set_allocated_shedule_param(std::string* shedule_param) {
  if (shedule_param != nullptr) {
    
  } else {
    
  }
  shedule_param_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shedule_param,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:elasticjob.proto.JobInfo.shedule_param)
}

// string parallel_strategy = 8;
inline void JobInfo::clear_parallel_strategy() {
  parallel_strategy_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JobInfo::parallel_strategy() const {
  // @@protoc_insertion_point(field_get:elasticjob.proto.JobInfo.parallel_strategy)
  return _internal_parallel_strategy();
}
inline void JobInfo::set_parallel_strategy(const std::string& value) {
  _internal_set_parallel_strategy(value);
  // @@protoc_insertion_point(field_set:elasticjob.proto.JobInfo.parallel_strategy)
}
inline std::string* JobInfo::mutable_parallel_strategy() {
  // @@protoc_insertion_point(field_mutable:elasticjob.proto.JobInfo.parallel_strategy)
  return _internal_mutable_parallel_strategy();
}
inline const std::string& JobInfo::_internal_parallel_strategy() const {
  return parallel_strategy_.Get();
}
inline void JobInfo::_internal_set_parallel_strategy(const std::string& value) {
  
  parallel_strategy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JobInfo::set_parallel_strategy(std::string&& value) {
  
  parallel_strategy_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:elasticjob.proto.JobInfo.parallel_strategy)
}
inline void JobInfo::set_parallel_strategy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parallel_strategy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:elasticjob.proto.JobInfo.parallel_strategy)
}
inline void JobInfo::set_parallel_strategy(const char* value,
    size_t size) {
  
  parallel_strategy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:elasticjob.proto.JobInfo.parallel_strategy)
}
inline std::string* JobInfo::_internal_mutable_parallel_strategy() {
  
  return parallel_strategy_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JobInfo::release_parallel_strategy() {
  // @@protoc_insertion_point(field_release:elasticjob.proto.JobInfo.parallel_strategy)
  return parallel_strategy_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JobInfo::set_allocated_parallel_strategy(std::string* parallel_strategy) {
  if (parallel_strategy != nullptr) {
    
  } else {
    
  }
  parallel_strategy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parallel_strategy,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:elasticjob.proto.JobInfo.parallel_strategy)
}

// string retry_strategy = 9;
inline void JobInfo::clear_retry_strategy() {
  retry_strategy_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JobInfo::retry_strategy() const {
  // @@protoc_insertion_point(field_get:elasticjob.proto.JobInfo.retry_strategy)
  return _internal_retry_strategy();
}
inline void JobInfo::set_retry_strategy(const std::string& value) {
  _internal_set_retry_strategy(value);
  // @@protoc_insertion_point(field_set:elasticjob.proto.JobInfo.retry_strategy)
}
inline std::string* JobInfo::mutable_retry_strategy() {
  // @@protoc_insertion_point(field_mutable:elasticjob.proto.JobInfo.retry_strategy)
  return _internal_mutable_retry_strategy();
}
inline const std::string& JobInfo::_internal_retry_strategy() const {
  return retry_strategy_.Get();
}
inline void JobInfo::_internal_set_retry_strategy(const std::string& value) {
  
  retry_strategy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JobInfo::set_retry_strategy(std::string&& value) {
  
  retry_strategy_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:elasticjob.proto.JobInfo.retry_strategy)
}
inline void JobInfo::set_retry_strategy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  retry_strategy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:elasticjob.proto.JobInfo.retry_strategy)
}
inline void JobInfo::set_retry_strategy(const char* value,
    size_t size) {
  
  retry_strategy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:elasticjob.proto.JobInfo.retry_strategy)
}
inline std::string* JobInfo::_internal_mutable_retry_strategy() {
  
  return retry_strategy_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JobInfo::release_retry_strategy() {
  // @@protoc_insertion_point(field_release:elasticjob.proto.JobInfo.retry_strategy)
  return retry_strategy_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JobInfo::set_allocated_retry_strategy(std::string* retry_strategy) {
  if (retry_strategy != nullptr) {
    
  } else {
    
  }
  retry_strategy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), retry_strategy,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:elasticjob.proto.JobInfo.retry_strategy)
}

// -------------------------------------------------------------------

// JobResult

// string id = 1;
inline void JobResult::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JobResult::id() const {
  // @@protoc_insertion_point(field_get:elasticjob.proto.JobResult.id)
  return _internal_id();
}
inline void JobResult::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:elasticjob.proto.JobResult.id)
}
inline std::string* JobResult::mutable_id() {
  // @@protoc_insertion_point(field_mutable:elasticjob.proto.JobResult.id)
  return _internal_mutable_id();
}
inline const std::string& JobResult::_internal_id() const {
  return id_.Get();
}
inline void JobResult::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JobResult::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:elasticjob.proto.JobResult.id)
}
inline void JobResult::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:elasticjob.proto.JobResult.id)
}
inline void JobResult::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:elasticjob.proto.JobResult.id)
}
inline std::string* JobResult::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JobResult::release_id() {
  // @@protoc_insertion_point(field_release:elasticjob.proto.JobResult.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JobResult::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:elasticjob.proto.JobResult.id)
}

// string job_id = 2;
inline void JobResult::clear_job_id() {
  job_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JobResult::job_id() const {
  // @@protoc_insertion_point(field_get:elasticjob.proto.JobResult.job_id)
  return _internal_job_id();
}
inline void JobResult::set_job_id(const std::string& value) {
  _internal_set_job_id(value);
  // @@protoc_insertion_point(field_set:elasticjob.proto.JobResult.job_id)
}
inline std::string* JobResult::mutable_job_id() {
  // @@protoc_insertion_point(field_mutable:elasticjob.proto.JobResult.job_id)
  return _internal_mutable_job_id();
}
inline const std::string& JobResult::_internal_job_id() const {
  return job_id_.Get();
}
inline void JobResult::_internal_set_job_id(const std::string& value) {
  
  job_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JobResult::set_job_id(std::string&& value) {
  
  job_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:elasticjob.proto.JobResult.job_id)
}
inline void JobResult::set_job_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  job_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:elasticjob.proto.JobResult.job_id)
}
inline void JobResult::set_job_id(const char* value,
    size_t size) {
  
  job_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:elasticjob.proto.JobResult.job_id)
}
inline std::string* JobResult::_internal_mutable_job_id() {
  
  return job_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JobResult::release_job_id() {
  // @@protoc_insertion_point(field_release:elasticjob.proto.JobResult.job_id)
  return job_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JobResult::set_allocated_job_id(std::string* job_id) {
  if (job_id != nullptr) {
    
  } else {
    
  }
  job_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), job_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:elasticjob.proto.JobResult.job_id)
}

// int32 status = 3;
inline void JobResult::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JobResult::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JobResult::status() const {
  // @@protoc_insertion_point(field_get:elasticjob.proto.JobResult.status)
  return _internal_status();
}
inline void JobResult::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void JobResult::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:elasticjob.proto.JobResult.status)
}

// string result = 4;
inline void JobResult::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JobResult::result() const {
  // @@protoc_insertion_point(field_get:elasticjob.proto.JobResult.result)
  return _internal_result();
}
inline void JobResult::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:elasticjob.proto.JobResult.result)
}
inline std::string* JobResult::mutable_result() {
  // @@protoc_insertion_point(field_mutable:elasticjob.proto.JobResult.result)
  return _internal_mutable_result();
}
inline const std::string& JobResult::_internal_result() const {
  return result_.Get();
}
inline void JobResult::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JobResult::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:elasticjob.proto.JobResult.result)
}
inline void JobResult::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:elasticjob.proto.JobResult.result)
}
inline void JobResult::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:elasticjob.proto.JobResult.result)
}
inline std::string* JobResult::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JobResult::release_result() {
  // @@protoc_insertion_point(field_release:elasticjob.proto.JobResult.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JobResult::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:elasticjob.proto.JobResult.result)
}

// .elasticjob.proto.ErrorCode error_code = 5;
inline bool JobResult::_internal_has_error_code() const {
  return this != internal_default_instance() && error_code_ != nullptr;
}
inline bool JobResult::has_error_code() const {
  return _internal_has_error_code();
}
inline void JobResult::clear_error_code() {
  if (GetArena() == nullptr && error_code_ != nullptr) {
    delete error_code_;
  }
  error_code_ = nullptr;
}
inline const ::elasticjob::proto::ErrorCode& JobResult::_internal_error_code() const {
  const ::elasticjob::proto::ErrorCode* p = error_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::elasticjob::proto::ErrorCode*>(
      &::elasticjob::proto::_ErrorCode_default_instance_);
}
inline const ::elasticjob::proto::ErrorCode& JobResult::error_code() const {
  // @@protoc_insertion_point(field_get:elasticjob.proto.JobResult.error_code)
  return _internal_error_code();
}
inline void JobResult::unsafe_arena_set_allocated_error_code(
    ::elasticjob::proto::ErrorCode* error_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_code_);
  }
  error_code_ = error_code;
  if (error_code) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:elasticjob.proto.JobResult.error_code)
}
inline ::elasticjob::proto::ErrorCode* JobResult::release_error_code() {
  
  ::elasticjob::proto::ErrorCode* temp = error_code_;
  error_code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::elasticjob::proto::ErrorCode* JobResult::unsafe_arena_release_error_code() {
  // @@protoc_insertion_point(field_release:elasticjob.proto.JobResult.error_code)
  
  ::elasticjob::proto::ErrorCode* temp = error_code_;
  error_code_ = nullptr;
  return temp;
}
inline ::elasticjob::proto::ErrorCode* JobResult::_internal_mutable_error_code() {
  
  if (error_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::elasticjob::proto::ErrorCode>(GetArena());
    error_code_ = p;
  }
  return error_code_;
}
inline ::elasticjob::proto::ErrorCode* JobResult::mutable_error_code() {
  // @@protoc_insertion_point(field_mutable:elasticjob.proto.JobResult.error_code)
  return _internal_mutable_error_code();
}
inline void JobResult::set_allocated_error_code(::elasticjob::proto::ErrorCode* error_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete error_code_;
  }
  if (error_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(error_code);
    if (message_arena != submessage_arena) {
      error_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error_code, submessage_arena);
    }
    
  } else {
    
  }
  error_code_ = error_code;
  // @@protoc_insertion_point(field_set_allocated:elasticjob.proto.JobResult.error_code)
}

// int64 start_time = 6;
inline void JobResult::clear_start_time() {
  start_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 JobResult::_internal_start_time() const {
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 JobResult::start_time() const {
  // @@protoc_insertion_point(field_get:elasticjob.proto.JobResult.start_time)
  return _internal_start_time();
}
inline void JobResult::_internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  start_time_ = value;
}
inline void JobResult::set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:elasticjob.proto.JobResult.start_time)
}

// int64 finished_time = 7;
inline void JobResult::clear_finished_time() {
  finished_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 JobResult::_internal_finished_time() const {
  return finished_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 JobResult::finished_time() const {
  // @@protoc_insertion_point(field_get:elasticjob.proto.JobResult.finished_time)
  return _internal_finished_time();
}
inline void JobResult::_internal_set_finished_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  finished_time_ = value;
}
inline void JobResult::set_finished_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_finished_time(value);
  // @@protoc_insertion_point(field_set:elasticjob.proto.JobResult.finished_time)
}

// int32 failed_count = 8;
inline void JobResult::clear_failed_count() {
  failed_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JobResult::_internal_failed_count() const {
  return failed_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JobResult::failed_count() const {
  // @@protoc_insertion_point(field_get:elasticjob.proto.JobResult.failed_count)
  return _internal_failed_count();
}
inline void JobResult::_internal_set_failed_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  failed_count_ = value;
}
inline void JobResult::set_failed_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_failed_count(value);
  // @@protoc_insertion_point(field_set:elasticjob.proto.JobResult.failed_count)
}

// -------------------------------------------------------------------

// PingRequest

// -------------------------------------------------------------------

// PongResponse

// -------------------------------------------------------------------

// AddJobRequest

// .elasticjob.proto.JobInfo job_info = 1;
inline bool AddJobRequest::_internal_has_job_info() const {
  return this != internal_default_instance() && job_info_ != nullptr;
}
inline bool AddJobRequest::has_job_info() const {
  return _internal_has_job_info();
}
inline void AddJobRequest::clear_job_info() {
  if (GetArena() == nullptr && job_info_ != nullptr) {
    delete job_info_;
  }
  job_info_ = nullptr;
}
inline const ::elasticjob::proto::JobInfo& AddJobRequest::_internal_job_info() const {
  const ::elasticjob::proto::JobInfo* p = job_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::elasticjob::proto::JobInfo*>(
      &::elasticjob::proto::_JobInfo_default_instance_);
}
inline const ::elasticjob::proto::JobInfo& AddJobRequest::job_info() const {
  // @@protoc_insertion_point(field_get:elasticjob.proto.AddJobRequest.job_info)
  return _internal_job_info();
}
inline void AddJobRequest::unsafe_arena_set_allocated_job_info(
    ::elasticjob::proto::JobInfo* job_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(job_info_);
  }
  job_info_ = job_info;
  if (job_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:elasticjob.proto.AddJobRequest.job_info)
}
inline ::elasticjob::proto::JobInfo* AddJobRequest::release_job_info() {
  
  ::elasticjob::proto::JobInfo* temp = job_info_;
  job_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::elasticjob::proto::JobInfo* AddJobRequest::unsafe_arena_release_job_info() {
  // @@protoc_insertion_point(field_release:elasticjob.proto.AddJobRequest.job_info)
  
  ::elasticjob::proto::JobInfo* temp = job_info_;
  job_info_ = nullptr;
  return temp;
}
inline ::elasticjob::proto::JobInfo* AddJobRequest::_internal_mutable_job_info() {
  
  if (job_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::elasticjob::proto::JobInfo>(GetArena());
    job_info_ = p;
  }
  return job_info_;
}
inline ::elasticjob::proto::JobInfo* AddJobRequest::mutable_job_info() {
  // @@protoc_insertion_point(field_mutable:elasticjob.proto.AddJobRequest.job_info)
  return _internal_mutable_job_info();
}
inline void AddJobRequest::set_allocated_job_info(::elasticjob::proto::JobInfo* job_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete job_info_;
  }
  if (job_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(job_info);
    if (message_arena != submessage_arena) {
      job_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, job_info, submessage_arena);
    }
    
  } else {
    
  }
  job_info_ = job_info;
  // @@protoc_insertion_point(field_set_allocated:elasticjob.proto.AddJobRequest.job_info)
}

// -------------------------------------------------------------------

// AddJobReply

// .elasticjob.proto.ErrorCode err_code = 1;
inline bool AddJobReply::_internal_has_err_code() const {
  return this != internal_default_instance() && err_code_ != nullptr;
}
inline bool AddJobReply::has_err_code() const {
  return _internal_has_err_code();
}
inline void AddJobReply::clear_err_code() {
  if (GetArena() == nullptr && err_code_ != nullptr) {
    delete err_code_;
  }
  err_code_ = nullptr;
}
inline const ::elasticjob::proto::ErrorCode& AddJobReply::_internal_err_code() const {
  const ::elasticjob::proto::ErrorCode* p = err_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::elasticjob::proto::ErrorCode*>(
      &::elasticjob::proto::_ErrorCode_default_instance_);
}
inline const ::elasticjob::proto::ErrorCode& AddJobReply::err_code() const {
  // @@protoc_insertion_point(field_get:elasticjob.proto.AddJobReply.err_code)
  return _internal_err_code();
}
inline void AddJobReply::unsafe_arena_set_allocated_err_code(
    ::elasticjob::proto::ErrorCode* err_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(err_code_);
  }
  err_code_ = err_code;
  if (err_code) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:elasticjob.proto.AddJobReply.err_code)
}
inline ::elasticjob::proto::ErrorCode* AddJobReply::release_err_code() {
  
  ::elasticjob::proto::ErrorCode* temp = err_code_;
  err_code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::elasticjob::proto::ErrorCode* AddJobReply::unsafe_arena_release_err_code() {
  // @@protoc_insertion_point(field_release:elasticjob.proto.AddJobReply.err_code)
  
  ::elasticjob::proto::ErrorCode* temp = err_code_;
  err_code_ = nullptr;
  return temp;
}
inline ::elasticjob::proto::ErrorCode* AddJobReply::_internal_mutable_err_code() {
  
  if (err_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::elasticjob::proto::ErrorCode>(GetArena());
    err_code_ = p;
  }
  return err_code_;
}
inline ::elasticjob::proto::ErrorCode* AddJobReply::mutable_err_code() {
  // @@protoc_insertion_point(field_mutable:elasticjob.proto.AddJobReply.err_code)
  return _internal_mutable_err_code();
}
inline void AddJobReply::set_allocated_err_code(::elasticjob::proto::ErrorCode* err_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete err_code_;
  }
  if (err_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(err_code);
    if (message_arena != submessage_arena) {
      err_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, err_code, submessage_arena);
    }
    
  } else {
    
  }
  err_code_ = err_code;
  // @@protoc_insertion_point(field_set_allocated:elasticjob.proto.AddJobReply.err_code)
}

// string id = 2;
inline void AddJobReply::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddJobReply::id() const {
  // @@protoc_insertion_point(field_get:elasticjob.proto.AddJobReply.id)
  return _internal_id();
}
inline void AddJobReply::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:elasticjob.proto.AddJobReply.id)
}
inline std::string* AddJobReply::mutable_id() {
  // @@protoc_insertion_point(field_mutable:elasticjob.proto.AddJobReply.id)
  return _internal_mutable_id();
}
inline const std::string& AddJobReply::_internal_id() const {
  return id_.Get();
}
inline void AddJobReply::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddJobReply::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:elasticjob.proto.AddJobReply.id)
}
inline void AddJobReply::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:elasticjob.proto.AddJobReply.id)
}
inline void AddJobReply::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:elasticjob.proto.AddJobReply.id)
}
inline std::string* AddJobReply::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddJobReply::release_id() {
  // @@protoc_insertion_point(field_release:elasticjob.proto.AddJobReply.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddJobReply::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:elasticjob.proto.AddJobReply.id)
}

// -------------------------------------------------------------------

// DeleteJobRequest

// string id = 1;
inline void DeleteJobRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteJobRequest::id() const {
  // @@protoc_insertion_point(field_get:elasticjob.proto.DeleteJobRequest.id)
  return _internal_id();
}
inline void DeleteJobRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:elasticjob.proto.DeleteJobRequest.id)
}
inline std::string* DeleteJobRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:elasticjob.proto.DeleteJobRequest.id)
  return _internal_mutable_id();
}
inline const std::string& DeleteJobRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteJobRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteJobRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:elasticjob.proto.DeleteJobRequest.id)
}
inline void DeleteJobRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:elasticjob.proto.DeleteJobRequest.id)
}
inline void DeleteJobRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:elasticjob.proto.DeleteJobRequest.id)
}
inline std::string* DeleteJobRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteJobRequest::release_id() {
  // @@protoc_insertion_point(field_release:elasticjob.proto.DeleteJobRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteJobRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:elasticjob.proto.DeleteJobRequest.id)
}

// string name = 2;
inline void DeleteJobRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteJobRequest::name() const {
  // @@protoc_insertion_point(field_get:elasticjob.proto.DeleteJobRequest.name)
  return _internal_name();
}
inline void DeleteJobRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:elasticjob.proto.DeleteJobRequest.name)
}
inline std::string* DeleteJobRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:elasticjob.proto.DeleteJobRequest.name)
  return _internal_mutable_name();
}
inline const std::string& DeleteJobRequest::_internal_name() const {
  return name_.Get();
}
inline void DeleteJobRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteJobRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:elasticjob.proto.DeleteJobRequest.name)
}
inline void DeleteJobRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:elasticjob.proto.DeleteJobRequest.name)
}
inline void DeleteJobRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:elasticjob.proto.DeleteJobRequest.name)
}
inline std::string* DeleteJobRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteJobRequest::release_name() {
  // @@protoc_insertion_point(field_release:elasticjob.proto.DeleteJobRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteJobRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:elasticjob.proto.DeleteJobRequest.name)
}

// -------------------------------------------------------------------

// DeleteJobReply

// .elasticjob.proto.ErrorCode err_code = 1;
inline bool DeleteJobReply::_internal_has_err_code() const {
  return this != internal_default_instance() && err_code_ != nullptr;
}
inline bool DeleteJobReply::has_err_code() const {
  return _internal_has_err_code();
}
inline void DeleteJobReply::clear_err_code() {
  if (GetArena() == nullptr && err_code_ != nullptr) {
    delete err_code_;
  }
  err_code_ = nullptr;
}
inline const ::elasticjob::proto::ErrorCode& DeleteJobReply::_internal_err_code() const {
  const ::elasticjob::proto::ErrorCode* p = err_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::elasticjob::proto::ErrorCode*>(
      &::elasticjob::proto::_ErrorCode_default_instance_);
}
inline const ::elasticjob::proto::ErrorCode& DeleteJobReply::err_code() const {
  // @@protoc_insertion_point(field_get:elasticjob.proto.DeleteJobReply.err_code)
  return _internal_err_code();
}
inline void DeleteJobReply::unsafe_arena_set_allocated_err_code(
    ::elasticjob::proto::ErrorCode* err_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(err_code_);
  }
  err_code_ = err_code;
  if (err_code) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:elasticjob.proto.DeleteJobReply.err_code)
}
inline ::elasticjob::proto::ErrorCode* DeleteJobReply::release_err_code() {
  
  ::elasticjob::proto::ErrorCode* temp = err_code_;
  err_code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::elasticjob::proto::ErrorCode* DeleteJobReply::unsafe_arena_release_err_code() {
  // @@protoc_insertion_point(field_release:elasticjob.proto.DeleteJobReply.err_code)
  
  ::elasticjob::proto::ErrorCode* temp = err_code_;
  err_code_ = nullptr;
  return temp;
}
inline ::elasticjob::proto::ErrorCode* DeleteJobReply::_internal_mutable_err_code() {
  
  if (err_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::elasticjob::proto::ErrorCode>(GetArena());
    err_code_ = p;
  }
  return err_code_;
}
inline ::elasticjob::proto::ErrorCode* DeleteJobReply::mutable_err_code() {
  // @@protoc_insertion_point(field_mutable:elasticjob.proto.DeleteJobReply.err_code)
  return _internal_mutable_err_code();
}
inline void DeleteJobReply::set_allocated_err_code(::elasticjob::proto::ErrorCode* err_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete err_code_;
  }
  if (err_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(err_code);
    if (message_arena != submessage_arena) {
      err_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, err_code, submessage_arena);
    }
    
  } else {
    
  }
  err_code_ = err_code;
  // @@protoc_insertion_point(field_set_allocated:elasticjob.proto.DeleteJobReply.err_code)
}

// -------------------------------------------------------------------

// GetJobResultRequest

// string job_id = 1;
inline void GetJobResultRequest::clear_job_id() {
  job_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetJobResultRequest::job_id() const {
  // @@protoc_insertion_point(field_get:elasticjob.proto.GetJobResultRequest.job_id)
  return _internal_job_id();
}
inline void GetJobResultRequest::set_job_id(const std::string& value) {
  _internal_set_job_id(value);
  // @@protoc_insertion_point(field_set:elasticjob.proto.GetJobResultRequest.job_id)
}
inline std::string* GetJobResultRequest::mutable_job_id() {
  // @@protoc_insertion_point(field_mutable:elasticjob.proto.GetJobResultRequest.job_id)
  return _internal_mutable_job_id();
}
inline const std::string& GetJobResultRequest::_internal_job_id() const {
  return job_id_.Get();
}
inline void GetJobResultRequest::_internal_set_job_id(const std::string& value) {
  
  job_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetJobResultRequest::set_job_id(std::string&& value) {
  
  job_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:elasticjob.proto.GetJobResultRequest.job_id)
}
inline void GetJobResultRequest::set_job_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  job_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:elasticjob.proto.GetJobResultRequest.job_id)
}
inline void GetJobResultRequest::set_job_id(const char* value,
    size_t size) {
  
  job_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:elasticjob.proto.GetJobResultRequest.job_id)
}
inline std::string* GetJobResultRequest::_internal_mutable_job_id() {
  
  return job_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetJobResultRequest::release_job_id() {
  // @@protoc_insertion_point(field_release:elasticjob.proto.GetJobResultRequest.job_id)
  return job_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetJobResultRequest::set_allocated_job_id(std::string* job_id) {
  if (job_id != nullptr) {
    
  } else {
    
  }
  job_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), job_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:elasticjob.proto.GetJobResultRequest.job_id)
}

// -------------------------------------------------------------------

// GetJobResultReply

// .elasticjob.proto.ErrorCode err_code = 1;
inline bool GetJobResultReply::_internal_has_err_code() const {
  return this != internal_default_instance() && err_code_ != nullptr;
}
inline bool GetJobResultReply::has_err_code() const {
  return _internal_has_err_code();
}
inline void GetJobResultReply::clear_err_code() {
  if (GetArena() == nullptr && err_code_ != nullptr) {
    delete err_code_;
  }
  err_code_ = nullptr;
}
inline const ::elasticjob::proto::ErrorCode& GetJobResultReply::_internal_err_code() const {
  const ::elasticjob::proto::ErrorCode* p = err_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::elasticjob::proto::ErrorCode*>(
      &::elasticjob::proto::_ErrorCode_default_instance_);
}
inline const ::elasticjob::proto::ErrorCode& GetJobResultReply::err_code() const {
  // @@protoc_insertion_point(field_get:elasticjob.proto.GetJobResultReply.err_code)
  return _internal_err_code();
}
inline void GetJobResultReply::unsafe_arena_set_allocated_err_code(
    ::elasticjob::proto::ErrorCode* err_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(err_code_);
  }
  err_code_ = err_code;
  if (err_code) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:elasticjob.proto.GetJobResultReply.err_code)
}
inline ::elasticjob::proto::ErrorCode* GetJobResultReply::release_err_code() {
  
  ::elasticjob::proto::ErrorCode* temp = err_code_;
  err_code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::elasticjob::proto::ErrorCode* GetJobResultReply::unsafe_arena_release_err_code() {
  // @@protoc_insertion_point(field_release:elasticjob.proto.GetJobResultReply.err_code)
  
  ::elasticjob::proto::ErrorCode* temp = err_code_;
  err_code_ = nullptr;
  return temp;
}
inline ::elasticjob::proto::ErrorCode* GetJobResultReply::_internal_mutable_err_code() {
  
  if (err_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::elasticjob::proto::ErrorCode>(GetArena());
    err_code_ = p;
  }
  return err_code_;
}
inline ::elasticjob::proto::ErrorCode* GetJobResultReply::mutable_err_code() {
  // @@protoc_insertion_point(field_mutable:elasticjob.proto.GetJobResultReply.err_code)
  return _internal_mutable_err_code();
}
inline void GetJobResultReply::set_allocated_err_code(::elasticjob::proto::ErrorCode* err_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete err_code_;
  }
  if (err_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(err_code);
    if (message_arena != submessage_arena) {
      err_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, err_code, submessage_arena);
    }
    
  } else {
    
  }
  err_code_ = err_code;
  // @@protoc_insertion_point(field_set_allocated:elasticjob.proto.GetJobResultReply.err_code)
}

// .elasticjob.proto.JobResult result = 2;
inline bool GetJobResultReply::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool GetJobResultReply::has_result() const {
  return _internal_has_result();
}
inline void GetJobResultReply::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::elasticjob::proto::JobResult& GetJobResultReply::_internal_result() const {
  const ::elasticjob::proto::JobResult* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::elasticjob::proto::JobResult*>(
      &::elasticjob::proto::_JobResult_default_instance_);
}
inline const ::elasticjob::proto::JobResult& GetJobResultReply::result() const {
  // @@protoc_insertion_point(field_get:elasticjob.proto.GetJobResultReply.result)
  return _internal_result();
}
inline void GetJobResultReply::unsafe_arena_set_allocated_result(
    ::elasticjob::proto::JobResult* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:elasticjob.proto.GetJobResultReply.result)
}
inline ::elasticjob::proto::JobResult* GetJobResultReply::release_result() {
  
  ::elasticjob::proto::JobResult* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::elasticjob::proto::JobResult* GetJobResultReply::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:elasticjob.proto.GetJobResultReply.result)
  
  ::elasticjob::proto::JobResult* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::elasticjob::proto::JobResult* GetJobResultReply::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::elasticjob::proto::JobResult>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::elasticjob::proto::JobResult* GetJobResultReply::mutable_result() {
  // @@protoc_insertion_point(field_mutable:elasticjob.proto.GetJobResultReply.result)
  return _internal_mutable_result();
}
inline void GetJobResultReply::set_allocated_result(::elasticjob::proto::JobResult* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:elasticjob.proto.GetJobResultReply.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace elasticjob

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_elastic_5fjob_2eproto
