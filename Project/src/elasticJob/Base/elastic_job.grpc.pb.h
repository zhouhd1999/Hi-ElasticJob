// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: elastic_job.proto
#ifndef GRPC_elastic_5fjob_2eproto__INCLUDED
#define GRPC_elastic_5fjob_2eproto__INCLUDED

#include "elastic_job.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace elasticjob {
namespace proto {

class ElasticJobService final {
 public:
  static constexpr char const* service_full_name() {
    return "elasticjob.proto.ElasticJobService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Ping(::grpc::ClientContext* context, const ::elasticjob::proto::PingRequest& request, ::elasticjob::proto::PongResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob::proto::PongResponse>> AsyncPing(::grpc::ClientContext* context, const ::elasticjob::proto::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob::proto::PongResponse>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob::proto::PongResponse>> PrepareAsyncPing(::grpc::ClientContext* context, const ::elasticjob::proto::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob::proto::PongResponse>>(PrepareAsyncPingRaw(context, request, cq));
    }
    virtual ::grpc::Status AddJob(::grpc::ClientContext* context, const ::elasticjob::proto::AddJobRequest& request, ::elasticjob::proto::AddJobReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob::proto::AddJobReply>> AsyncAddJob(::grpc::ClientContext* context, const ::elasticjob::proto::AddJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob::proto::AddJobReply>>(AsyncAddJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob::proto::AddJobReply>> PrepareAsyncAddJob(::grpc::ClientContext* context, const ::elasticjob::proto::AddJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob::proto::AddJobReply>>(PrepareAsyncAddJobRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteJob(::grpc::ClientContext* context, const ::elasticjob::proto::DeleteJobRequest& request, ::elasticjob::proto::DeleteJobReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob::proto::DeleteJobReply>> AsyncDeleteJob(::grpc::ClientContext* context, const ::elasticjob::proto::DeleteJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob::proto::DeleteJobReply>>(AsyncDeleteJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob::proto::DeleteJobReply>> PrepareAsyncDeleteJob(::grpc::ClientContext* context, const ::elasticjob::proto::DeleteJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob::proto::DeleteJobReply>>(PrepareAsyncDeleteJobRaw(context, request, cq));
    }
    virtual ::grpc::Status GetJobResult(::grpc::ClientContext* context, const ::elasticjob::proto::GetJobResultRequest& request, ::elasticjob::proto::GetJobResultReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob::proto::GetJobResultReply>> AsyncGetJobResult(::grpc::ClientContext* context, const ::elasticjob::proto::GetJobResultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob::proto::GetJobResultReply>>(AsyncGetJobResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob::proto::GetJobResultReply>> PrepareAsyncGetJobResult(::grpc::ClientContext* context, const ::elasticjob::proto::GetJobResultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob::proto::GetJobResultReply>>(PrepareAsyncGetJobResultRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Ping(::grpc::ClientContext* context, const ::elasticjob::proto::PingRequest* request, ::elasticjob::proto::PongResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Ping(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob::proto::PongResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Ping(::grpc::ClientContext* context, const ::elasticjob::proto::PingRequest* request, ::elasticjob::proto::PongResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Ping(::grpc::ClientContext* context, const ::elasticjob::proto::PingRequest* request, ::elasticjob::proto::PongResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Ping(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob::proto::PongResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Ping(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob::proto::PongResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void AddJob(::grpc::ClientContext* context, const ::elasticjob::proto::AddJobRequest* request, ::elasticjob::proto::AddJobReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob::proto::AddJobReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddJob(::grpc::ClientContext* context, const ::elasticjob::proto::AddJobRequest* request, ::elasticjob::proto::AddJobReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddJob(::grpc::ClientContext* context, const ::elasticjob::proto::AddJobRequest* request, ::elasticjob::proto::AddJobReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob::proto::AddJobReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob::proto::AddJobReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DeleteJob(::grpc::ClientContext* context, const ::elasticjob::proto::DeleteJobRequest* request, ::elasticjob::proto::DeleteJobReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob::proto::DeleteJobReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteJob(::grpc::ClientContext* context, const ::elasticjob::proto::DeleteJobRequest* request, ::elasticjob::proto::DeleteJobReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteJob(::grpc::ClientContext* context, const ::elasticjob::proto::DeleteJobRequest* request, ::elasticjob::proto::DeleteJobReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob::proto::DeleteJobReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob::proto::DeleteJobReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetJobResult(::grpc::ClientContext* context, const ::elasticjob::proto::GetJobResultRequest* request, ::elasticjob::proto::GetJobResultReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetJobResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob::proto::GetJobResultReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetJobResult(::grpc::ClientContext* context, const ::elasticjob::proto::GetJobResultRequest* request, ::elasticjob::proto::GetJobResultReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetJobResult(::grpc::ClientContext* context, const ::elasticjob::proto::GetJobResultRequest* request, ::elasticjob::proto::GetJobResultReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetJobResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob::proto::GetJobResultReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetJobResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob::proto::GetJobResultReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob::proto::PongResponse>* AsyncPingRaw(::grpc::ClientContext* context, const ::elasticjob::proto::PingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob::proto::PongResponse>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::elasticjob::proto::PingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob::proto::AddJobReply>* AsyncAddJobRaw(::grpc::ClientContext* context, const ::elasticjob::proto::AddJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob::proto::AddJobReply>* PrepareAsyncAddJobRaw(::grpc::ClientContext* context, const ::elasticjob::proto::AddJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob::proto::DeleteJobReply>* AsyncDeleteJobRaw(::grpc::ClientContext* context, const ::elasticjob::proto::DeleteJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob::proto::DeleteJobReply>* PrepareAsyncDeleteJobRaw(::grpc::ClientContext* context, const ::elasticjob::proto::DeleteJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob::proto::GetJobResultReply>* AsyncGetJobResultRaw(::grpc::ClientContext* context, const ::elasticjob::proto::GetJobResultRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::elasticjob::proto::GetJobResultReply>* PrepareAsyncGetJobResultRaw(::grpc::ClientContext* context, const ::elasticjob::proto::GetJobResultRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Ping(::grpc::ClientContext* context, const ::elasticjob::proto::PingRequest& request, ::elasticjob::proto::PongResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elasticjob::proto::PongResponse>> AsyncPing(::grpc::ClientContext* context, const ::elasticjob::proto::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elasticjob::proto::PongResponse>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elasticjob::proto::PongResponse>> PrepareAsyncPing(::grpc::ClientContext* context, const ::elasticjob::proto::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elasticjob::proto::PongResponse>>(PrepareAsyncPingRaw(context, request, cq));
    }
    ::grpc::Status AddJob(::grpc::ClientContext* context, const ::elasticjob::proto::AddJobRequest& request, ::elasticjob::proto::AddJobReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elasticjob::proto::AddJobReply>> AsyncAddJob(::grpc::ClientContext* context, const ::elasticjob::proto::AddJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elasticjob::proto::AddJobReply>>(AsyncAddJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elasticjob::proto::AddJobReply>> PrepareAsyncAddJob(::grpc::ClientContext* context, const ::elasticjob::proto::AddJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elasticjob::proto::AddJobReply>>(PrepareAsyncAddJobRaw(context, request, cq));
    }
    ::grpc::Status DeleteJob(::grpc::ClientContext* context, const ::elasticjob::proto::DeleteJobRequest& request, ::elasticjob::proto::DeleteJobReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elasticjob::proto::DeleteJobReply>> AsyncDeleteJob(::grpc::ClientContext* context, const ::elasticjob::proto::DeleteJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elasticjob::proto::DeleteJobReply>>(AsyncDeleteJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elasticjob::proto::DeleteJobReply>> PrepareAsyncDeleteJob(::grpc::ClientContext* context, const ::elasticjob::proto::DeleteJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elasticjob::proto::DeleteJobReply>>(PrepareAsyncDeleteJobRaw(context, request, cq));
    }
    ::grpc::Status GetJobResult(::grpc::ClientContext* context, const ::elasticjob::proto::GetJobResultRequest& request, ::elasticjob::proto::GetJobResultReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elasticjob::proto::GetJobResultReply>> AsyncGetJobResult(::grpc::ClientContext* context, const ::elasticjob::proto::GetJobResultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elasticjob::proto::GetJobResultReply>>(AsyncGetJobResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elasticjob::proto::GetJobResultReply>> PrepareAsyncGetJobResult(::grpc::ClientContext* context, const ::elasticjob::proto::GetJobResultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::elasticjob::proto::GetJobResultReply>>(PrepareAsyncGetJobResultRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Ping(::grpc::ClientContext* context, const ::elasticjob::proto::PingRequest* request, ::elasticjob::proto::PongResponse* response, std::function<void(::grpc::Status)>) override;
      void Ping(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob::proto::PongResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Ping(::grpc::ClientContext* context, const ::elasticjob::proto::PingRequest* request, ::elasticjob::proto::PongResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Ping(::grpc::ClientContext* context, const ::elasticjob::proto::PingRequest* request, ::elasticjob::proto::PongResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Ping(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob::proto::PongResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Ping(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob::proto::PongResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AddJob(::grpc::ClientContext* context, const ::elasticjob::proto::AddJobRequest* request, ::elasticjob::proto::AddJobReply* response, std::function<void(::grpc::Status)>) override;
      void AddJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob::proto::AddJobReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddJob(::grpc::ClientContext* context, const ::elasticjob::proto::AddJobRequest* request, ::elasticjob::proto::AddJobReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddJob(::grpc::ClientContext* context, const ::elasticjob::proto::AddJobRequest* request, ::elasticjob::proto::AddJobReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob::proto::AddJobReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob::proto::AddJobReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteJob(::grpc::ClientContext* context, const ::elasticjob::proto::DeleteJobRequest* request, ::elasticjob::proto::DeleteJobReply* response, std::function<void(::grpc::Status)>) override;
      void DeleteJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob::proto::DeleteJobReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteJob(::grpc::ClientContext* context, const ::elasticjob::proto::DeleteJobRequest* request, ::elasticjob::proto::DeleteJobReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteJob(::grpc::ClientContext* context, const ::elasticjob::proto::DeleteJobRequest* request, ::elasticjob::proto::DeleteJobReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob::proto::DeleteJobReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob::proto::DeleteJobReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetJobResult(::grpc::ClientContext* context, const ::elasticjob::proto::GetJobResultRequest* request, ::elasticjob::proto::GetJobResultReply* response, std::function<void(::grpc::Status)>) override;
      void GetJobResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob::proto::GetJobResultReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetJobResult(::grpc::ClientContext* context, const ::elasticjob::proto::GetJobResultRequest* request, ::elasticjob::proto::GetJobResultReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetJobResult(::grpc::ClientContext* context, const ::elasticjob::proto::GetJobResultRequest* request, ::elasticjob::proto::GetJobResultReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetJobResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob::proto::GetJobResultReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetJobResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::elasticjob::proto::GetJobResultReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::elasticjob::proto::PongResponse>* AsyncPingRaw(::grpc::ClientContext* context, const ::elasticjob::proto::PingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::elasticjob::proto::PongResponse>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::elasticjob::proto::PingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::elasticjob::proto::AddJobReply>* AsyncAddJobRaw(::grpc::ClientContext* context, const ::elasticjob::proto::AddJobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::elasticjob::proto::AddJobReply>* PrepareAsyncAddJobRaw(::grpc::ClientContext* context, const ::elasticjob::proto::AddJobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::elasticjob::proto::DeleteJobReply>* AsyncDeleteJobRaw(::grpc::ClientContext* context, const ::elasticjob::proto::DeleteJobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::elasticjob::proto::DeleteJobReply>* PrepareAsyncDeleteJobRaw(::grpc::ClientContext* context, const ::elasticjob::proto::DeleteJobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::elasticjob::proto::GetJobResultReply>* AsyncGetJobResultRaw(::grpc::ClientContext* context, const ::elasticjob::proto::GetJobResultRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::elasticjob::proto::GetJobResultReply>* PrepareAsyncGetJobResultRaw(::grpc::ClientContext* context, const ::elasticjob::proto::GetJobResultRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Ping_;
    const ::grpc::internal::RpcMethod rpcmethod_AddJob_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteJob_;
    const ::grpc::internal::RpcMethod rpcmethod_GetJobResult_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Ping(::grpc::ServerContext* context, const ::elasticjob::proto::PingRequest* request, ::elasticjob::proto::PongResponse* response);
    virtual ::grpc::Status AddJob(::grpc::ServerContext* context, const ::elasticjob::proto::AddJobRequest* request, ::elasticjob::proto::AddJobReply* response);
    virtual ::grpc::Status DeleteJob(::grpc::ServerContext* context, const ::elasticjob::proto::DeleteJobRequest* request, ::elasticjob::proto::DeleteJobReply* response);
    virtual ::grpc::Status GetJobResult(::grpc::ServerContext* context, const ::elasticjob::proto::GetJobResultRequest* request, ::elasticjob::proto::GetJobResultReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Ping() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::elasticjob::proto::PingRequest* /*request*/, ::elasticjob::proto::PongResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPing(::grpc::ServerContext* context, ::elasticjob::proto::PingRequest* request, ::grpc::ServerAsyncResponseWriter< ::elasticjob::proto::PongResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddJob() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AddJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddJob(::grpc::ServerContext* /*context*/, const ::elasticjob::proto::AddJobRequest* /*request*/, ::elasticjob::proto::AddJobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddJob(::grpc::ServerContext* context, ::elasticjob::proto::AddJobRequest* request, ::grpc::ServerAsyncResponseWriter< ::elasticjob::proto::AddJobReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteJob() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteJob(::grpc::ServerContext* /*context*/, const ::elasticjob::proto::DeleteJobRequest* /*request*/, ::elasticjob::proto::DeleteJobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteJob(::grpc::ServerContext* context, ::elasticjob::proto::DeleteJobRequest* request, ::grpc::ServerAsyncResponseWriter< ::elasticjob::proto::DeleteJobReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetJobResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetJobResult() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetJobResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetJobResult(::grpc::ServerContext* /*context*/, const ::elasticjob::proto::GetJobResultRequest* /*request*/, ::elasticjob::proto::GetJobResultReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetJobResult(::grpc::ServerContext* context, ::elasticjob::proto::GetJobResultRequest* request, ::grpc::ServerAsyncResponseWriter< ::elasticjob::proto::GetJobResultReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Ping<WithAsyncMethod_AddJob<WithAsyncMethod_DeleteJob<WithAsyncMethod_GetJobResult<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Ping() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::elasticjob::proto::PingRequest, ::elasticjob::proto::PongResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::elasticjob::proto::PingRequest* request, ::elasticjob::proto::PongResponse* response) { return this->Ping(context, request, response); }));}
    void SetMessageAllocatorFor_Ping(
        ::grpc::experimental::MessageAllocator< ::elasticjob::proto::PingRequest, ::elasticjob::proto::PongResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::elasticjob::proto::PingRequest, ::elasticjob::proto::PongResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::elasticjob::proto::PingRequest* /*request*/, ::elasticjob::proto::PongResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Ping(
      ::grpc::CallbackServerContext* /*context*/, const ::elasticjob::proto::PingRequest* /*request*/, ::elasticjob::proto::PongResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Ping(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::elasticjob::proto::PingRequest* /*request*/, ::elasticjob::proto::PongResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AddJob() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::elasticjob::proto::AddJobRequest, ::elasticjob::proto::AddJobReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::elasticjob::proto::AddJobRequest* request, ::elasticjob::proto::AddJobReply* response) { return this->AddJob(context, request, response); }));}
    void SetMessageAllocatorFor_AddJob(
        ::grpc::experimental::MessageAllocator< ::elasticjob::proto::AddJobRequest, ::elasticjob::proto::AddJobReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::elasticjob::proto::AddJobRequest, ::elasticjob::proto::AddJobReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddJob(::grpc::ServerContext* /*context*/, const ::elasticjob::proto::AddJobRequest* /*request*/, ::elasticjob::proto::AddJobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddJob(
      ::grpc::CallbackServerContext* /*context*/, const ::elasticjob::proto::AddJobRequest* /*request*/, ::elasticjob::proto::AddJobReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddJob(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::elasticjob::proto::AddJobRequest* /*request*/, ::elasticjob::proto::AddJobReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteJob() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::elasticjob::proto::DeleteJobRequest, ::elasticjob::proto::DeleteJobReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::elasticjob::proto::DeleteJobRequest* request, ::elasticjob::proto::DeleteJobReply* response) { return this->DeleteJob(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteJob(
        ::grpc::experimental::MessageAllocator< ::elasticjob::proto::DeleteJobRequest, ::elasticjob::proto::DeleteJobReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::elasticjob::proto::DeleteJobRequest, ::elasticjob::proto::DeleteJobReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteJob(::grpc::ServerContext* /*context*/, const ::elasticjob::proto::DeleteJobRequest* /*request*/, ::elasticjob::proto::DeleteJobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteJob(
      ::grpc::CallbackServerContext* /*context*/, const ::elasticjob::proto::DeleteJobRequest* /*request*/, ::elasticjob::proto::DeleteJobReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteJob(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::elasticjob::proto::DeleteJobRequest* /*request*/, ::elasticjob::proto::DeleteJobReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetJobResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetJobResult() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::elasticjob::proto::GetJobResultRequest, ::elasticjob::proto::GetJobResultReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::elasticjob::proto::GetJobResultRequest* request, ::elasticjob::proto::GetJobResultReply* response) { return this->GetJobResult(context, request, response); }));}
    void SetMessageAllocatorFor_GetJobResult(
        ::grpc::experimental::MessageAllocator< ::elasticjob::proto::GetJobResultRequest, ::elasticjob::proto::GetJobResultReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::elasticjob::proto::GetJobResultRequest, ::elasticjob::proto::GetJobResultReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetJobResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetJobResult(::grpc::ServerContext* /*context*/, const ::elasticjob::proto::GetJobResultRequest* /*request*/, ::elasticjob::proto::GetJobResultReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetJobResult(
      ::grpc::CallbackServerContext* /*context*/, const ::elasticjob::proto::GetJobResultRequest* /*request*/, ::elasticjob::proto::GetJobResultReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetJobResult(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::elasticjob::proto::GetJobResultRequest* /*request*/, ::elasticjob::proto::GetJobResultReply* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Ping<ExperimentalWithCallbackMethod_AddJob<ExperimentalWithCallbackMethod_DeleteJob<ExperimentalWithCallbackMethod_GetJobResult<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Ping<ExperimentalWithCallbackMethod_AddJob<ExperimentalWithCallbackMethod_DeleteJob<ExperimentalWithCallbackMethod_GetJobResult<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Ping() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::elasticjob::proto::PingRequest* /*request*/, ::elasticjob::proto::PongResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddJob() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AddJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddJob(::grpc::ServerContext* /*context*/, const ::elasticjob::proto::AddJobRequest* /*request*/, ::elasticjob::proto::AddJobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteJob() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteJob(::grpc::ServerContext* /*context*/, const ::elasticjob::proto::DeleteJobRequest* /*request*/, ::elasticjob::proto::DeleteJobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetJobResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetJobResult() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetJobResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetJobResult(::grpc::ServerContext* /*context*/, const ::elasticjob::proto::GetJobResultRequest* /*request*/, ::elasticjob::proto::GetJobResultReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Ping() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::elasticjob::proto::PingRequest* /*request*/, ::elasticjob::proto::PongResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddJob() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_AddJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddJob(::grpc::ServerContext* /*context*/, const ::elasticjob::proto::AddJobRequest* /*request*/, ::elasticjob::proto::AddJobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddJob(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteJob() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DeleteJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteJob(::grpc::ServerContext* /*context*/, const ::elasticjob::proto::DeleteJobRequest* /*request*/, ::elasticjob::proto::DeleteJobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteJob(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetJobResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetJobResult() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetJobResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetJobResult(::grpc::ServerContext* /*context*/, const ::elasticjob::proto::GetJobResultRequest* /*request*/, ::elasticjob::proto::GetJobResultReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetJobResult(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Ping() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Ping(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::elasticjob::proto::PingRequest* /*request*/, ::elasticjob::proto::PongResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Ping(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Ping(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AddJob() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddJob(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AddJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddJob(::grpc::ServerContext* /*context*/, const ::elasticjob::proto::AddJobRequest* /*request*/, ::elasticjob::proto::AddJobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddJob(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddJob(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteJob() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteJob(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteJob(::grpc::ServerContext* /*context*/, const ::elasticjob::proto::DeleteJobRequest* /*request*/, ::elasticjob::proto::DeleteJobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteJob(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteJob(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetJobResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetJobResult() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetJobResult(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetJobResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetJobResult(::grpc::ServerContext* /*context*/, const ::elasticjob::proto::GetJobResultRequest* /*request*/, ::elasticjob::proto::GetJobResultReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetJobResult(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetJobResult(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Ping() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::elasticjob::proto::PingRequest, ::elasticjob::proto::PongResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::elasticjob::proto::PingRequest, ::elasticjob::proto::PongResponse>* streamer) {
                       return this->StreamedPing(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::elasticjob::proto::PingRequest* /*request*/, ::elasticjob::proto::PongResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::elasticjob::proto::PingRequest,::elasticjob::proto::PongResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddJob() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::elasticjob::proto::AddJobRequest, ::elasticjob::proto::AddJobReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::elasticjob::proto::AddJobRequest, ::elasticjob::proto::AddJobReply>* streamer) {
                       return this->StreamedAddJob(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddJob(::grpc::ServerContext* /*context*/, const ::elasticjob::proto::AddJobRequest* /*request*/, ::elasticjob::proto::AddJobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddJob(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::elasticjob::proto::AddJobRequest,::elasticjob::proto::AddJobReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteJob() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::elasticjob::proto::DeleteJobRequest, ::elasticjob::proto::DeleteJobReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::elasticjob::proto::DeleteJobRequest, ::elasticjob::proto::DeleteJobReply>* streamer) {
                       return this->StreamedDeleteJob(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteJob(::grpc::ServerContext* /*context*/, const ::elasticjob::proto::DeleteJobRequest* /*request*/, ::elasticjob::proto::DeleteJobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteJob(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::elasticjob::proto::DeleteJobRequest,::elasticjob::proto::DeleteJobReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetJobResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetJobResult() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::elasticjob::proto::GetJobResultRequest, ::elasticjob::proto::GetJobResultReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::elasticjob::proto::GetJobResultRequest, ::elasticjob::proto::GetJobResultReply>* streamer) {
                       return this->StreamedGetJobResult(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetJobResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetJobResult(::grpc::ServerContext* /*context*/, const ::elasticjob::proto::GetJobResultRequest* /*request*/, ::elasticjob::proto::GetJobResultReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetJobResult(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::elasticjob::proto::GetJobResultRequest,::elasticjob::proto::GetJobResultReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Ping<WithStreamedUnaryMethod_AddJob<WithStreamedUnaryMethod_DeleteJob<WithStreamedUnaryMethod_GetJobResult<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Ping<WithStreamedUnaryMethod_AddJob<WithStreamedUnaryMethod_DeleteJob<WithStreamedUnaryMethod_GetJobResult<Service > > > > StreamedService;
};

}  // namespace proto
}  // namespace elasticjob


#endif  // GRPC_elastic_5fjob_2eproto__INCLUDED
